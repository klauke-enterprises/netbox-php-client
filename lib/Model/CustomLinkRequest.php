<?php
/**
 * CustomLinkRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.8 (4.0)
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CustomLinkRequest Class Doc Comment
 *
 * @category Class
 * @description Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomLinkRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomLinkRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'object_types' => 'string[]',
        'name' => 'string',
        'enabled' => 'bool',
        'link_text' => 'string',
        'link_url' => 'string',
        'weight' => 'int',
        'group_name' => 'string',
        'button_class' => 'string',
        'new_window' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'object_types' => null,
        'name' => null,
        'enabled' => null,
        'link_text' => null,
        'link_url' => null,
        'weight' => null,
        'group_name' => null,
        'button_class' => null,
        'new_window' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'object_types' => false,
        'name' => false,
        'enabled' => false,
        'link_text' => false,
        'link_url' => false,
        'weight' => false,
        'group_name' => false,
        'button_class' => false,
        'new_window' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'object_types' => 'object_types',
        'name' => 'name',
        'enabled' => 'enabled',
        'link_text' => 'link_text',
        'link_url' => 'link_url',
        'weight' => 'weight',
        'group_name' => 'group_name',
        'button_class' => 'button_class',
        'new_window' => 'new_window'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'object_types' => 'setObjectTypes',
        'name' => 'setName',
        'enabled' => 'setEnabled',
        'link_text' => 'setLinkText',
        'link_url' => 'setLinkUrl',
        'weight' => 'setWeight',
        'group_name' => 'setGroupName',
        'button_class' => 'setButtonClass',
        'new_window' => 'setNewWindow'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'object_types' => 'getObjectTypes',
        'name' => 'getName',
        'enabled' => 'getEnabled',
        'link_text' => 'getLinkText',
        'link_url' => 'getLinkUrl',
        'weight' => 'getWeight',
        'group_name' => 'getGroupName',
        'button_class' => 'getButtonClass',
        'new_window' => 'getNewWindow'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BUTTON_CLASS_OUTLINE_DARK = 'outline-dark';
    public const BUTTON_CLASS_BLUE = 'blue';
    public const BUTTON_CLASS_INDIGO = 'indigo';
    public const BUTTON_CLASS_PURPLE = 'purple';
    public const BUTTON_CLASS_PINK = 'pink';
    public const BUTTON_CLASS_RED = 'red';
    public const BUTTON_CLASS_ORANGE = 'orange';
    public const BUTTON_CLASS_YELLOW = 'yellow';
    public const BUTTON_CLASS_GREEN = 'green';
    public const BUTTON_CLASS_TEAL = 'teal';
    public const BUTTON_CLASS_CYAN = 'cyan';
    public const BUTTON_CLASS_GRAY = 'gray';
    public const BUTTON_CLASS_BLACK = 'black';
    public const BUTTON_CLASS_WHITE = 'white';
    public const BUTTON_CLASS_GHOST_DARK = 'ghost-dark';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getButtonClassAllowableValues()
    {
        return [
            self::BUTTON_CLASS_OUTLINE_DARK,
            self::BUTTON_CLASS_BLUE,
            self::BUTTON_CLASS_INDIGO,
            self::BUTTON_CLASS_PURPLE,
            self::BUTTON_CLASS_PINK,
            self::BUTTON_CLASS_RED,
            self::BUTTON_CLASS_ORANGE,
            self::BUTTON_CLASS_YELLOW,
            self::BUTTON_CLASS_GREEN,
            self::BUTTON_CLASS_TEAL,
            self::BUTTON_CLASS_CYAN,
            self::BUTTON_CLASS_GRAY,
            self::BUTTON_CLASS_BLACK,
            self::BUTTON_CLASS_WHITE,
            self::BUTTON_CLASS_GHOST_DARK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('object_types', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('link_text', $data ?? [], null);
        $this->setIfExists('link_url', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('group_name', $data ?? [], null);
        $this->setIfExists('button_class', $data ?? [], null);
        $this->setIfExists('new_window', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['object_types'] === null) {
            $invalidProperties[] = "'object_types' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['link_text'] === null) {
            $invalidProperties[] = "'link_text' can't be null";
        }
        if ((mb_strlen($this->container['link_text']) < 1)) {
            $invalidProperties[] = "invalid value for 'link_text', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['link_url'] === null) {
            $invalidProperties[] = "'link_url' can't be null";
        }
        if ((mb_strlen($this->container['link_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'link_url', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] > 32767)) {
            $invalidProperties[] = "invalid value for 'weight', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['group_name']) && (mb_strlen($this->container['group_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'group_name', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getButtonClassAllowableValues();
        if (!is_null($this->container['button_class']) && !in_array($this->container['button_class'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'button_class', must be one of '%s'",
                $this->container['button_class'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets object_types
     *
     * @return string[]
     */
    public function getObjectTypes()
    {
        return $this->container['object_types'];
    }

    /**
     * Sets object_types
     *
     * @param string[] $object_types object_types
     *
     * @return self
     */
    public function setObjectTypes($object_types)
    {
        if (is_null($object_types)) {
            throw new \InvalidArgumentException('non-nullable object_types cannot be null');
        }
        $this->container['object_types'] = $object_types;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CustomLinkRequest., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CustomLinkRequest., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets link_text
     *
     * @return string
     */
    public function getLinkText()
    {
        return $this->container['link_text'];
    }

    /**
     * Sets link_text
     *
     * @param string $link_text Jinja2 template code for link text
     *
     * @return self
     */
    public function setLinkText($link_text)
    {
        if (is_null($link_text)) {
            throw new \InvalidArgumentException('non-nullable link_text cannot be null');
        }

        if ((mb_strlen($link_text) < 1)) {
            throw new \InvalidArgumentException('invalid length for $link_text when calling CustomLinkRequest., must be bigger than or equal to 1.');
        }

        $this->container['link_text'] = $link_text;

        return $this;
    }

    /**
     * Gets link_url
     *
     * @return string
     */
    public function getLinkUrl()
    {
        return $this->container['link_url'];
    }

    /**
     * Sets link_url
     *
     * @param string $link_url Jinja2 template code for link URL
     *
     * @return self
     */
    public function setLinkUrl($link_url)
    {
        if (is_null($link_url)) {
            throw new \InvalidArgumentException('non-nullable link_url cannot be null');
        }

        if ((mb_strlen($link_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $link_url when calling CustomLinkRequest., must be bigger than or equal to 1.');
        }

        $this->container['link_url'] = $link_url;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }

        if (($weight > 32767)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling CustomLinkRequest., must be smaller than or equal to 32767.');
        }
        if (($weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling CustomLinkRequest., must be bigger than or equal to 0.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string|null
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string|null $group_name Links with the same group will appear as a dropdown menu
     *
     * @return self
     */
    public function setGroupName($group_name)
    {
        if (is_null($group_name)) {
            throw new \InvalidArgumentException('non-nullable group_name cannot be null');
        }
        if ((mb_strlen($group_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $group_name when calling CustomLinkRequest., must be smaller than or equal to 50.');
        }

        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets button_class
     *
     * @return string|null
     */
    public function getButtonClass()
    {
        return $this->container['button_class'];
    }

    /**
     * Sets button_class
     *
     * @param string|null $button_class The class of the first link in a group will be used for the dropdown button  * `outline-dark` - Default * `blue` - Blue * `indigo` - Indigo * `purple` - Purple * `pink` - Pink * `red` - Red * `orange` - Orange * `yellow` - Yellow * `green` - Green * `teal` - Teal * `cyan` - Cyan * `gray` - Gray * `black` - Black * `white` - White * `ghost-dark` - Link
     *
     * @return self
     */
    public function setButtonClass($button_class)
    {
        if (is_null($button_class)) {
            throw new \InvalidArgumentException('non-nullable button_class cannot be null');
        }
        $allowedValues = $this->getButtonClassAllowableValues();
        if (!in_array($button_class, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'button_class', must be one of '%s'",
                    $button_class,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['button_class'] = $button_class;

        return $this;
    }

    /**
     * Gets new_window
     *
     * @return bool|null
     */
    public function getNewWindow()
    {
        return $this->container['new_window'];
    }

    /**
     * Sets new_window
     *
     * @param bool|null $new_window Force link to open in a new window
     *
     * @return self
     */
    public function setNewWindow($new_window)
    {
        if (is_null($new_window)) {
            throw new \InvalidArgumentException('non-nullable new_window cannot be null');
        }
        $this->container['new_window'] = $new_window;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


