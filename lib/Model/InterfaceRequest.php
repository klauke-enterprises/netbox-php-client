<?php
/**
 * InterfaceRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1.1 (4.1)
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InterfaceRequest Class Doc Comment
 *
 * @category Class
 * @description Adds support for custom fields and tags.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InterfaceRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InterfaceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'device' => '\OpenAPI\Client\Model\BriefDeviceRequest',
        'vdcs' => 'int[]',
        'module' => '\OpenAPI\Client\Model\BriefModuleRequest',
        'name' => 'string',
        'label' => 'string',
        'type' => 'string',
        'enabled' => 'bool',
        'parent' => '\OpenAPI\Client\Model\NestedInterfaceRequest',
        'bridge' => '\OpenAPI\Client\Model\NestedInterfaceRequest',
        'lag' => '\OpenAPI\Client\Model\NestedInterfaceRequest',
        'mtu' => 'int',
        'mac_address' => 'string',
        'speed' => 'int',
        'duplex' => 'string',
        'wwn' => 'string',
        'mgmt_only' => 'bool',
        'description' => 'string',
        'mode' => 'string',
        'rf_role' => 'string',
        'rf_channel' => 'string',
        'poe_mode' => 'string',
        'poe_type' => 'string',
        'rf_channel_frequency' => 'float',
        'rf_channel_width' => 'float',
        'tx_power' => 'int',
        'untagged_vlan' => '\OpenAPI\Client\Model\BriefVLANRequest',
        'tagged_vlans' => 'int[]',
        'mark_connected' => 'bool',
        'wireless_lans' => 'int[]',
        'vrf' => '\OpenAPI\Client\Model\BriefVRFRequest',
        'tags' => '\OpenAPI\Client\Model\NestedTagRequest[]',
        'custom_fields' => 'array<string,mixed>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'device' => null,
        'vdcs' => null,
        'module' => null,
        'name' => null,
        'label' => null,
        'type' => null,
        'enabled' => null,
        'parent' => null,
        'bridge' => null,
        'lag' => null,
        'mtu' => null,
        'mac_address' => null,
        'speed' => null,
        'duplex' => null,
        'wwn' => null,
        'mgmt_only' => null,
        'description' => null,
        'mode' => null,
        'rf_role' => null,
        'rf_channel' => null,
        'poe_mode' => null,
        'poe_type' => null,
        'rf_channel_frequency' => 'double',
        'rf_channel_width' => 'double',
        'tx_power' => null,
        'untagged_vlan' => null,
        'tagged_vlans' => null,
        'mark_connected' => null,
        'wireless_lans' => null,
        'vrf' => null,
        'tags' => null,
        'custom_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'device' => false,
        'vdcs' => false,
        'module' => true,
        'name' => false,
        'label' => false,
        'type' => false,
        'enabled' => false,
        'parent' => true,
        'bridge' => true,
        'lag' => true,
        'mtu' => true,
        'mac_address' => true,
        'speed' => true,
        'duplex' => true,
        'wwn' => true,
        'mgmt_only' => false,
        'description' => false,
        'mode' => false,
        'rf_role' => false,
        'rf_channel' => false,
        'poe_mode' => false,
        'poe_type' => false,
        'rf_channel_frequency' => true,
        'rf_channel_width' => true,
        'tx_power' => true,
        'untagged_vlan' => true,
        'tagged_vlans' => false,
        'mark_connected' => false,
        'wireless_lans' => false,
        'vrf' => true,
        'tags' => false,
        'custom_fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'device' => 'device',
        'vdcs' => 'vdcs',
        'module' => 'module',
        'name' => 'name',
        'label' => 'label',
        'type' => 'type',
        'enabled' => 'enabled',
        'parent' => 'parent',
        'bridge' => 'bridge',
        'lag' => 'lag',
        'mtu' => 'mtu',
        'mac_address' => 'mac_address',
        'speed' => 'speed',
        'duplex' => 'duplex',
        'wwn' => 'wwn',
        'mgmt_only' => 'mgmt_only',
        'description' => 'description',
        'mode' => 'mode',
        'rf_role' => 'rf_role',
        'rf_channel' => 'rf_channel',
        'poe_mode' => 'poe_mode',
        'poe_type' => 'poe_type',
        'rf_channel_frequency' => 'rf_channel_frequency',
        'rf_channel_width' => 'rf_channel_width',
        'tx_power' => 'tx_power',
        'untagged_vlan' => 'untagged_vlan',
        'tagged_vlans' => 'tagged_vlans',
        'mark_connected' => 'mark_connected',
        'wireless_lans' => 'wireless_lans',
        'vrf' => 'vrf',
        'tags' => 'tags',
        'custom_fields' => 'custom_fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'device' => 'setDevice',
        'vdcs' => 'setVdcs',
        'module' => 'setModule',
        'name' => 'setName',
        'label' => 'setLabel',
        'type' => 'setType',
        'enabled' => 'setEnabled',
        'parent' => 'setParent',
        'bridge' => 'setBridge',
        'lag' => 'setLag',
        'mtu' => 'setMtu',
        'mac_address' => 'setMacAddress',
        'speed' => 'setSpeed',
        'duplex' => 'setDuplex',
        'wwn' => 'setWwn',
        'mgmt_only' => 'setMgmtOnly',
        'description' => 'setDescription',
        'mode' => 'setMode',
        'rf_role' => 'setRfRole',
        'rf_channel' => 'setRfChannel',
        'poe_mode' => 'setPoeMode',
        'poe_type' => 'setPoeType',
        'rf_channel_frequency' => 'setRfChannelFrequency',
        'rf_channel_width' => 'setRfChannelWidth',
        'tx_power' => 'setTxPower',
        'untagged_vlan' => 'setUntaggedVlan',
        'tagged_vlans' => 'setTaggedVlans',
        'mark_connected' => 'setMarkConnected',
        'wireless_lans' => 'setWirelessLans',
        'vrf' => 'setVrf',
        'tags' => 'setTags',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'device' => 'getDevice',
        'vdcs' => 'getVdcs',
        'module' => 'getModule',
        'name' => 'getName',
        'label' => 'getLabel',
        'type' => 'getType',
        'enabled' => 'getEnabled',
        'parent' => 'getParent',
        'bridge' => 'getBridge',
        'lag' => 'getLag',
        'mtu' => 'getMtu',
        'mac_address' => 'getMacAddress',
        'speed' => 'getSpeed',
        'duplex' => 'getDuplex',
        'wwn' => 'getWwn',
        'mgmt_only' => 'getMgmtOnly',
        'description' => 'getDescription',
        'mode' => 'getMode',
        'rf_role' => 'getRfRole',
        'rf_channel' => 'getRfChannel',
        'poe_mode' => 'getPoeMode',
        'poe_type' => 'getPoeType',
        'rf_channel_frequency' => 'getRfChannelFrequency',
        'rf_channel_width' => 'getRfChannelWidth',
        'tx_power' => 'getTxPower',
        'untagged_vlan' => 'getUntaggedVlan',
        'tagged_vlans' => 'getTaggedVlans',
        'mark_connected' => 'getMarkConnected',
        'wireless_lans' => 'getWirelessLans',
        'vrf' => 'getVrf',
        'tags' => 'getTags',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_VIRTUAL = 'virtual';
    public const TYPE_BRIDGE = 'bridge';
    public const TYPE_LAG = 'lag';
    public const TYPE__100BASE_FX = '100base-fx';
    public const TYPE__100BASE_LFX = '100base-lfx';
    public const TYPE__100BASE_TX = '100base-tx';
    public const TYPE__100BASE_T1 = '100base-t1';
    public const TYPE__1000BASE_T = '1000base-t';
    public const TYPE__1000BASE_TX = '1000base-tx';
    public const TYPE__2_5GBASE_T = '2.5gbase-t';
    public const TYPE__5GBASE_T = '5gbase-t';
    public const TYPE__10GBASE_T = '10gbase-t';
    public const TYPE__10GBASE_CX4 = '10gbase-cx4';
    public const TYPE__1000BASE_X_GBIC = '1000base-x-gbic';
    public const TYPE__1000BASE_X_SFP = '1000base-x-sfp';
    public const TYPE__10GBASE_X_SFPP = '10gbase-x-sfpp';
    public const TYPE__10GBASE_X_XFP = '10gbase-x-xfp';
    public const TYPE__10GBASE_X_XENPAK = '10gbase-x-xenpak';
    public const TYPE__10GBASE_X_X2 = '10gbase-x-x2';
    public const TYPE__25GBASE_X_SFP28 = '25gbase-x-sfp28';
    public const TYPE__50GBASE_X_SFP56 = '50gbase-x-sfp56';
    public const TYPE__40GBASE_X_QSFPP = '40gbase-x-qsfpp';
    public const TYPE__50GBASE_X_SFP28 = '50gbase-x-sfp28';
    public const TYPE__100GBASE_X_CFP = '100gbase-x-cfp';
    public const TYPE__100GBASE_X_CFP2 = '100gbase-x-cfp2';
    public const TYPE__200GBASE_X_CFP2 = '200gbase-x-cfp2';
    public const TYPE__400GBASE_X_CFP2 = '400gbase-x-cfp2';
    public const TYPE__100GBASE_X_CFP4 = '100gbase-x-cfp4';
    public const TYPE__100GBASE_X_CXP = '100gbase-x-cxp';
    public const TYPE__100GBASE_X_CPAK = '100gbase-x-cpak';
    public const TYPE__100GBASE_X_DSFP = '100gbase-x-dsfp';
    public const TYPE__100GBASE_X_SFPDD = '100gbase-x-sfpdd';
    public const TYPE__100GBASE_X_QSFP28 = '100gbase-x-qsfp28';
    public const TYPE__100GBASE_X_QSFPDD = '100gbase-x-qsfpdd';
    public const TYPE__200GBASE_X_QSFP56 = '200gbase-x-qsfp56';
    public const TYPE__200GBASE_X_QSFPDD = '200gbase-x-qsfpdd';
    public const TYPE__400GBASE_X_QSFP112 = '400gbase-x-qsfp112';
    public const TYPE__400GBASE_X_QSFPDD = '400gbase-x-qsfpdd';
    public const TYPE__400GBASE_X_OSFP = '400gbase-x-osfp';
    public const TYPE__400GBASE_X_OSFP_RHS = '400gbase-x-osfp-rhs';
    public const TYPE__400GBASE_X_CDFP = '400gbase-x-cdfp';
    public const TYPE__400GBASE_X_CFP8 = '400gbase-x-cfp8';
    public const TYPE__800GBASE_X_QSFPDD = '800gbase-x-qsfpdd';
    public const TYPE__800GBASE_X_OSFP = '800gbase-x-osfp';
    public const TYPE__1000BASE_KX = '1000base-kx';
    public const TYPE__2_5GBASE_KX = '2.5gbase-kx';
    public const TYPE__5GBASE_KR = '5gbase-kr';
    public const TYPE__10GBASE_KR = '10gbase-kr';
    public const TYPE__10GBASE_KX4 = '10gbase-kx4';
    public const TYPE__25GBASE_KR = '25gbase-kr';
    public const TYPE__40GBASE_KR4 = '40gbase-kr4';
    public const TYPE__50GBASE_KR = '50gbase-kr';
    public const TYPE__100GBASE_KP4 = '100gbase-kp4';
    public const TYPE__100GBASE_KR2 = '100gbase-kr2';
    public const TYPE__100GBASE_KR4 = '100gbase-kr4';
    public const TYPE_IEEE802_11A = 'ieee802.11a';
    public const TYPE_IEEE802_11G = 'ieee802.11g';
    public const TYPE_IEEE802_11N = 'ieee802.11n';
    public const TYPE_IEEE802_11AC = 'ieee802.11ac';
    public const TYPE_IEEE802_11AD = 'ieee802.11ad';
    public const TYPE_IEEE802_11AX = 'ieee802.11ax';
    public const TYPE_IEEE802_11AY = 'ieee802.11ay';
    public const TYPE_IEEE802_11BE = 'ieee802.11be';
    public const TYPE_IEEE802_15_1 = 'ieee802.15.1';
    public const TYPE_OTHER_WIRELESS = 'other-wireless';
    public const TYPE_GSM = 'gsm';
    public const TYPE_CDMA = 'cdma';
    public const TYPE_LTE = 'lte';
    public const TYPE__4G = '4g';
    public const TYPE__5G = '5g';
    public const TYPE_SONET_OC3 = 'sonet-oc3';
    public const TYPE_SONET_OC12 = 'sonet-oc12';
    public const TYPE_SONET_OC48 = 'sonet-oc48';
    public const TYPE_SONET_OC192 = 'sonet-oc192';
    public const TYPE_SONET_OC768 = 'sonet-oc768';
    public const TYPE_SONET_OC1920 = 'sonet-oc1920';
    public const TYPE_SONET_OC3840 = 'sonet-oc3840';
    public const TYPE__1GFC_SFP = '1gfc-sfp';
    public const TYPE__2GFC_SFP = '2gfc-sfp';
    public const TYPE__4GFC_SFP = '4gfc-sfp';
    public const TYPE__8GFC_SFPP = '8gfc-sfpp';
    public const TYPE__16GFC_SFPP = '16gfc-sfpp';
    public const TYPE__32GFC_SFP28 = '32gfc-sfp28';
    public const TYPE__32GFC_SFPP = '32gfc-sfpp';
    public const TYPE__64GFC_QSFPP = '64gfc-qsfpp';
    public const TYPE__64GFC_SFPDD = '64gfc-sfpdd';
    public const TYPE__64GFC_SFPP = '64gfc-sfpp';
    public const TYPE__128GFC_QSFP28 = '128gfc-qsfp28';
    public const TYPE_INFINIBAND_SDR = 'infiniband-sdr';
    public const TYPE_INFINIBAND_DDR = 'infiniband-ddr';
    public const TYPE_INFINIBAND_QDR = 'infiniband-qdr';
    public const TYPE_INFINIBAND_FDR10 = 'infiniband-fdr10';
    public const TYPE_INFINIBAND_FDR = 'infiniband-fdr';
    public const TYPE_INFINIBAND_EDR = 'infiniband-edr';
    public const TYPE_INFINIBAND_HDR = 'infiniband-hdr';
    public const TYPE_INFINIBAND_NDR = 'infiniband-ndr';
    public const TYPE_INFINIBAND_XDR = 'infiniband-xdr';
    public const TYPE_T1 = 't1';
    public const TYPE_E1 = 'e1';
    public const TYPE_T3 = 't3';
    public const TYPE_E3 = 'e3';
    public const TYPE_XDSL = 'xdsl';
    public const TYPE_DOCSIS = 'docsis';
    public const TYPE_BPON = 'bpon';
    public const TYPE_EPON = 'epon';
    public const TYPE__10G_EPON = '10g-epon';
    public const TYPE_GPON = 'gpon';
    public const TYPE_XG_PON = 'xg-pon';
    public const TYPE_XGS_PON = 'xgs-pon';
    public const TYPE_NG_PON2 = 'ng-pon2';
    public const TYPE__25G_PON = '25g-pon';
    public const TYPE__50G_PON = '50g-pon';
    public const TYPE_CISCO_STACKWISE = 'cisco-stackwise';
    public const TYPE_CISCO_STACKWISE_PLUS = 'cisco-stackwise-plus';
    public const TYPE_CISCO_FLEXSTACK = 'cisco-flexstack';
    public const TYPE_CISCO_FLEXSTACK_PLUS = 'cisco-flexstack-plus';
    public const TYPE_CISCO_STACKWISE_80 = 'cisco-stackwise-80';
    public const TYPE_CISCO_STACKWISE_160 = 'cisco-stackwise-160';
    public const TYPE_CISCO_STACKWISE_320 = 'cisco-stackwise-320';
    public const TYPE_CISCO_STACKWISE_480 = 'cisco-stackwise-480';
    public const TYPE_CISCO_STACKWISE_1T = 'cisco-stackwise-1t';
    public const TYPE_JUNIPER_VCP = 'juniper-vcp';
    public const TYPE_EXTREME_SUMMITSTACK = 'extreme-summitstack';
    public const TYPE_EXTREME_SUMMITSTACK_128 = 'extreme-summitstack-128';
    public const TYPE_EXTREME_SUMMITSTACK_256 = 'extreme-summitstack-256';
    public const TYPE_EXTREME_SUMMITSTACK_512 = 'extreme-summitstack-512';
    public const TYPE_OTHER = 'other';
    public const DUPLEX_HALF = 'half';
    public const DUPLEX_FULL = 'full';
    public const DUPLEX_AUTO = 'auto';
    public const DUPLEX_EMPTY = '';
    public const DUPLEX_NULL = 'null';
    public const MODE_ACCESS = 'access';
    public const MODE_TAGGED = 'tagged';
    public const MODE_TAGGED_ALL = 'tagged-all';
    public const MODE_EMPTY = '';
    public const RF_ROLE_AP = 'ap';
    public const RF_ROLE_STATION = 'station';
    public const RF_ROLE_EMPTY = '';
    public const RF_CHANNEL__2_4G_1_2412_22 = '2.4g-1-2412-22';
    public const RF_CHANNEL__2_4G_2_2417_22 = '2.4g-2-2417-22';
    public const RF_CHANNEL__2_4G_3_2422_22 = '2.4g-3-2422-22';
    public const RF_CHANNEL__2_4G_4_2427_22 = '2.4g-4-2427-22';
    public const RF_CHANNEL__2_4G_5_2432_22 = '2.4g-5-2432-22';
    public const RF_CHANNEL__2_4G_6_2437_22 = '2.4g-6-2437-22';
    public const RF_CHANNEL__2_4G_7_2442_22 = '2.4g-7-2442-22';
    public const RF_CHANNEL__2_4G_8_2447_22 = '2.4g-8-2447-22';
    public const RF_CHANNEL__2_4G_9_2452_22 = '2.4g-9-2452-22';
    public const RF_CHANNEL__2_4G_10_2457_22 = '2.4g-10-2457-22';
    public const RF_CHANNEL__2_4G_11_2462_22 = '2.4g-11-2462-22';
    public const RF_CHANNEL__2_4G_12_2467_22 = '2.4g-12-2467-22';
    public const RF_CHANNEL__2_4G_13_2472_22 = '2.4g-13-2472-22';
    public const RF_CHANNEL__5G_32_5160_20 = '5g-32-5160-20';
    public const RF_CHANNEL__5G_34_5170_40 = '5g-34-5170-40';
    public const RF_CHANNEL__5G_36_5180_20 = '5g-36-5180-20';
    public const RF_CHANNEL__5G_38_5190_40 = '5g-38-5190-40';
    public const RF_CHANNEL__5G_40_5200_20 = '5g-40-5200-20';
    public const RF_CHANNEL__5G_42_5210_80 = '5g-42-5210-80';
    public const RF_CHANNEL__5G_44_5220_20 = '5g-44-5220-20';
    public const RF_CHANNEL__5G_46_5230_40 = '5g-46-5230-40';
    public const RF_CHANNEL__5G_48_5240_20 = '5g-48-5240-20';
    public const RF_CHANNEL__5G_50_5250_160 = '5g-50-5250-160';
    public const RF_CHANNEL__5G_52_5260_20 = '5g-52-5260-20';
    public const RF_CHANNEL__5G_54_5270_40 = '5g-54-5270-40';
    public const RF_CHANNEL__5G_56_5280_20 = '5g-56-5280-20';
    public const RF_CHANNEL__5G_58_5290_80 = '5g-58-5290-80';
    public const RF_CHANNEL__5G_60_5300_20 = '5g-60-5300-20';
    public const RF_CHANNEL__5G_62_5310_40 = '5g-62-5310-40';
    public const RF_CHANNEL__5G_64_5320_20 = '5g-64-5320-20';
    public const RF_CHANNEL__5G_100_5500_20 = '5g-100-5500-20';
    public const RF_CHANNEL__5G_102_5510_40 = '5g-102-5510-40';
    public const RF_CHANNEL__5G_104_5520_20 = '5g-104-5520-20';
    public const RF_CHANNEL__5G_106_5530_80 = '5g-106-5530-80';
    public const RF_CHANNEL__5G_108_5540_20 = '5g-108-5540-20';
    public const RF_CHANNEL__5G_110_5550_40 = '5g-110-5550-40';
    public const RF_CHANNEL__5G_112_5560_20 = '5g-112-5560-20';
    public const RF_CHANNEL__5G_114_5570_160 = '5g-114-5570-160';
    public const RF_CHANNEL__5G_116_5580_20 = '5g-116-5580-20';
    public const RF_CHANNEL__5G_118_5590_40 = '5g-118-5590-40';
    public const RF_CHANNEL__5G_120_5600_20 = '5g-120-5600-20';
    public const RF_CHANNEL__5G_122_5610_80 = '5g-122-5610-80';
    public const RF_CHANNEL__5G_124_5620_20 = '5g-124-5620-20';
    public const RF_CHANNEL__5G_126_5630_40 = '5g-126-5630-40';
    public const RF_CHANNEL__5G_128_5640_20 = '5g-128-5640-20';
    public const RF_CHANNEL__5G_132_5660_20 = '5g-132-5660-20';
    public const RF_CHANNEL__5G_134_5670_40 = '5g-134-5670-40';
    public const RF_CHANNEL__5G_136_5680_20 = '5g-136-5680-20';
    public const RF_CHANNEL__5G_138_5690_80 = '5g-138-5690-80';
    public const RF_CHANNEL__5G_140_5700_20 = '5g-140-5700-20';
    public const RF_CHANNEL__5G_142_5710_40 = '5g-142-5710-40';
    public const RF_CHANNEL__5G_144_5720_20 = '5g-144-5720-20';
    public const RF_CHANNEL__5G_149_5745_20 = '5g-149-5745-20';
    public const RF_CHANNEL__5G_151_5755_40 = '5g-151-5755-40';
    public const RF_CHANNEL__5G_153_5765_20 = '5g-153-5765-20';
    public const RF_CHANNEL__5G_155_5775_80 = '5g-155-5775-80';
    public const RF_CHANNEL__5G_157_5785_20 = '5g-157-5785-20';
    public const RF_CHANNEL__5G_159_5795_40 = '5g-159-5795-40';
    public const RF_CHANNEL__5G_161_5805_20 = '5g-161-5805-20';
    public const RF_CHANNEL__5G_163_5815_160 = '5g-163-5815-160';
    public const RF_CHANNEL__5G_165_5825_20 = '5g-165-5825-20';
    public const RF_CHANNEL__5G_167_5835_40 = '5g-167-5835-40';
    public const RF_CHANNEL__5G_169_5845_20 = '5g-169-5845-20';
    public const RF_CHANNEL__5G_171_5855_80 = '5g-171-5855-80';
    public const RF_CHANNEL__5G_173_5865_20 = '5g-173-5865-20';
    public const RF_CHANNEL__5G_175_5875_40 = '5g-175-5875-40';
    public const RF_CHANNEL__5G_177_5885_20 = '5g-177-5885-20';
    public const RF_CHANNEL__6G_1_5955_20 = '6g-1-5955-20';
    public const RF_CHANNEL__6G_3_5965_40 = '6g-3-5965-40';
    public const RF_CHANNEL__6G_5_5975_20 = '6g-5-5975-20';
    public const RF_CHANNEL__6G_7_5985_80 = '6g-7-5985-80';
    public const RF_CHANNEL__6G_9_5995_20 = '6g-9-5995-20';
    public const RF_CHANNEL__6G_11_6005_40 = '6g-11-6005-40';
    public const RF_CHANNEL__6G_13_6015_20 = '6g-13-6015-20';
    public const RF_CHANNEL__6G_15_6025_160 = '6g-15-6025-160';
    public const RF_CHANNEL__6G_17_6035_20 = '6g-17-6035-20';
    public const RF_CHANNEL__6G_19_6045_40 = '6g-19-6045-40';
    public const RF_CHANNEL__6G_21_6055_20 = '6g-21-6055-20';
    public const RF_CHANNEL__6G_23_6065_80 = '6g-23-6065-80';
    public const RF_CHANNEL__6G_25_6075_20 = '6g-25-6075-20';
    public const RF_CHANNEL__6G_27_6085_40 = '6g-27-6085-40';
    public const RF_CHANNEL__6G_29_6095_20 = '6g-29-6095-20';
    public const RF_CHANNEL__6G_31_6105_320 = '6g-31-6105-320';
    public const RF_CHANNEL__6G_33_6115_20 = '6g-33-6115-20';
    public const RF_CHANNEL__6G_35_6125_40 = '6g-35-6125-40';
    public const RF_CHANNEL__6G_37_6135_20 = '6g-37-6135-20';
    public const RF_CHANNEL__6G_39_6145_80 = '6g-39-6145-80';
    public const RF_CHANNEL__6G_41_6155_20 = '6g-41-6155-20';
    public const RF_CHANNEL__6G_43_6165_40 = '6g-43-6165-40';
    public const RF_CHANNEL__6G_45_6175_20 = '6g-45-6175-20';
    public const RF_CHANNEL__6G_47_6185_160 = '6g-47-6185-160';
    public const RF_CHANNEL__6G_49_6195_20 = '6g-49-6195-20';
    public const RF_CHANNEL__6G_51_6205_40 = '6g-51-6205-40';
    public const RF_CHANNEL__6G_53_6215_20 = '6g-53-6215-20';
    public const RF_CHANNEL__6G_55_6225_80 = '6g-55-6225-80';
    public const RF_CHANNEL__6G_57_6235_20 = '6g-57-6235-20';
    public const RF_CHANNEL__6G_59_6245_40 = '6g-59-6245-40';
    public const RF_CHANNEL__6G_61_6255_20 = '6g-61-6255-20';
    public const RF_CHANNEL__6G_65_6275_20 = '6g-65-6275-20';
    public const RF_CHANNEL__6G_67_6285_40 = '6g-67-6285-40';
    public const RF_CHANNEL__6G_69_6295_20 = '6g-69-6295-20';
    public const RF_CHANNEL__6G_71_6305_80 = '6g-71-6305-80';
    public const RF_CHANNEL__6G_73_6315_20 = '6g-73-6315-20';
    public const RF_CHANNEL__6G_75_6325_40 = '6g-75-6325-40';
    public const RF_CHANNEL__6G_77_6335_20 = '6g-77-6335-20';
    public const RF_CHANNEL__6G_79_6345_160 = '6g-79-6345-160';
    public const RF_CHANNEL__6G_81_6355_20 = '6g-81-6355-20';
    public const RF_CHANNEL__6G_83_6365_40 = '6g-83-6365-40';
    public const RF_CHANNEL__6G_85_6375_20 = '6g-85-6375-20';
    public const RF_CHANNEL__6G_87_6385_80 = '6g-87-6385-80';
    public const RF_CHANNEL__6G_89_6395_20 = '6g-89-6395-20';
    public const RF_CHANNEL__6G_91_6405_40 = '6g-91-6405-40';
    public const RF_CHANNEL__6G_93_6415_20 = '6g-93-6415-20';
    public const RF_CHANNEL__6G_95_6425_320 = '6g-95-6425-320';
    public const RF_CHANNEL__6G_97_6435_20 = '6g-97-6435-20';
    public const RF_CHANNEL__6G_99_6445_40 = '6g-99-6445-40';
    public const RF_CHANNEL__6G_101_6455_20 = '6g-101-6455-20';
    public const RF_CHANNEL__6G_103_6465_80 = '6g-103-6465-80';
    public const RF_CHANNEL__6G_105_6475_20 = '6g-105-6475-20';
    public const RF_CHANNEL__6G_107_6485_40 = '6g-107-6485-40';
    public const RF_CHANNEL__6G_109_6495_20 = '6g-109-6495-20';
    public const RF_CHANNEL__6G_111_6505_160 = '6g-111-6505-160';
    public const RF_CHANNEL__6G_113_6515_20 = '6g-113-6515-20';
    public const RF_CHANNEL__6G_115_6525_40 = '6g-115-6525-40';
    public const RF_CHANNEL__6G_117_6535_20 = '6g-117-6535-20';
    public const RF_CHANNEL__6G_119_6545_80 = '6g-119-6545-80';
    public const RF_CHANNEL__6G_121_6555_20 = '6g-121-6555-20';
    public const RF_CHANNEL__6G_123_6565_40 = '6g-123-6565-40';
    public const RF_CHANNEL__6G_125_6575_20 = '6g-125-6575-20';
    public const RF_CHANNEL__6G_129_6595_20 = '6g-129-6595-20';
    public const RF_CHANNEL__6G_131_6605_40 = '6g-131-6605-40';
    public const RF_CHANNEL__6G_133_6615_20 = '6g-133-6615-20';
    public const RF_CHANNEL__6G_135_6625_80 = '6g-135-6625-80';
    public const RF_CHANNEL__6G_137_6635_20 = '6g-137-6635-20';
    public const RF_CHANNEL__6G_139_6645_40 = '6g-139-6645-40';
    public const RF_CHANNEL__6G_141_6655_20 = '6g-141-6655-20';
    public const RF_CHANNEL__6G_143_6665_160 = '6g-143-6665-160';
    public const RF_CHANNEL__6G_145_6675_20 = '6g-145-6675-20';
    public const RF_CHANNEL__6G_147_6685_40 = '6g-147-6685-40';
    public const RF_CHANNEL__6G_149_6695_20 = '6g-149-6695-20';
    public const RF_CHANNEL__6G_151_6705_80 = '6g-151-6705-80';
    public const RF_CHANNEL__6G_153_6715_20 = '6g-153-6715-20';
    public const RF_CHANNEL__6G_155_6725_40 = '6g-155-6725-40';
    public const RF_CHANNEL__6G_157_6735_20 = '6g-157-6735-20';
    public const RF_CHANNEL__6G_159_6745_320 = '6g-159-6745-320';
    public const RF_CHANNEL__6G_161_6755_20 = '6g-161-6755-20';
    public const RF_CHANNEL__6G_163_6765_40 = '6g-163-6765-40';
    public const RF_CHANNEL__6G_165_6775_20 = '6g-165-6775-20';
    public const RF_CHANNEL__6G_167_6785_80 = '6g-167-6785-80';
    public const RF_CHANNEL__6G_169_6795_20 = '6g-169-6795-20';
    public const RF_CHANNEL__6G_171_6805_40 = '6g-171-6805-40';
    public const RF_CHANNEL__6G_173_6815_20 = '6g-173-6815-20';
    public const RF_CHANNEL__6G_175_6825_160 = '6g-175-6825-160';
    public const RF_CHANNEL__6G_177_6835_20 = '6g-177-6835-20';
    public const RF_CHANNEL__6G_179_6845_40 = '6g-179-6845-40';
    public const RF_CHANNEL__6G_181_6855_20 = '6g-181-6855-20';
    public const RF_CHANNEL__6G_183_6865_80 = '6g-183-6865-80';
    public const RF_CHANNEL__6G_185_6875_20 = '6g-185-6875-20';
    public const RF_CHANNEL__6G_187_6885_40 = '6g-187-6885-40';
    public const RF_CHANNEL__6G_189_6895_20 = '6g-189-6895-20';
    public const RF_CHANNEL__6G_193_6915_20 = '6g-193-6915-20';
    public const RF_CHANNEL__6G_195_6925_40 = '6g-195-6925-40';
    public const RF_CHANNEL__6G_197_6935_20 = '6g-197-6935-20';
    public const RF_CHANNEL__6G_199_6945_80 = '6g-199-6945-80';
    public const RF_CHANNEL__6G_201_6955_20 = '6g-201-6955-20';
    public const RF_CHANNEL__6G_203_6965_40 = '6g-203-6965-40';
    public const RF_CHANNEL__6G_205_6975_20 = '6g-205-6975-20';
    public const RF_CHANNEL__6G_207_6985_160 = '6g-207-6985-160';
    public const RF_CHANNEL__6G_209_6995_20 = '6g-209-6995-20';
    public const RF_CHANNEL__6G_211_7005_40 = '6g-211-7005-40';
    public const RF_CHANNEL__6G_213_7015_20 = '6g-213-7015-20';
    public const RF_CHANNEL__6G_215_7025_80 = '6g-215-7025-80';
    public const RF_CHANNEL__6G_217_7035_20 = '6g-217-7035-20';
    public const RF_CHANNEL__6G_219_7045_40 = '6g-219-7045-40';
    public const RF_CHANNEL__6G_221_7055_20 = '6g-221-7055-20';
    public const RF_CHANNEL__6G_225_7075_20 = '6g-225-7075-20';
    public const RF_CHANNEL__6G_227_7085_40 = '6g-227-7085-40';
    public const RF_CHANNEL__6G_229_7095_20 = '6g-229-7095-20';
    public const RF_CHANNEL__6G_233_7115_20 = '6g-233-7115-20';
    public const RF_CHANNEL__60G_1_58320_2160 = '60g-1-58320-2160';
    public const RF_CHANNEL__60G_2_60480_2160 = '60g-2-60480-2160';
    public const RF_CHANNEL__60G_3_62640_2160 = '60g-3-62640-2160';
    public const RF_CHANNEL__60G_4_64800_2160 = '60g-4-64800-2160';
    public const RF_CHANNEL__60G_5_66960_2160 = '60g-5-66960-2160';
    public const RF_CHANNEL__60G_6_69120_2160 = '60g-6-69120-2160';
    public const RF_CHANNEL__60G_9_59400_4320 = '60g-9-59400-4320';
    public const RF_CHANNEL__60G_10_61560_4320 = '60g-10-61560-4320';
    public const RF_CHANNEL__60G_11_63720_4320 = '60g-11-63720-4320';
    public const RF_CHANNEL__60G_12_65880_4320 = '60g-12-65880-4320';
    public const RF_CHANNEL__60G_13_68040_4320 = '60g-13-68040-4320';
    public const RF_CHANNEL__60G_17_60480_6480 = '60g-17-60480-6480';
    public const RF_CHANNEL__60G_18_62640_6480 = '60g-18-62640-6480';
    public const RF_CHANNEL__60G_19_64800_6480 = '60g-19-64800-6480';
    public const RF_CHANNEL__60G_20_66960_6480 = '60g-20-66960-6480';
    public const RF_CHANNEL__60G_25_61560_6480 = '60g-25-61560-6480';
    public const RF_CHANNEL__60G_26_63720_6480 = '60g-26-63720-6480';
    public const RF_CHANNEL__60G_27_65880_6480 = '60g-27-65880-6480';
    public const RF_CHANNEL_EMPTY = '';
    public const POE_MODE_PD = 'pd';
    public const POE_MODE_PSE = 'pse';
    public const POE_MODE_EMPTY = '';
    public const POE_TYPE_TYPE1_IEEE802_3AF = 'type1-ieee802.3af';
    public const POE_TYPE_TYPE2_IEEE802_3AT = 'type2-ieee802.3at';
    public const POE_TYPE_TYPE3_IEEE802_3BT = 'type3-ieee802.3bt';
    public const POE_TYPE_TYPE4_IEEE802_3BT = 'type4-ieee802.3bt';
    public const POE_TYPE_PASSIVE_24V_2PAIR = 'passive-24v-2pair';
    public const POE_TYPE_PASSIVE_24V_4PAIR = 'passive-24v-4pair';
    public const POE_TYPE_PASSIVE_48V_2PAIR = 'passive-48v-2pair';
    public const POE_TYPE_PASSIVE_48V_4PAIR = 'passive-48v-4pair';
    public const POE_TYPE_EMPTY = '';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_VIRTUAL,
            self::TYPE_BRIDGE,
            self::TYPE_LAG,
            self::TYPE__100BASE_FX,
            self::TYPE__100BASE_LFX,
            self::TYPE__100BASE_TX,
            self::TYPE__100BASE_T1,
            self::TYPE__1000BASE_T,
            self::TYPE__1000BASE_TX,
            self::TYPE__2_5GBASE_T,
            self::TYPE__5GBASE_T,
            self::TYPE__10GBASE_T,
            self::TYPE__10GBASE_CX4,
            self::TYPE__1000BASE_X_GBIC,
            self::TYPE__1000BASE_X_SFP,
            self::TYPE__10GBASE_X_SFPP,
            self::TYPE__10GBASE_X_XFP,
            self::TYPE__10GBASE_X_XENPAK,
            self::TYPE__10GBASE_X_X2,
            self::TYPE__25GBASE_X_SFP28,
            self::TYPE__50GBASE_X_SFP56,
            self::TYPE__40GBASE_X_QSFPP,
            self::TYPE__50GBASE_X_SFP28,
            self::TYPE__100GBASE_X_CFP,
            self::TYPE__100GBASE_X_CFP2,
            self::TYPE__200GBASE_X_CFP2,
            self::TYPE__400GBASE_X_CFP2,
            self::TYPE__100GBASE_X_CFP4,
            self::TYPE__100GBASE_X_CXP,
            self::TYPE__100GBASE_X_CPAK,
            self::TYPE__100GBASE_X_DSFP,
            self::TYPE__100GBASE_X_SFPDD,
            self::TYPE__100GBASE_X_QSFP28,
            self::TYPE__100GBASE_X_QSFPDD,
            self::TYPE__200GBASE_X_QSFP56,
            self::TYPE__200GBASE_X_QSFPDD,
            self::TYPE__400GBASE_X_QSFP112,
            self::TYPE__400GBASE_X_QSFPDD,
            self::TYPE__400GBASE_X_OSFP,
            self::TYPE__400GBASE_X_OSFP_RHS,
            self::TYPE__400GBASE_X_CDFP,
            self::TYPE__400GBASE_X_CFP8,
            self::TYPE__800GBASE_X_QSFPDD,
            self::TYPE__800GBASE_X_OSFP,
            self::TYPE__1000BASE_KX,
            self::TYPE__2_5GBASE_KX,
            self::TYPE__5GBASE_KR,
            self::TYPE__10GBASE_KR,
            self::TYPE__10GBASE_KX4,
            self::TYPE__25GBASE_KR,
            self::TYPE__40GBASE_KR4,
            self::TYPE__50GBASE_KR,
            self::TYPE__100GBASE_KP4,
            self::TYPE__100GBASE_KR2,
            self::TYPE__100GBASE_KR4,
            self::TYPE_IEEE802_11A,
            self::TYPE_IEEE802_11G,
            self::TYPE_IEEE802_11N,
            self::TYPE_IEEE802_11AC,
            self::TYPE_IEEE802_11AD,
            self::TYPE_IEEE802_11AX,
            self::TYPE_IEEE802_11AY,
            self::TYPE_IEEE802_11BE,
            self::TYPE_IEEE802_15_1,
            self::TYPE_OTHER_WIRELESS,
            self::TYPE_GSM,
            self::TYPE_CDMA,
            self::TYPE_LTE,
            self::TYPE__4G,
            self::TYPE__5G,
            self::TYPE_SONET_OC3,
            self::TYPE_SONET_OC12,
            self::TYPE_SONET_OC48,
            self::TYPE_SONET_OC192,
            self::TYPE_SONET_OC768,
            self::TYPE_SONET_OC1920,
            self::TYPE_SONET_OC3840,
            self::TYPE__1GFC_SFP,
            self::TYPE__2GFC_SFP,
            self::TYPE__4GFC_SFP,
            self::TYPE__8GFC_SFPP,
            self::TYPE__16GFC_SFPP,
            self::TYPE__32GFC_SFP28,
            self::TYPE__32GFC_SFPP,
            self::TYPE__64GFC_QSFPP,
            self::TYPE__64GFC_SFPDD,
            self::TYPE__64GFC_SFPP,
            self::TYPE__128GFC_QSFP28,
            self::TYPE_INFINIBAND_SDR,
            self::TYPE_INFINIBAND_DDR,
            self::TYPE_INFINIBAND_QDR,
            self::TYPE_INFINIBAND_FDR10,
            self::TYPE_INFINIBAND_FDR,
            self::TYPE_INFINIBAND_EDR,
            self::TYPE_INFINIBAND_HDR,
            self::TYPE_INFINIBAND_NDR,
            self::TYPE_INFINIBAND_XDR,
            self::TYPE_T1,
            self::TYPE_E1,
            self::TYPE_T3,
            self::TYPE_E3,
            self::TYPE_XDSL,
            self::TYPE_DOCSIS,
            self::TYPE_BPON,
            self::TYPE_EPON,
            self::TYPE__10G_EPON,
            self::TYPE_GPON,
            self::TYPE_XG_PON,
            self::TYPE_XGS_PON,
            self::TYPE_NG_PON2,
            self::TYPE__25G_PON,
            self::TYPE__50G_PON,
            self::TYPE_CISCO_STACKWISE,
            self::TYPE_CISCO_STACKWISE_PLUS,
            self::TYPE_CISCO_FLEXSTACK,
            self::TYPE_CISCO_FLEXSTACK_PLUS,
            self::TYPE_CISCO_STACKWISE_80,
            self::TYPE_CISCO_STACKWISE_160,
            self::TYPE_CISCO_STACKWISE_320,
            self::TYPE_CISCO_STACKWISE_480,
            self::TYPE_CISCO_STACKWISE_1T,
            self::TYPE_JUNIPER_VCP,
            self::TYPE_EXTREME_SUMMITSTACK,
            self::TYPE_EXTREME_SUMMITSTACK_128,
            self::TYPE_EXTREME_SUMMITSTACK_256,
            self::TYPE_EXTREME_SUMMITSTACK_512,
            self::TYPE_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDuplexAllowableValues()
    {
        return [
            self::DUPLEX_HALF,
            self::DUPLEX_FULL,
            self::DUPLEX_AUTO,
            self::DUPLEX_EMPTY,
            self::DUPLEX_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_ACCESS,
            self::MODE_TAGGED,
            self::MODE_TAGGED_ALL,
            self::MODE_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRfRoleAllowableValues()
    {
        return [
            self::RF_ROLE_AP,
            self::RF_ROLE_STATION,
            self::RF_ROLE_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRfChannelAllowableValues()
    {
        return [
            self::RF_CHANNEL__2_4G_1_2412_22,
            self::RF_CHANNEL__2_4G_2_2417_22,
            self::RF_CHANNEL__2_4G_3_2422_22,
            self::RF_CHANNEL__2_4G_4_2427_22,
            self::RF_CHANNEL__2_4G_5_2432_22,
            self::RF_CHANNEL__2_4G_6_2437_22,
            self::RF_CHANNEL__2_4G_7_2442_22,
            self::RF_CHANNEL__2_4G_8_2447_22,
            self::RF_CHANNEL__2_4G_9_2452_22,
            self::RF_CHANNEL__2_4G_10_2457_22,
            self::RF_CHANNEL__2_4G_11_2462_22,
            self::RF_CHANNEL__2_4G_12_2467_22,
            self::RF_CHANNEL__2_4G_13_2472_22,
            self::RF_CHANNEL__5G_32_5160_20,
            self::RF_CHANNEL__5G_34_5170_40,
            self::RF_CHANNEL__5G_36_5180_20,
            self::RF_CHANNEL__5G_38_5190_40,
            self::RF_CHANNEL__5G_40_5200_20,
            self::RF_CHANNEL__5G_42_5210_80,
            self::RF_CHANNEL__5G_44_5220_20,
            self::RF_CHANNEL__5G_46_5230_40,
            self::RF_CHANNEL__5G_48_5240_20,
            self::RF_CHANNEL__5G_50_5250_160,
            self::RF_CHANNEL__5G_52_5260_20,
            self::RF_CHANNEL__5G_54_5270_40,
            self::RF_CHANNEL__5G_56_5280_20,
            self::RF_CHANNEL__5G_58_5290_80,
            self::RF_CHANNEL__5G_60_5300_20,
            self::RF_CHANNEL__5G_62_5310_40,
            self::RF_CHANNEL__5G_64_5320_20,
            self::RF_CHANNEL__5G_100_5500_20,
            self::RF_CHANNEL__5G_102_5510_40,
            self::RF_CHANNEL__5G_104_5520_20,
            self::RF_CHANNEL__5G_106_5530_80,
            self::RF_CHANNEL__5G_108_5540_20,
            self::RF_CHANNEL__5G_110_5550_40,
            self::RF_CHANNEL__5G_112_5560_20,
            self::RF_CHANNEL__5G_114_5570_160,
            self::RF_CHANNEL__5G_116_5580_20,
            self::RF_CHANNEL__5G_118_5590_40,
            self::RF_CHANNEL__5G_120_5600_20,
            self::RF_CHANNEL__5G_122_5610_80,
            self::RF_CHANNEL__5G_124_5620_20,
            self::RF_CHANNEL__5G_126_5630_40,
            self::RF_CHANNEL__5G_128_5640_20,
            self::RF_CHANNEL__5G_132_5660_20,
            self::RF_CHANNEL__5G_134_5670_40,
            self::RF_CHANNEL__5G_136_5680_20,
            self::RF_CHANNEL__5G_138_5690_80,
            self::RF_CHANNEL__5G_140_5700_20,
            self::RF_CHANNEL__5G_142_5710_40,
            self::RF_CHANNEL__5G_144_5720_20,
            self::RF_CHANNEL__5G_149_5745_20,
            self::RF_CHANNEL__5G_151_5755_40,
            self::RF_CHANNEL__5G_153_5765_20,
            self::RF_CHANNEL__5G_155_5775_80,
            self::RF_CHANNEL__5G_157_5785_20,
            self::RF_CHANNEL__5G_159_5795_40,
            self::RF_CHANNEL__5G_161_5805_20,
            self::RF_CHANNEL__5G_163_5815_160,
            self::RF_CHANNEL__5G_165_5825_20,
            self::RF_CHANNEL__5G_167_5835_40,
            self::RF_CHANNEL__5G_169_5845_20,
            self::RF_CHANNEL__5G_171_5855_80,
            self::RF_CHANNEL__5G_173_5865_20,
            self::RF_CHANNEL__5G_175_5875_40,
            self::RF_CHANNEL__5G_177_5885_20,
            self::RF_CHANNEL__6G_1_5955_20,
            self::RF_CHANNEL__6G_3_5965_40,
            self::RF_CHANNEL__6G_5_5975_20,
            self::RF_CHANNEL__6G_7_5985_80,
            self::RF_CHANNEL__6G_9_5995_20,
            self::RF_CHANNEL__6G_11_6005_40,
            self::RF_CHANNEL__6G_13_6015_20,
            self::RF_CHANNEL__6G_15_6025_160,
            self::RF_CHANNEL__6G_17_6035_20,
            self::RF_CHANNEL__6G_19_6045_40,
            self::RF_CHANNEL__6G_21_6055_20,
            self::RF_CHANNEL__6G_23_6065_80,
            self::RF_CHANNEL__6G_25_6075_20,
            self::RF_CHANNEL__6G_27_6085_40,
            self::RF_CHANNEL__6G_29_6095_20,
            self::RF_CHANNEL__6G_31_6105_320,
            self::RF_CHANNEL__6G_33_6115_20,
            self::RF_CHANNEL__6G_35_6125_40,
            self::RF_CHANNEL__6G_37_6135_20,
            self::RF_CHANNEL__6G_39_6145_80,
            self::RF_CHANNEL__6G_41_6155_20,
            self::RF_CHANNEL__6G_43_6165_40,
            self::RF_CHANNEL__6G_45_6175_20,
            self::RF_CHANNEL__6G_47_6185_160,
            self::RF_CHANNEL__6G_49_6195_20,
            self::RF_CHANNEL__6G_51_6205_40,
            self::RF_CHANNEL__6G_53_6215_20,
            self::RF_CHANNEL__6G_55_6225_80,
            self::RF_CHANNEL__6G_57_6235_20,
            self::RF_CHANNEL__6G_59_6245_40,
            self::RF_CHANNEL__6G_61_6255_20,
            self::RF_CHANNEL__6G_65_6275_20,
            self::RF_CHANNEL__6G_67_6285_40,
            self::RF_CHANNEL__6G_69_6295_20,
            self::RF_CHANNEL__6G_71_6305_80,
            self::RF_CHANNEL__6G_73_6315_20,
            self::RF_CHANNEL__6G_75_6325_40,
            self::RF_CHANNEL__6G_77_6335_20,
            self::RF_CHANNEL__6G_79_6345_160,
            self::RF_CHANNEL__6G_81_6355_20,
            self::RF_CHANNEL__6G_83_6365_40,
            self::RF_CHANNEL__6G_85_6375_20,
            self::RF_CHANNEL__6G_87_6385_80,
            self::RF_CHANNEL__6G_89_6395_20,
            self::RF_CHANNEL__6G_91_6405_40,
            self::RF_CHANNEL__6G_93_6415_20,
            self::RF_CHANNEL__6G_95_6425_320,
            self::RF_CHANNEL__6G_97_6435_20,
            self::RF_CHANNEL__6G_99_6445_40,
            self::RF_CHANNEL__6G_101_6455_20,
            self::RF_CHANNEL__6G_103_6465_80,
            self::RF_CHANNEL__6G_105_6475_20,
            self::RF_CHANNEL__6G_107_6485_40,
            self::RF_CHANNEL__6G_109_6495_20,
            self::RF_CHANNEL__6G_111_6505_160,
            self::RF_CHANNEL__6G_113_6515_20,
            self::RF_CHANNEL__6G_115_6525_40,
            self::RF_CHANNEL__6G_117_6535_20,
            self::RF_CHANNEL__6G_119_6545_80,
            self::RF_CHANNEL__6G_121_6555_20,
            self::RF_CHANNEL__6G_123_6565_40,
            self::RF_CHANNEL__6G_125_6575_20,
            self::RF_CHANNEL__6G_129_6595_20,
            self::RF_CHANNEL__6G_131_6605_40,
            self::RF_CHANNEL__6G_133_6615_20,
            self::RF_CHANNEL__6G_135_6625_80,
            self::RF_CHANNEL__6G_137_6635_20,
            self::RF_CHANNEL__6G_139_6645_40,
            self::RF_CHANNEL__6G_141_6655_20,
            self::RF_CHANNEL__6G_143_6665_160,
            self::RF_CHANNEL__6G_145_6675_20,
            self::RF_CHANNEL__6G_147_6685_40,
            self::RF_CHANNEL__6G_149_6695_20,
            self::RF_CHANNEL__6G_151_6705_80,
            self::RF_CHANNEL__6G_153_6715_20,
            self::RF_CHANNEL__6G_155_6725_40,
            self::RF_CHANNEL__6G_157_6735_20,
            self::RF_CHANNEL__6G_159_6745_320,
            self::RF_CHANNEL__6G_161_6755_20,
            self::RF_CHANNEL__6G_163_6765_40,
            self::RF_CHANNEL__6G_165_6775_20,
            self::RF_CHANNEL__6G_167_6785_80,
            self::RF_CHANNEL__6G_169_6795_20,
            self::RF_CHANNEL__6G_171_6805_40,
            self::RF_CHANNEL__6G_173_6815_20,
            self::RF_CHANNEL__6G_175_6825_160,
            self::RF_CHANNEL__6G_177_6835_20,
            self::RF_CHANNEL__6G_179_6845_40,
            self::RF_CHANNEL__6G_181_6855_20,
            self::RF_CHANNEL__6G_183_6865_80,
            self::RF_CHANNEL__6G_185_6875_20,
            self::RF_CHANNEL__6G_187_6885_40,
            self::RF_CHANNEL__6G_189_6895_20,
            self::RF_CHANNEL__6G_193_6915_20,
            self::RF_CHANNEL__6G_195_6925_40,
            self::RF_CHANNEL__6G_197_6935_20,
            self::RF_CHANNEL__6G_199_6945_80,
            self::RF_CHANNEL__6G_201_6955_20,
            self::RF_CHANNEL__6G_203_6965_40,
            self::RF_CHANNEL__6G_205_6975_20,
            self::RF_CHANNEL__6G_207_6985_160,
            self::RF_CHANNEL__6G_209_6995_20,
            self::RF_CHANNEL__6G_211_7005_40,
            self::RF_CHANNEL__6G_213_7015_20,
            self::RF_CHANNEL__6G_215_7025_80,
            self::RF_CHANNEL__6G_217_7035_20,
            self::RF_CHANNEL__6G_219_7045_40,
            self::RF_CHANNEL__6G_221_7055_20,
            self::RF_CHANNEL__6G_225_7075_20,
            self::RF_CHANNEL__6G_227_7085_40,
            self::RF_CHANNEL__6G_229_7095_20,
            self::RF_CHANNEL__6G_233_7115_20,
            self::RF_CHANNEL__60G_1_58320_2160,
            self::RF_CHANNEL__60G_2_60480_2160,
            self::RF_CHANNEL__60G_3_62640_2160,
            self::RF_CHANNEL__60G_4_64800_2160,
            self::RF_CHANNEL__60G_5_66960_2160,
            self::RF_CHANNEL__60G_6_69120_2160,
            self::RF_CHANNEL__60G_9_59400_4320,
            self::RF_CHANNEL__60G_10_61560_4320,
            self::RF_CHANNEL__60G_11_63720_4320,
            self::RF_CHANNEL__60G_12_65880_4320,
            self::RF_CHANNEL__60G_13_68040_4320,
            self::RF_CHANNEL__60G_17_60480_6480,
            self::RF_CHANNEL__60G_18_62640_6480,
            self::RF_CHANNEL__60G_19_64800_6480,
            self::RF_CHANNEL__60G_20_66960_6480,
            self::RF_CHANNEL__60G_25_61560_6480,
            self::RF_CHANNEL__60G_26_63720_6480,
            self::RF_CHANNEL__60G_27_65880_6480,
            self::RF_CHANNEL_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPoeModeAllowableValues()
    {
        return [
            self::POE_MODE_PD,
            self::POE_MODE_PSE,
            self::POE_MODE_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPoeTypeAllowableValues()
    {
        return [
            self::POE_TYPE_TYPE1_IEEE802_3AF,
            self::POE_TYPE_TYPE2_IEEE802_3AT,
            self::POE_TYPE_TYPE3_IEEE802_3BT,
            self::POE_TYPE_TYPE4_IEEE802_3BT,
            self::POE_TYPE_PASSIVE_24V_2PAIR,
            self::POE_TYPE_PASSIVE_24V_4PAIR,
            self::POE_TYPE_PASSIVE_48V_2PAIR,
            self::POE_TYPE_PASSIVE_48V_4PAIR,
            self::POE_TYPE_EMPTY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('device', $data ?? [], null);
        $this->setIfExists('vdcs', $data ?? [], null);
        $this->setIfExists('module', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('parent', $data ?? [], null);
        $this->setIfExists('bridge', $data ?? [], null);
        $this->setIfExists('lag', $data ?? [], null);
        $this->setIfExists('mtu', $data ?? [], null);
        $this->setIfExists('mac_address', $data ?? [], null);
        $this->setIfExists('speed', $data ?? [], null);
        $this->setIfExists('duplex', $data ?? [], null);
        $this->setIfExists('wwn', $data ?? [], null);
        $this->setIfExists('mgmt_only', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('rf_role', $data ?? [], null);
        $this->setIfExists('rf_channel', $data ?? [], null);
        $this->setIfExists('poe_mode', $data ?? [], null);
        $this->setIfExists('poe_type', $data ?? [], null);
        $this->setIfExists('rf_channel_frequency', $data ?? [], null);
        $this->setIfExists('rf_channel_width', $data ?? [], null);
        $this->setIfExists('tx_power', $data ?? [], null);
        $this->setIfExists('untagged_vlan', $data ?? [], null);
        $this->setIfExists('tagged_vlans', $data ?? [], null);
        $this->setIfExists('mark_connected', $data ?? [], null);
        $this->setIfExists('wireless_lans', $data ?? [], null);
        $this->setIfExists('vrf', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['device'] === null) {
            $invalidProperties[] = "'device' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 64)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['label']) && (mb_strlen($this->container['label']) > 64)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mtu']) && ($this->container['mtu'] > 65536)) {
            $invalidProperties[] = "invalid value for 'mtu', must be smaller than or equal to 65536.";
        }

        if (!is_null($this->container['mtu']) && ($this->container['mtu'] < 1)) {
            $invalidProperties[] = "invalid value for 'mtu', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['speed']) && ($this->container['speed'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'speed', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['speed']) && ($this->container['speed'] < 0)) {
            $invalidProperties[] = "invalid value for 'speed', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDuplexAllowableValues();
        if (!is_null($this->container['duplex']) && !in_array($this->container['duplex'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'duplex', must be one of '%s'",
                $this->container['duplex'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 200)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 200.";
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRfRoleAllowableValues();
        if (!is_null($this->container['rf_role']) && !in_array($this->container['rf_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rf_role', must be one of '%s'",
                $this->container['rf_role'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRfChannelAllowableValues();
        if (!is_null($this->container['rf_channel']) && !in_array($this->container['rf_channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rf_channel', must be one of '%s'",
                $this->container['rf_channel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPoeModeAllowableValues();
        if (!is_null($this->container['poe_mode']) && !in_array($this->container['poe_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'poe_mode', must be one of '%s'",
                $this->container['poe_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPoeTypeAllowableValues();
        if (!is_null($this->container['poe_type']) && !in_array($this->container['poe_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'poe_type', must be one of '%s'",
                $this->container['poe_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['rf_channel_frequency']) && ($this->container['rf_channel_frequency'] >= 100000)) {
            $invalidProperties[] = "invalid value for 'rf_channel_frequency', must be smaller than 100000.";
        }

        if (!is_null($this->container['rf_channel_frequency']) && ($this->container['rf_channel_frequency'] <= -100000)) {
            $invalidProperties[] = "invalid value for 'rf_channel_frequency', must be bigger than -100000.";
        }

        if (!is_null($this->container['rf_channel_width']) && ($this->container['rf_channel_width'] >= 10000)) {
            $invalidProperties[] = "invalid value for 'rf_channel_width', must be smaller than 10000.";
        }

        if (!is_null($this->container['rf_channel_width']) && ($this->container['rf_channel_width'] <= -10000)) {
            $invalidProperties[] = "invalid value for 'rf_channel_width', must be bigger than -10000.";
        }

        if (!is_null($this->container['tx_power']) && ($this->container['tx_power'] > 127)) {
            $invalidProperties[] = "invalid value for 'tx_power', must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['tx_power']) && ($this->container['tx_power'] < 0)) {
            $invalidProperties[] = "invalid value for 'tx_power', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets device
     *
     * @return \OpenAPI\Client\Model\BriefDeviceRequest
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param \OpenAPI\Client\Model\BriefDeviceRequest $device device
     *
     * @return self
     */
    public function setDevice($device)
    {
        if (is_null($device)) {
            throw new \InvalidArgumentException('non-nullable device cannot be null');
        }
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets vdcs
     *
     * @return int[]|null
     */
    public function getVdcs()
    {
        return $this->container['vdcs'];
    }

    /**
     * Sets vdcs
     *
     * @param int[]|null $vdcs vdcs
     *
     * @return self
     */
    public function setVdcs($vdcs)
    {
        if (is_null($vdcs)) {
            throw new \InvalidArgumentException('non-nullable vdcs cannot be null');
        }
        $this->container['vdcs'] = $vdcs;

        return $this;
    }

    /**
     * Gets module
     *
     * @return \OpenAPI\Client\Model\BriefModuleRequest|null
     */
    public function getModule()
    {
        return $this->container['module'];
    }

    /**
     * Sets module
     *
     * @param \OpenAPI\Client\Model\BriefModuleRequest|null $module module
     *
     * @return self
     */
    public function setModule($module)
    {
        if (is_null($module)) {
            array_push($this->openAPINullablesSetToNull, 'module');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('module', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['module'] = $module;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InterfaceRequest., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InterfaceRequest., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label Physical label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        if ((mb_strlen($label) > 64)) {
            throw new \InvalidArgumentException('invalid length for $label when calling InterfaceRequest., must be smaller than or equal to 64.');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type * `virtual` - Virtual * `bridge` - Bridge * `lag` - Link Aggregation Group (LAG) * `100base-fx` - 100BASE-FX (10/100ME FIBER) * `100base-lfx` - 100BASE-LFX (10/100ME FIBER) * `100base-tx` - 100BASE-TX (10/100ME) * `100base-t1` - 100BASE-T1 (10/100ME Single Pair) * `1000base-t` - 1000BASE-T (1GE) * `1000base-tx` - 1000BASE-TX (1GE) * `2.5gbase-t` - 2.5GBASE-T (2.5GE) * `5gbase-t` - 5GBASE-T (5GE) * `10gbase-t` - 10GBASE-T (10GE) * `10gbase-cx4` - 10GBASE-CX4 (10GE) * `1000base-x-gbic` - GBIC (1GE) * `1000base-x-sfp` - SFP (1GE) * `10gbase-x-sfpp` - SFP+ (10GE) * `10gbase-x-xfp` - XFP (10GE) * `10gbase-x-xenpak` - XENPAK (10GE) * `10gbase-x-x2` - X2 (10GE) * `25gbase-x-sfp28` - SFP28 (25GE) * `50gbase-x-sfp56` - SFP56 (50GE) * `40gbase-x-qsfpp` - QSFP+ (40GE) * `50gbase-x-sfp28` - QSFP28 (50GE) * `100gbase-x-cfp` - CFP (100GE) * `100gbase-x-cfp2` - CFP2 (100GE) * `200gbase-x-cfp2` - CFP2 (200GE) * `400gbase-x-cfp2` - CFP2 (400GE) * `100gbase-x-cfp4` - CFP4 (100GE) * `100gbase-x-cxp` - CXP (100GE) * `100gbase-x-cpak` - Cisco CPAK (100GE) * `100gbase-x-dsfp` - DSFP (100GE) * `100gbase-x-sfpdd` - SFP-DD (100GE) * `100gbase-x-qsfp28` - QSFP28 (100GE) * `100gbase-x-qsfpdd` - QSFP-DD (100GE) * `200gbase-x-qsfp56` - QSFP56 (200GE) * `200gbase-x-qsfpdd` - QSFP-DD (200GE) * `400gbase-x-qsfp112` - QSFP112 (400GE) * `400gbase-x-qsfpdd` - QSFP-DD (400GE) * `400gbase-x-osfp` - OSFP (400GE) * `400gbase-x-osfp-rhs` - OSFP-RHS (400GE) * `400gbase-x-cdfp` - CDFP (400GE) * `400gbase-x-cfp8` - CPF8 (400GE) * `800gbase-x-qsfpdd` - QSFP-DD (800GE) * `800gbase-x-osfp` - OSFP (800GE) * `1000base-kx` - 1000BASE-KX (1GE) * `2.5gbase-kx` - 2.5GBASE-KX (2.5GE) * `5gbase-kr` - 5GBASE-KR (5GE) * `10gbase-kr` - 10GBASE-KR (10GE) * `10gbase-kx4` - 10GBASE-KX4 (10GE) * `25gbase-kr` - 25GBASE-KR (25GE) * `40gbase-kr4` - 40GBASE-KR4 (40GE) * `50gbase-kr` - 50GBASE-KR (50GE) * `100gbase-kp4` - 100GBASE-KP4 (100GE) * `100gbase-kr2` - 100GBASE-KR2 (100GE) * `100gbase-kr4` - 100GBASE-KR4 (100GE) * `ieee802.11a` - IEEE 802.11a * `ieee802.11g` - IEEE 802.11b/g * `ieee802.11n` - IEEE 802.11n * `ieee802.11ac` - IEEE 802.11ac * `ieee802.11ad` - IEEE 802.11ad * `ieee802.11ax` - IEEE 802.11ax * `ieee802.11ay` - IEEE 802.11ay * `ieee802.11be` - IEEE 802.11be * `ieee802.15.1` - IEEE 802.15.1 (Bluetooth) * `other-wireless` - Other (Wireless) * `gsm` - GSM * `cdma` - CDMA * `lte` - LTE * `4g` - 4G * `5g` - 5G * `sonet-oc3` - OC-3/STM-1 * `sonet-oc12` - OC-12/STM-4 * `sonet-oc48` - OC-48/STM-16 * `sonet-oc192` - OC-192/STM-64 * `sonet-oc768` - OC-768/STM-256 * `sonet-oc1920` - OC-1920/STM-640 * `sonet-oc3840` - OC-3840/STM-1234 * `1gfc-sfp` - SFP (1GFC) * `2gfc-sfp` - SFP (2GFC) * `4gfc-sfp` - SFP (4GFC) * `8gfc-sfpp` - SFP+ (8GFC) * `16gfc-sfpp` - SFP+ (16GFC) * `32gfc-sfp28` - SFP28 (32GFC) * `32gfc-sfpp` - SFP+ (32GFC) * `64gfc-qsfpp` - QSFP+ (64GFC) * `64gfc-sfpdd` - SFP-DD (64GFC) * `64gfc-sfpp` - SFP+ (64GFC) * `128gfc-qsfp28` - QSFP28 (128GFC) * `infiniband-sdr` - SDR (2 Gbps) * `infiniband-ddr` - DDR (4 Gbps) * `infiniband-qdr` - QDR (8 Gbps) * `infiniband-fdr10` - FDR10 (10 Gbps) * `infiniband-fdr` - FDR (13.5 Gbps) * `infiniband-edr` - EDR (25 Gbps) * `infiniband-hdr` - HDR (50 Gbps) * `infiniband-ndr` - NDR (100 Gbps) * `infiniband-xdr` - XDR (250 Gbps) * `t1` - T1 (1.544 Mbps) * `e1` - E1 (2.048 Mbps) * `t3` - T3 (45 Mbps) * `e3` - E3 (34 Mbps) * `xdsl` - xDSL * `docsis` - DOCSIS * `bpon` - BPON (622 Mbps / 155 Mbps) * `epon` - EPON (1 Gbps) * `10g-epon` - 10G-EPON (10 Gbps) * `gpon` - GPON (2.5 Gbps / 1.25 Gbps) * `xg-pon` - XG-PON (10 Gbps / 2.5 Gbps) * `xgs-pon` - XGS-PON (10 Gbps) * `ng-pon2` - NG-PON2 (TWDM-PON) (4x10 Gbps) * `25g-pon` - 25G-PON (25 Gbps) * `50g-pon` - 50G-PON (50 Gbps) * `cisco-stackwise` - Cisco StackWise * `cisco-stackwise-plus` - Cisco StackWise Plus * `cisco-flexstack` - Cisco FlexStack * `cisco-flexstack-plus` - Cisco FlexStack Plus * `cisco-stackwise-80` - Cisco StackWise-80 * `cisco-stackwise-160` - Cisco StackWise-160 * `cisco-stackwise-320` - Cisco StackWise-320 * `cisco-stackwise-480` - Cisco StackWise-480 * `cisco-stackwise-1t` - Cisco StackWise-1T * `juniper-vcp` - Juniper VCP * `extreme-summitstack` - Extreme SummitStack * `extreme-summitstack-128` - Extreme SummitStack-128 * `extreme-summitstack-256` - Extreme SummitStack-256 * `extreme-summitstack-512` - Extreme SummitStack-512 * `other` - Other
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \OpenAPI\Client\Model\NestedInterfaceRequest|null
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \OpenAPI\Client\Model\NestedInterfaceRequest|null $parent parent
     *
     * @return self
     */
    public function setParent($parent)
    {
        if (is_null($parent)) {
            array_push($this->openAPINullablesSetToNull, 'parent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets bridge
     *
     * @return \OpenAPI\Client\Model\NestedInterfaceRequest|null
     */
    public function getBridge()
    {
        return $this->container['bridge'];
    }

    /**
     * Sets bridge
     *
     * @param \OpenAPI\Client\Model\NestedInterfaceRequest|null $bridge bridge
     *
     * @return self
     */
    public function setBridge($bridge)
    {
        if (is_null($bridge)) {
            array_push($this->openAPINullablesSetToNull, 'bridge');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bridge', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bridge'] = $bridge;

        return $this;
    }

    /**
     * Gets lag
     *
     * @return \OpenAPI\Client\Model\NestedInterfaceRequest|null
     */
    public function getLag()
    {
        return $this->container['lag'];
    }

    /**
     * Sets lag
     *
     * @param \OpenAPI\Client\Model\NestedInterfaceRequest|null $lag lag
     *
     * @return self
     */
    public function setLag($lag)
    {
        if (is_null($lag)) {
            array_push($this->openAPINullablesSetToNull, 'lag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lag'] = $lag;

        return $this;
    }

    /**
     * Gets mtu
     *
     * @return int|null
     */
    public function getMtu()
    {
        return $this->container['mtu'];
    }

    /**
     * Sets mtu
     *
     * @param int|null $mtu mtu
     *
     * @return self
     */
    public function setMtu($mtu)
    {
        if (is_null($mtu)) {
            array_push($this->openAPINullablesSetToNull, 'mtu');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mtu', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($mtu) && ($mtu > 65536)) {
            throw new \InvalidArgumentException('invalid value for $mtu when calling InterfaceRequest., must be smaller than or equal to 65536.');
        }
        if (!is_null($mtu) && ($mtu < 1)) {
            throw new \InvalidArgumentException('invalid value for $mtu when calling InterfaceRequest., must be bigger than or equal to 1.');
        }

        $this->container['mtu'] = $mtu;

        return $this;
    }

    /**
     * Gets mac_address
     *
     * @return string|null
     */
    public function getMacAddress()
    {
        return $this->container['mac_address'];
    }

    /**
     * Sets mac_address
     *
     * @param string|null $mac_address mac_address
     *
     * @return self
     */
    public function setMacAddress($mac_address)
    {
        if (is_null($mac_address)) {
            array_push($this->openAPINullablesSetToNull, 'mac_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mac_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mac_address'] = $mac_address;

        return $this;
    }

    /**
     * Gets speed
     *
     * @return int|null
     */
    public function getSpeed()
    {
        return $this->container['speed'];
    }

    /**
     * Sets speed
     *
     * @param int|null $speed speed
     *
     * @return self
     */
    public function setSpeed($speed)
    {
        if (is_null($speed)) {
            array_push($this->openAPINullablesSetToNull, 'speed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('speed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($speed) && ($speed > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $speed when calling InterfaceRequest., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($speed) && ($speed < 0)) {
            throw new \InvalidArgumentException('invalid value for $speed when calling InterfaceRequest., must be bigger than or equal to 0.');
        }

        $this->container['speed'] = $speed;

        return $this;
    }

    /**
     * Gets duplex
     *
     * @return string|null
     */
    public function getDuplex()
    {
        return $this->container['duplex'];
    }

    /**
     * Sets duplex
     *
     * @param string|null $duplex * `half` - Half * `full` - Full * `auto` - Auto
     *
     * @return self
     */
    public function setDuplex($duplex)
    {
        if (is_null($duplex)) {
            array_push($this->openAPINullablesSetToNull, 'duplex');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duplex', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDuplexAllowableValues();
        if (!is_null($duplex) && !in_array($duplex, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'duplex', must be one of '%s'",
                    $duplex,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['duplex'] = $duplex;

        return $this;
    }

    /**
     * Gets wwn
     *
     * @return string|null
     */
    public function getWwn()
    {
        return $this->container['wwn'];
    }

    /**
     * Sets wwn
     *
     * @param string|null $wwn wwn
     *
     * @return self
     */
    public function setWwn($wwn)
    {
        if (is_null($wwn)) {
            array_push($this->openAPINullablesSetToNull, 'wwn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wwn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['wwn'] = $wwn;

        return $this;
    }

    /**
     * Gets mgmt_only
     *
     * @return bool|null
     */
    public function getMgmtOnly()
    {
        return $this->container['mgmt_only'];
    }

    /**
     * Sets mgmt_only
     *
     * @param bool|null $mgmt_only This interface is used only for out-of-band management
     *
     * @return self
     */
    public function setMgmtOnly($mgmt_only)
    {
        if (is_null($mgmt_only)) {
            throw new \InvalidArgumentException('non-nullable mgmt_only cannot be null');
        }
        $this->container['mgmt_only'] = $mgmt_only;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 200)) {
            throw new \InvalidArgumentException('invalid length for $description when calling InterfaceRequest., must be smaller than or equal to 200.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode * `access` - Access * `tagged` - Tagged * `tagged-all` - Tagged (All)
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $allowedValues = $this->getModeAllowableValues();
        if (!in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets rf_role
     *
     * @return string|null
     */
    public function getRfRole()
    {
        return $this->container['rf_role'];
    }

    /**
     * Sets rf_role
     *
     * @param string|null $rf_role * `ap` - Access point * `station` - Station
     *
     * @return self
     */
    public function setRfRole($rf_role)
    {
        if (is_null($rf_role)) {
            throw new \InvalidArgumentException('non-nullable rf_role cannot be null');
        }
        $allowedValues = $this->getRfRoleAllowableValues();
        if (!in_array($rf_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rf_role', must be one of '%s'",
                    $rf_role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rf_role'] = $rf_role;

        return $this;
    }

    /**
     * Gets rf_channel
     *
     * @return string|null
     */
    public function getRfChannel()
    {
        return $this->container['rf_channel'];
    }

    /**
     * Sets rf_channel
     *
     * @param string|null $rf_channel * `2.4g-1-2412-22` - 1 (2412 MHz) * `2.4g-2-2417-22` - 2 (2417 MHz) * `2.4g-3-2422-22` - 3 (2422 MHz) * `2.4g-4-2427-22` - 4 (2427 MHz) * `2.4g-5-2432-22` - 5 (2432 MHz) * `2.4g-6-2437-22` - 6 (2437 MHz) * `2.4g-7-2442-22` - 7 (2442 MHz) * `2.4g-8-2447-22` - 8 (2447 MHz) * `2.4g-9-2452-22` - 9 (2452 MHz) * `2.4g-10-2457-22` - 10 (2457 MHz) * `2.4g-11-2462-22` - 11 (2462 MHz) * `2.4g-12-2467-22` - 12 (2467 MHz) * `2.4g-13-2472-22` - 13 (2472 MHz) * `5g-32-5160-20` - 32 (5160/20 MHz) * `5g-34-5170-40` - 34 (5170/40 MHz) * `5g-36-5180-20` - 36 (5180/20 MHz) * `5g-38-5190-40` - 38 (5190/40 MHz) * `5g-40-5200-20` - 40 (5200/20 MHz) * `5g-42-5210-80` - 42 (5210/80 MHz) * `5g-44-5220-20` - 44 (5220/20 MHz) * `5g-46-5230-40` - 46 (5230/40 MHz) * `5g-48-5240-20` - 48 (5240/20 MHz) * `5g-50-5250-160` - 50 (5250/160 MHz) * `5g-52-5260-20` - 52 (5260/20 MHz) * `5g-54-5270-40` - 54 (5270/40 MHz) * `5g-56-5280-20` - 56 (5280/20 MHz) * `5g-58-5290-80` - 58 (5290/80 MHz) * `5g-60-5300-20` - 60 (5300/20 MHz) * `5g-62-5310-40` - 62 (5310/40 MHz) * `5g-64-5320-20` - 64 (5320/20 MHz) * `5g-100-5500-20` - 100 (5500/20 MHz) * `5g-102-5510-40` - 102 (5510/40 MHz) * `5g-104-5520-20` - 104 (5520/20 MHz) * `5g-106-5530-80` - 106 (5530/80 MHz) * `5g-108-5540-20` - 108 (5540/20 MHz) * `5g-110-5550-40` - 110 (5550/40 MHz) * `5g-112-5560-20` - 112 (5560/20 MHz) * `5g-114-5570-160` - 114 (5570/160 MHz) * `5g-116-5580-20` - 116 (5580/20 MHz) * `5g-118-5590-40` - 118 (5590/40 MHz) * `5g-120-5600-20` - 120 (5600/20 MHz) * `5g-122-5610-80` - 122 (5610/80 MHz) * `5g-124-5620-20` - 124 (5620/20 MHz) * `5g-126-5630-40` - 126 (5630/40 MHz) * `5g-128-5640-20` - 128 (5640/20 MHz) * `5g-132-5660-20` - 132 (5660/20 MHz) * `5g-134-5670-40` - 134 (5670/40 MHz) * `5g-136-5680-20` - 136 (5680/20 MHz) * `5g-138-5690-80` - 138 (5690/80 MHz) * `5g-140-5700-20` - 140 (5700/20 MHz) * `5g-142-5710-40` - 142 (5710/40 MHz) * `5g-144-5720-20` - 144 (5720/20 MHz) * `5g-149-5745-20` - 149 (5745/20 MHz) * `5g-151-5755-40` - 151 (5755/40 MHz) * `5g-153-5765-20` - 153 (5765/20 MHz) * `5g-155-5775-80` - 155 (5775/80 MHz) * `5g-157-5785-20` - 157 (5785/20 MHz) * `5g-159-5795-40` - 159 (5795/40 MHz) * `5g-161-5805-20` - 161 (5805/20 MHz) * `5g-163-5815-160` - 163 (5815/160 MHz) * `5g-165-5825-20` - 165 (5825/20 MHz) * `5g-167-5835-40` - 167 (5835/40 MHz) * `5g-169-5845-20` - 169 (5845/20 MHz) * `5g-171-5855-80` - 171 (5855/80 MHz) * `5g-173-5865-20` - 173 (5865/20 MHz) * `5g-175-5875-40` - 175 (5875/40 MHz) * `5g-177-5885-20` - 177 (5885/20 MHz) * `6g-1-5955-20` - 1 (5955/20 MHz) * `6g-3-5965-40` - 3 (5965/40 MHz) * `6g-5-5975-20` - 5 (5975/20 MHz) * `6g-7-5985-80` - 7 (5985/80 MHz) * `6g-9-5995-20` - 9 (5995/20 MHz) * `6g-11-6005-40` - 11 (6005/40 MHz) * `6g-13-6015-20` - 13 (6015/20 MHz) * `6g-15-6025-160` - 15 (6025/160 MHz) * `6g-17-6035-20` - 17 (6035/20 MHz) * `6g-19-6045-40` - 19 (6045/40 MHz) * `6g-21-6055-20` - 21 (6055/20 MHz) * `6g-23-6065-80` - 23 (6065/80 MHz) * `6g-25-6075-20` - 25 (6075/20 MHz) * `6g-27-6085-40` - 27 (6085/40 MHz) * `6g-29-6095-20` - 29 (6095/20 MHz) * `6g-31-6105-320` - 31 (6105/320 MHz) * `6g-33-6115-20` - 33 (6115/20 MHz) * `6g-35-6125-40` - 35 (6125/40 MHz) * `6g-37-6135-20` - 37 (6135/20 MHz) * `6g-39-6145-80` - 39 (6145/80 MHz) * `6g-41-6155-20` - 41 (6155/20 MHz) * `6g-43-6165-40` - 43 (6165/40 MHz) * `6g-45-6175-20` - 45 (6175/20 MHz) * `6g-47-6185-160` - 47 (6185/160 MHz) * `6g-49-6195-20` - 49 (6195/20 MHz) * `6g-51-6205-40` - 51 (6205/40 MHz) * `6g-53-6215-20` - 53 (6215/20 MHz) * `6g-55-6225-80` - 55 (6225/80 MHz) * `6g-57-6235-20` - 57 (6235/20 MHz) * `6g-59-6245-40` - 59 (6245/40 MHz) * `6g-61-6255-20` - 61 (6255/20 MHz) * `6g-65-6275-20` - 65 (6275/20 MHz) * `6g-67-6285-40` - 67 (6285/40 MHz) * `6g-69-6295-20` - 69 (6295/20 MHz) * `6g-71-6305-80` - 71 (6305/80 MHz) * `6g-73-6315-20` - 73 (6315/20 MHz) * `6g-75-6325-40` - 75 (6325/40 MHz) * `6g-77-6335-20` - 77 (6335/20 MHz) * `6g-79-6345-160` - 79 (6345/160 MHz) * `6g-81-6355-20` - 81 (6355/20 MHz) * `6g-83-6365-40` - 83 (6365/40 MHz) * `6g-85-6375-20` - 85 (6375/20 MHz) * `6g-87-6385-80` - 87 (6385/80 MHz) * `6g-89-6395-20` - 89 (6395/20 MHz) * `6g-91-6405-40` - 91 (6405/40 MHz) * `6g-93-6415-20` - 93 (6415/20 MHz) * `6g-95-6425-320` - 95 (6425/320 MHz) * `6g-97-6435-20` - 97 (6435/20 MHz) * `6g-99-6445-40` - 99 (6445/40 MHz) * `6g-101-6455-20` - 101 (6455/20 MHz) * `6g-103-6465-80` - 103 (6465/80 MHz) * `6g-105-6475-20` - 105 (6475/20 MHz) * `6g-107-6485-40` - 107 (6485/40 MHz) * `6g-109-6495-20` - 109 (6495/20 MHz) * `6g-111-6505-160` - 111 (6505/160 MHz) * `6g-113-6515-20` - 113 (6515/20 MHz) * `6g-115-6525-40` - 115 (6525/40 MHz) * `6g-117-6535-20` - 117 (6535/20 MHz) * `6g-119-6545-80` - 119 (6545/80 MHz) * `6g-121-6555-20` - 121 (6555/20 MHz) * `6g-123-6565-40` - 123 (6565/40 MHz) * `6g-125-6575-20` - 125 (6575/20 MHz) * `6g-129-6595-20` - 129 (6595/20 MHz) * `6g-131-6605-40` - 131 (6605/40 MHz) * `6g-133-6615-20` - 133 (6615/20 MHz) * `6g-135-6625-80` - 135 (6625/80 MHz) * `6g-137-6635-20` - 137 (6635/20 MHz) * `6g-139-6645-40` - 139 (6645/40 MHz) * `6g-141-6655-20` - 141 (6655/20 MHz) * `6g-143-6665-160` - 143 (6665/160 MHz) * `6g-145-6675-20` - 145 (6675/20 MHz) * `6g-147-6685-40` - 147 (6685/40 MHz) * `6g-149-6695-20` - 149 (6695/20 MHz) * `6g-151-6705-80` - 151 (6705/80 MHz) * `6g-153-6715-20` - 153 (6715/20 MHz) * `6g-155-6725-40` - 155 (6725/40 MHz) * `6g-157-6735-20` - 157 (6735/20 MHz) * `6g-159-6745-320` - 159 (6745/320 MHz) * `6g-161-6755-20` - 161 (6755/20 MHz) * `6g-163-6765-40` - 163 (6765/40 MHz) * `6g-165-6775-20` - 165 (6775/20 MHz) * `6g-167-6785-80` - 167 (6785/80 MHz) * `6g-169-6795-20` - 169 (6795/20 MHz) * `6g-171-6805-40` - 171 (6805/40 MHz) * `6g-173-6815-20` - 173 (6815/20 MHz) * `6g-175-6825-160` - 175 (6825/160 MHz) * `6g-177-6835-20` - 177 (6835/20 MHz) * `6g-179-6845-40` - 179 (6845/40 MHz) * `6g-181-6855-20` - 181 (6855/20 MHz) * `6g-183-6865-80` - 183 (6865/80 MHz) * `6g-185-6875-20` - 185 (6875/20 MHz) * `6g-187-6885-40` - 187 (6885/40 MHz) * `6g-189-6895-20` - 189 (6895/20 MHz) * `6g-193-6915-20` - 193 (6915/20 MHz) * `6g-195-6925-40` - 195 (6925/40 MHz) * `6g-197-6935-20` - 197 (6935/20 MHz) * `6g-199-6945-80` - 199 (6945/80 MHz) * `6g-201-6955-20` - 201 (6955/20 MHz) * `6g-203-6965-40` - 203 (6965/40 MHz) * `6g-205-6975-20` - 205 (6975/20 MHz) * `6g-207-6985-160` - 207 (6985/160 MHz) * `6g-209-6995-20` - 209 (6995/20 MHz) * `6g-211-7005-40` - 211 (7005/40 MHz) * `6g-213-7015-20` - 213 (7015/20 MHz) * `6g-215-7025-80` - 215 (7025/80 MHz) * `6g-217-7035-20` - 217 (7035/20 MHz) * `6g-219-7045-40` - 219 (7045/40 MHz) * `6g-221-7055-20` - 221 (7055/20 MHz) * `6g-225-7075-20` - 225 (7075/20 MHz) * `6g-227-7085-40` - 227 (7085/40 MHz) * `6g-229-7095-20` - 229 (7095/20 MHz) * `6g-233-7115-20` - 233 (7115/20 MHz) * `60g-1-58320-2160` - 1 (58.32/2.16 GHz) * `60g-2-60480-2160` - 2 (60.48/2.16 GHz) * `60g-3-62640-2160` - 3 (62.64/2.16 GHz) * `60g-4-64800-2160` - 4 (64.80/2.16 GHz) * `60g-5-66960-2160` - 5 (66.96/2.16 GHz) * `60g-6-69120-2160` - 6 (69.12/2.16 GHz) * `60g-9-59400-4320` - 9 (59.40/4.32 GHz) * `60g-10-61560-4320` - 10 (61.56/4.32 GHz) * `60g-11-63720-4320` - 11 (63.72/4.32 GHz) * `60g-12-65880-4320` - 12 (65.88/4.32 GHz) * `60g-13-68040-4320` - 13 (68.04/4.32 GHz) * `60g-17-60480-6480` - 17 (60.48/6.48 GHz) * `60g-18-62640-6480` - 18 (62.64/6.48 GHz) * `60g-19-64800-6480` - 19 (64.80/6.48 GHz) * `60g-20-66960-6480` - 20 (66.96/6.48 GHz) * `60g-25-61560-6480` - 25 (61.56/8.64 GHz) * `60g-26-63720-6480` - 26 (63.72/8.64 GHz) * `60g-27-65880-6480` - 27 (65.88/8.64 GHz)
     *
     * @return self
     */
    public function setRfChannel($rf_channel)
    {
        if (is_null($rf_channel)) {
            throw new \InvalidArgumentException('non-nullable rf_channel cannot be null');
        }
        $allowedValues = $this->getRfChannelAllowableValues();
        if (!in_array($rf_channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rf_channel', must be one of '%s'",
                    $rf_channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rf_channel'] = $rf_channel;

        return $this;
    }

    /**
     * Gets poe_mode
     *
     * @return string|null
     */
    public function getPoeMode()
    {
        return $this->container['poe_mode'];
    }

    /**
     * Sets poe_mode
     *
     * @param string|null $poe_mode * `pd` - PD * `pse` - PSE
     *
     * @return self
     */
    public function setPoeMode($poe_mode)
    {
        if (is_null($poe_mode)) {
            throw new \InvalidArgumentException('non-nullable poe_mode cannot be null');
        }
        $allowedValues = $this->getPoeModeAllowableValues();
        if (!in_array($poe_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'poe_mode', must be one of '%s'",
                    $poe_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['poe_mode'] = $poe_mode;

        return $this;
    }

    /**
     * Gets poe_type
     *
     * @return string|null
     */
    public function getPoeType()
    {
        return $this->container['poe_type'];
    }

    /**
     * Sets poe_type
     *
     * @param string|null $poe_type * `type1-ieee802.3af` - 802.3af (Type 1) * `type2-ieee802.3at` - 802.3at (Type 2) * `type3-ieee802.3bt` - 802.3bt (Type 3) * `type4-ieee802.3bt` - 802.3bt (Type 4) * `passive-24v-2pair` - Passive 24V (2-pair) * `passive-24v-4pair` - Passive 24V (4-pair) * `passive-48v-2pair` - Passive 48V (2-pair) * `passive-48v-4pair` - Passive 48V (4-pair)
     *
     * @return self
     */
    public function setPoeType($poe_type)
    {
        if (is_null($poe_type)) {
            throw new \InvalidArgumentException('non-nullable poe_type cannot be null');
        }
        $allowedValues = $this->getPoeTypeAllowableValues();
        if (!in_array($poe_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'poe_type', must be one of '%s'",
                    $poe_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['poe_type'] = $poe_type;

        return $this;
    }

    /**
     * Gets rf_channel_frequency
     *
     * @return float|null
     */
    public function getRfChannelFrequency()
    {
        return $this->container['rf_channel_frequency'];
    }

    /**
     * Sets rf_channel_frequency
     *
     * @param float|null $rf_channel_frequency Populated by selected channel (if set)
     *
     * @return self
     */
    public function setRfChannelFrequency($rf_channel_frequency)
    {
        if (is_null($rf_channel_frequency)) {
            array_push($this->openAPINullablesSetToNull, 'rf_channel_frequency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rf_channel_frequency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($rf_channel_frequency) && ($rf_channel_frequency >= 100000)) {
            throw new \InvalidArgumentException('invalid value for $rf_channel_frequency when calling InterfaceRequest., must be smaller than 100000.');
        }
        if (!is_null($rf_channel_frequency) && ($rf_channel_frequency <= -100000)) {
            throw new \InvalidArgumentException('invalid value for $rf_channel_frequency when calling InterfaceRequest., must be bigger than -100000.');
        }

        $this->container['rf_channel_frequency'] = $rf_channel_frequency;

        return $this;
    }

    /**
     * Gets rf_channel_width
     *
     * @return float|null
     */
    public function getRfChannelWidth()
    {
        return $this->container['rf_channel_width'];
    }

    /**
     * Sets rf_channel_width
     *
     * @param float|null $rf_channel_width Populated by selected channel (if set)
     *
     * @return self
     */
    public function setRfChannelWidth($rf_channel_width)
    {
        if (is_null($rf_channel_width)) {
            array_push($this->openAPINullablesSetToNull, 'rf_channel_width');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rf_channel_width', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($rf_channel_width) && ($rf_channel_width >= 10000)) {
            throw new \InvalidArgumentException('invalid value for $rf_channel_width when calling InterfaceRequest., must be smaller than 10000.');
        }
        if (!is_null($rf_channel_width) && ($rf_channel_width <= -10000)) {
            throw new \InvalidArgumentException('invalid value for $rf_channel_width when calling InterfaceRequest., must be bigger than -10000.');
        }

        $this->container['rf_channel_width'] = $rf_channel_width;

        return $this;
    }

    /**
     * Gets tx_power
     *
     * @return int|null
     */
    public function getTxPower()
    {
        return $this->container['tx_power'];
    }

    /**
     * Sets tx_power
     *
     * @param int|null $tx_power tx_power
     *
     * @return self
     */
    public function setTxPower($tx_power)
    {
        if (is_null($tx_power)) {
            array_push($this->openAPINullablesSetToNull, 'tx_power');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tx_power', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($tx_power) && ($tx_power > 127)) {
            throw new \InvalidArgumentException('invalid value for $tx_power when calling InterfaceRequest., must be smaller than or equal to 127.');
        }
        if (!is_null($tx_power) && ($tx_power < 0)) {
            throw new \InvalidArgumentException('invalid value for $tx_power when calling InterfaceRequest., must be bigger than or equal to 0.');
        }

        $this->container['tx_power'] = $tx_power;

        return $this;
    }

    /**
     * Gets untagged_vlan
     *
     * @return \OpenAPI\Client\Model\BriefVLANRequest|null
     */
    public function getUntaggedVlan()
    {
        return $this->container['untagged_vlan'];
    }

    /**
     * Sets untagged_vlan
     *
     * @param \OpenAPI\Client\Model\BriefVLANRequest|null $untagged_vlan untagged_vlan
     *
     * @return self
     */
    public function setUntaggedVlan($untagged_vlan)
    {
        if (is_null($untagged_vlan)) {
            array_push($this->openAPINullablesSetToNull, 'untagged_vlan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('untagged_vlan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['untagged_vlan'] = $untagged_vlan;

        return $this;
    }

    /**
     * Gets tagged_vlans
     *
     * @return int[]|null
     */
    public function getTaggedVlans()
    {
        return $this->container['tagged_vlans'];
    }

    /**
     * Sets tagged_vlans
     *
     * @param int[]|null $tagged_vlans tagged_vlans
     *
     * @return self
     */
    public function setTaggedVlans($tagged_vlans)
    {
        if (is_null($tagged_vlans)) {
            throw new \InvalidArgumentException('non-nullable tagged_vlans cannot be null');
        }
        $this->container['tagged_vlans'] = $tagged_vlans;

        return $this;
    }

    /**
     * Gets mark_connected
     *
     * @return bool|null
     */
    public function getMarkConnected()
    {
        return $this->container['mark_connected'];
    }

    /**
     * Sets mark_connected
     *
     * @param bool|null $mark_connected Treat as if a cable is connected
     *
     * @return self
     */
    public function setMarkConnected($mark_connected)
    {
        if (is_null($mark_connected)) {
            throw new \InvalidArgumentException('non-nullable mark_connected cannot be null');
        }
        $this->container['mark_connected'] = $mark_connected;

        return $this;
    }

    /**
     * Gets wireless_lans
     *
     * @return int[]|null
     */
    public function getWirelessLans()
    {
        return $this->container['wireless_lans'];
    }

    /**
     * Sets wireless_lans
     *
     * @param int[]|null $wireless_lans wireless_lans
     *
     * @return self
     */
    public function setWirelessLans($wireless_lans)
    {
        if (is_null($wireless_lans)) {
            throw new \InvalidArgumentException('non-nullable wireless_lans cannot be null');
        }
        $this->container['wireless_lans'] = $wireless_lans;

        return $this;
    }

    /**
     * Gets vrf
     *
     * @return \OpenAPI\Client\Model\BriefVRFRequest|null
     */
    public function getVrf()
    {
        return $this->container['vrf'];
    }

    /**
     * Sets vrf
     *
     * @param \OpenAPI\Client\Model\BriefVRFRequest|null $vrf vrf
     *
     * @return self
     */
    public function setVrf($vrf)
    {
        if (is_null($vrf)) {
            array_push($this->openAPINullablesSetToNull, 'vrf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vrf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vrf'] = $vrf;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\NestedTagRequest[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\NestedTagRequest[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return array<string,mixed>|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param array<string,mixed>|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


