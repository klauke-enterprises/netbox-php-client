<?php
/**
 * RackType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1.1 (4.1)
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RackType Class Doc Comment
 *
 * @category Class
 * @description Adds support for custom fields and tags.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RackType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RackType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'url' => 'string',
        'display_url' => 'string',
        'display' => 'string',
        'manufacturer' => '\OpenAPI\Client\Model\BriefManufacturer',
        'model' => 'string',
        'slug' => 'string',
        'description' => 'string',
        'form_factor' => '\OpenAPI\Client\Model\RackFormFactor',
        'width' => '\OpenAPI\Client\Model\RackWidth',
        'u_height' => 'int',
        'starting_unit' => 'int',
        'desc_units' => 'bool',
        'outer_width' => 'int',
        'outer_depth' => 'int',
        'outer_unit' => '\OpenAPI\Client\Model\RackOuterUnit',
        'weight' => 'float',
        'max_weight' => 'int',
        'weight_unit' => '\OpenAPI\Client\Model\DeviceTypeWeightUnit',
        'mounting_depth' => 'int',
        'comments' => 'string',
        'tags' => '\OpenAPI\Client\Model\NestedTag[]',
        'custom_fields' => 'array<string,mixed>',
        'created' => '\DateTime',
        'last_updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'url' => 'uri',
        'display_url' => 'uri',
        'display' => null,
        'manufacturer' => null,
        'model' => null,
        'slug' => null,
        'description' => null,
        'form_factor' => null,
        'width' => null,
        'u_height' => null,
        'starting_unit' => null,
        'desc_units' => null,
        'outer_width' => null,
        'outer_depth' => null,
        'outer_unit' => null,
        'weight' => 'double',
        'max_weight' => null,
        'weight_unit' => null,
        'mounting_depth' => null,
        'comments' => null,
        'tags' => null,
        'custom_fields' => null,
        'created' => 'date-time',
        'last_updated' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'url' => false,
        'display_url' => false,
        'display' => false,
        'manufacturer' => false,
        'model' => false,
        'slug' => false,
        'description' => false,
        'form_factor' => true,
        'width' => false,
        'u_height' => false,
        'starting_unit' => false,
        'desc_units' => false,
        'outer_width' => true,
        'outer_depth' => true,
        'outer_unit' => true,
        'weight' => true,
        'max_weight' => true,
        'weight_unit' => true,
        'mounting_depth' => true,
        'comments' => false,
        'tags' => false,
        'custom_fields' => false,
        'created' => true,
        'last_updated' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'url' => 'url',
        'display_url' => 'display_url',
        'display' => 'display',
        'manufacturer' => 'manufacturer',
        'model' => 'model',
        'slug' => 'slug',
        'description' => 'description',
        'form_factor' => 'form_factor',
        'width' => 'width',
        'u_height' => 'u_height',
        'starting_unit' => 'starting_unit',
        'desc_units' => 'desc_units',
        'outer_width' => 'outer_width',
        'outer_depth' => 'outer_depth',
        'outer_unit' => 'outer_unit',
        'weight' => 'weight',
        'max_weight' => 'max_weight',
        'weight_unit' => 'weight_unit',
        'mounting_depth' => 'mounting_depth',
        'comments' => 'comments',
        'tags' => 'tags',
        'custom_fields' => 'custom_fields',
        'created' => 'created',
        'last_updated' => 'last_updated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'url' => 'setUrl',
        'display_url' => 'setDisplayUrl',
        'display' => 'setDisplay',
        'manufacturer' => 'setManufacturer',
        'model' => 'setModel',
        'slug' => 'setSlug',
        'description' => 'setDescription',
        'form_factor' => 'setFormFactor',
        'width' => 'setWidth',
        'u_height' => 'setUHeight',
        'starting_unit' => 'setStartingUnit',
        'desc_units' => 'setDescUnits',
        'outer_width' => 'setOuterWidth',
        'outer_depth' => 'setOuterDepth',
        'outer_unit' => 'setOuterUnit',
        'weight' => 'setWeight',
        'max_weight' => 'setMaxWeight',
        'weight_unit' => 'setWeightUnit',
        'mounting_depth' => 'setMountingDepth',
        'comments' => 'setComments',
        'tags' => 'setTags',
        'custom_fields' => 'setCustomFields',
        'created' => 'setCreated',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'url' => 'getUrl',
        'display_url' => 'getDisplayUrl',
        'display' => 'getDisplay',
        'manufacturer' => 'getManufacturer',
        'model' => 'getModel',
        'slug' => 'getSlug',
        'description' => 'getDescription',
        'form_factor' => 'getFormFactor',
        'width' => 'getWidth',
        'u_height' => 'getUHeight',
        'starting_unit' => 'getStartingUnit',
        'desc_units' => 'getDescUnits',
        'outer_width' => 'getOuterWidth',
        'outer_depth' => 'getOuterDepth',
        'outer_unit' => 'getOuterUnit',
        'weight' => 'getWeight',
        'max_weight' => 'getMaxWeight',
        'weight_unit' => 'getWeightUnit',
        'mounting_depth' => 'getMountingDepth',
        'comments' => 'getComments',
        'tags' => 'getTags',
        'custom_fields' => 'getCustomFields',
        'created' => 'getCreated',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('display_url', $data ?? [], null);
        $this->setIfExists('display', $data ?? [], null);
        $this->setIfExists('manufacturer', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('slug', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('form_factor', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('u_height', $data ?? [], null);
        $this->setIfExists('starting_unit', $data ?? [], null);
        $this->setIfExists('desc_units', $data ?? [], null);
        $this->setIfExists('outer_width', $data ?? [], null);
        $this->setIfExists('outer_depth', $data ?? [], null);
        $this->setIfExists('outer_unit', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('max_weight', $data ?? [], null);
        $this->setIfExists('weight_unit', $data ?? [], null);
        $this->setIfExists('mounting_depth', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['display_url'] === null) {
            $invalidProperties[] = "'display_url' can't be null";
        }
        if ($this->container['display'] === null) {
            $invalidProperties[] = "'display' can't be null";
        }
        if ($this->container['manufacturer'] === null) {
            $invalidProperties[] = "'manufacturer' can't be null";
        }
        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        if ((mb_strlen($this->container['model']) > 100)) {
            $invalidProperties[] = "invalid value for 'model', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['slug'] === null) {
            $invalidProperties[] = "'slug' can't be null";
        }
        if ((mb_strlen($this->container['slug']) > 100)) {
            $invalidProperties[] = "invalid value for 'slug', the character length must be smaller than or equal to 100.";
        }

        if (!preg_match("/^[-a-zA-Z0-9_]+$/", $this->container['slug'])) {
            $invalidProperties[] = "invalid value for 'slug', must be conform to the pattern /^[-a-zA-Z0-9_]+$/.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 200)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['u_height']) && ($this->container['u_height'] > 100)) {
            $invalidProperties[] = "invalid value for 'u_height', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['u_height']) && ($this->container['u_height'] < 1)) {
            $invalidProperties[] = "invalid value for 'u_height', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['starting_unit']) && ($this->container['starting_unit'] > 32767)) {
            $invalidProperties[] = "invalid value for 'starting_unit', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['starting_unit']) && ($this->container['starting_unit'] < 1)) {
            $invalidProperties[] = "invalid value for 'starting_unit', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['outer_width']) && ($this->container['outer_width'] > 32767)) {
            $invalidProperties[] = "invalid value for 'outer_width', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['outer_width']) && ($this->container['outer_width'] < 0)) {
            $invalidProperties[] = "invalid value for 'outer_width', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['outer_depth']) && ($this->container['outer_depth'] > 32767)) {
            $invalidProperties[] = "invalid value for 'outer_depth', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['outer_depth']) && ($this->container['outer_depth'] < 0)) {
            $invalidProperties[] = "invalid value for 'outer_depth', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] >= 1000000)) {
            $invalidProperties[] = "invalid value for 'weight', must be smaller than 1000000.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] <= -1000000)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than -1000000.";
        }

        if (!is_null($this->container['max_weight']) && ($this->container['max_weight'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'max_weight', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['max_weight']) && ($this->container['max_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mounting_depth']) && ($this->container['mounting_depth'] > 32767)) {
            $invalidProperties[] = "invalid value for 'mounting_depth', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['mounting_depth']) && ($this->container['mounting_depth'] < 0)) {
            $invalidProperties[] = "invalid value for 'mounting_depth', must be bigger than or equal to 0.";
        }

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['last_updated'] === null) {
            $invalidProperties[] = "'last_updated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets display_url
     *
     * @return string
     */
    public function getDisplayUrl()
    {
        return $this->container['display_url'];
    }

    /**
     * Sets display_url
     *
     * @param string $display_url display_url
     *
     * @return self
     */
    public function setDisplayUrl($display_url)
    {
        if (is_null($display_url)) {
            throw new \InvalidArgumentException('non-nullable display_url cannot be null');
        }
        $this->container['display_url'] = $display_url;

        return $this;
    }

    /**
     * Gets display
     *
     * @return string
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param string $display display
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (is_null($display)) {
            throw new \InvalidArgumentException('non-nullable display cannot be null');
        }
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return \OpenAPI\Client\Model\BriefManufacturer
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param \OpenAPI\Client\Model\BriefManufacturer $manufacturer manufacturer
     *
     * @return self
     */
    public function setManufacturer($manufacturer)
    {
        if (is_null($manufacturer)) {
            throw new \InvalidArgumentException('non-nullable manufacturer cannot be null');
        }
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        if ((mb_strlen($model) > 100)) {
            throw new \InvalidArgumentException('invalid length for $model when calling RackType., must be smaller than or equal to 100.');
        }

        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug slug
     *
     * @return self
     */
    public function setSlug($slug)
    {
        if (is_null($slug)) {
            throw new \InvalidArgumentException('non-nullable slug cannot be null');
        }
        if ((mb_strlen($slug) > 100)) {
            throw new \InvalidArgumentException('invalid length for $slug when calling RackType., must be smaller than or equal to 100.');
        }
        if ((!preg_match("/^[-a-zA-Z0-9_]+$/", ObjectSerializer::toString($slug)))) {
            throw new \InvalidArgumentException("invalid value for \$slug when calling RackType., must conform to the pattern /^[-a-zA-Z0-9_]+$/.");
        }

        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 200)) {
            throw new \InvalidArgumentException('invalid length for $description when calling RackType., must be smaller than or equal to 200.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets form_factor
     *
     * @return \OpenAPI\Client\Model\RackFormFactor|null
     */
    public function getFormFactor()
    {
        return $this->container['form_factor'];
    }

    /**
     * Sets form_factor
     *
     * @param \OpenAPI\Client\Model\RackFormFactor|null $form_factor form_factor
     *
     * @return self
     */
    public function setFormFactor($form_factor)
    {
        if (is_null($form_factor)) {
            array_push($this->openAPINullablesSetToNull, 'form_factor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_factor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_factor'] = $form_factor;

        return $this;
    }

    /**
     * Gets width
     *
     * @return \OpenAPI\Client\Model\RackWidth|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param \OpenAPI\Client\Model\RackWidth|null $width width
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets u_height
     *
     * @return int|null
     */
    public function getUHeight()
    {
        return $this->container['u_height'];
    }

    /**
     * Sets u_height
     *
     * @param int|null $u_height Height in rack units
     *
     * @return self
     */
    public function setUHeight($u_height)
    {
        if (is_null($u_height)) {
            throw new \InvalidArgumentException('non-nullable u_height cannot be null');
        }

        if (($u_height > 100)) {
            throw new \InvalidArgumentException('invalid value for $u_height when calling RackType., must be smaller than or equal to 100.');
        }
        if (($u_height < 1)) {
            throw new \InvalidArgumentException('invalid value for $u_height when calling RackType., must be bigger than or equal to 1.');
        }

        $this->container['u_height'] = $u_height;

        return $this;
    }

    /**
     * Gets starting_unit
     *
     * @return int|null
     */
    public function getStartingUnit()
    {
        return $this->container['starting_unit'];
    }

    /**
     * Sets starting_unit
     *
     * @param int|null $starting_unit Starting unit for rack
     *
     * @return self
     */
    public function setStartingUnit($starting_unit)
    {
        if (is_null($starting_unit)) {
            throw new \InvalidArgumentException('non-nullable starting_unit cannot be null');
        }

        if (($starting_unit > 32767)) {
            throw new \InvalidArgumentException('invalid value for $starting_unit when calling RackType., must be smaller than or equal to 32767.');
        }
        if (($starting_unit < 1)) {
            throw new \InvalidArgumentException('invalid value for $starting_unit when calling RackType., must be bigger than or equal to 1.');
        }

        $this->container['starting_unit'] = $starting_unit;

        return $this;
    }

    /**
     * Gets desc_units
     *
     * @return bool|null
     */
    public function getDescUnits()
    {
        return $this->container['desc_units'];
    }

    /**
     * Sets desc_units
     *
     * @param bool|null $desc_units Units are numbered top-to-bottom
     *
     * @return self
     */
    public function setDescUnits($desc_units)
    {
        if (is_null($desc_units)) {
            throw new \InvalidArgumentException('non-nullable desc_units cannot be null');
        }
        $this->container['desc_units'] = $desc_units;

        return $this;
    }

    /**
     * Gets outer_width
     *
     * @return int|null
     */
    public function getOuterWidth()
    {
        return $this->container['outer_width'];
    }

    /**
     * Sets outer_width
     *
     * @param int|null $outer_width Outer dimension of rack (width)
     *
     * @return self
     */
    public function setOuterWidth($outer_width)
    {
        if (is_null($outer_width)) {
            array_push($this->openAPINullablesSetToNull, 'outer_width');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outer_width', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($outer_width) && ($outer_width > 32767)) {
            throw new \InvalidArgumentException('invalid value for $outer_width when calling RackType., must be smaller than or equal to 32767.');
        }
        if (!is_null($outer_width) && ($outer_width < 0)) {
            throw new \InvalidArgumentException('invalid value for $outer_width when calling RackType., must be bigger than or equal to 0.');
        }

        $this->container['outer_width'] = $outer_width;

        return $this;
    }

    /**
     * Gets outer_depth
     *
     * @return int|null
     */
    public function getOuterDepth()
    {
        return $this->container['outer_depth'];
    }

    /**
     * Sets outer_depth
     *
     * @param int|null $outer_depth Outer dimension of rack (depth)
     *
     * @return self
     */
    public function setOuterDepth($outer_depth)
    {
        if (is_null($outer_depth)) {
            array_push($this->openAPINullablesSetToNull, 'outer_depth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outer_depth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($outer_depth) && ($outer_depth > 32767)) {
            throw new \InvalidArgumentException('invalid value for $outer_depth when calling RackType., must be smaller than or equal to 32767.');
        }
        if (!is_null($outer_depth) && ($outer_depth < 0)) {
            throw new \InvalidArgumentException('invalid value for $outer_depth when calling RackType., must be bigger than or equal to 0.');
        }

        $this->container['outer_depth'] = $outer_depth;

        return $this;
    }

    /**
     * Gets outer_unit
     *
     * @return \OpenAPI\Client\Model\RackOuterUnit|null
     */
    public function getOuterUnit()
    {
        return $this->container['outer_unit'];
    }

    /**
     * Sets outer_unit
     *
     * @param \OpenAPI\Client\Model\RackOuterUnit|null $outer_unit outer_unit
     *
     * @return self
     */
    public function setOuterUnit($outer_unit)
    {
        if (is_null($outer_unit)) {
            array_push($this->openAPINullablesSetToNull, 'outer_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outer_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['outer_unit'] = $outer_unit;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            array_push($this->openAPINullablesSetToNull, 'weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($weight) && ($weight >= 1000000)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling RackType., must be smaller than 1000000.');
        }
        if (!is_null($weight) && ($weight <= -1000000)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling RackType., must be bigger than -1000000.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets max_weight
     *
     * @return int|null
     */
    public function getMaxWeight()
    {
        return $this->container['max_weight'];
    }

    /**
     * Sets max_weight
     *
     * @param int|null $max_weight Maximum load capacity for the rack
     *
     * @return self
     */
    public function setMaxWeight($max_weight)
    {
        if (is_null($max_weight)) {
            array_push($this->openAPINullablesSetToNull, 'max_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($max_weight) && ($max_weight > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $max_weight when calling RackType., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($max_weight) && ($max_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_weight when calling RackType., must be bigger than or equal to 0.');
        }

        $this->container['max_weight'] = $max_weight;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return \OpenAPI\Client\Model\DeviceTypeWeightUnit|null
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param \OpenAPI\Client\Model\DeviceTypeWeightUnit|null $weight_unit weight_unit
     *
     * @return self
     */
    public function setWeightUnit($weight_unit)
    {
        if (is_null($weight_unit)) {
            array_push($this->openAPINullablesSetToNull, 'weight_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets mounting_depth
     *
     * @return int|null
     */
    public function getMountingDepth()
    {
        return $this->container['mounting_depth'];
    }

    /**
     * Sets mounting_depth
     *
     * @param int|null $mounting_depth Maximum depth of a mounted device, in millimeters. For four-post racks, this is the distance between the front and rear rails.
     *
     * @return self
     */
    public function setMountingDepth($mounting_depth)
    {
        if (is_null($mounting_depth)) {
            array_push($this->openAPINullablesSetToNull, 'mounting_depth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mounting_depth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($mounting_depth) && ($mounting_depth > 32767)) {
            throw new \InvalidArgumentException('invalid value for $mounting_depth when calling RackType., must be smaller than or equal to 32767.');
        }
        if (!is_null($mounting_depth) && ($mounting_depth < 0)) {
            throw new \InvalidArgumentException('invalid value for $mounting_depth when calling RackType., must be bigger than or equal to 0.');
        }

        $this->container['mounting_depth'] = $mounting_depth;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\NestedTag[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\NestedTag[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return array<string,mixed>|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param array<string,mixed>|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            array_push($this->openAPINullablesSetToNull, 'created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            array_push($this->openAPINullablesSetToNull, 'last_updated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_updated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


