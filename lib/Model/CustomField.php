<?php
/**
 * CustomField
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1.1 (4.1)
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CustomField Class Doc Comment
 *
 * @category Class
 * @description Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomField implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'url' => 'string',
        'display_url' => 'string',
        'display' => 'string',
        'object_types' => 'string[]',
        'type' => '\OpenAPI\Client\Model\CustomFieldType',
        'related_object_type' => 'string',
        'data_type' => 'string',
        'name' => 'string',
        'label' => 'string',
        'group_name' => 'string',
        'description' => 'string',
        'required' => 'bool',
        'unique' => 'bool',
        'search_weight' => 'int',
        'filter_logic' => '\OpenAPI\Client\Model\CustomFieldFilterLogic',
        'ui_visible' => '\OpenAPI\Client\Model\CustomFieldUiVisible',
        'ui_editable' => '\OpenAPI\Client\Model\CustomFieldUiEditable',
        'is_cloneable' => 'bool',
        'default' => 'mixed',
        'related_object_filter' => 'mixed',
        'weight' => 'int',
        'validation_minimum' => 'int',
        'validation_maximum' => 'int',
        'validation_regex' => 'string',
        'choice_set' => '\OpenAPI\Client\Model\BriefCustomFieldChoiceSet',
        'comments' => 'string',
        'created' => '\DateTime',
        'last_updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'url' => 'uri',
        'display_url' => 'uri',
        'display' => null,
        'object_types' => null,
        'type' => null,
        'related_object_type' => null,
        'data_type' => null,
        'name' => null,
        'label' => null,
        'group_name' => null,
        'description' => null,
        'required' => null,
        'unique' => null,
        'search_weight' => null,
        'filter_logic' => null,
        'ui_visible' => null,
        'ui_editable' => null,
        'is_cloneable' => null,
        'default' => null,
        'related_object_filter' => null,
        'weight' => null,
        'validation_minimum' => 'int64',
        'validation_maximum' => 'int64',
        'validation_regex' => null,
        'choice_set' => null,
        'comments' => null,
        'created' => 'date-time',
        'last_updated' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'url' => false,
        'display_url' => false,
        'display' => false,
        'object_types' => false,
        'type' => false,
        'related_object_type' => true,
        'data_type' => false,
        'name' => false,
        'label' => false,
        'group_name' => false,
        'description' => false,
        'required' => false,
        'unique' => false,
        'search_weight' => false,
        'filter_logic' => false,
        'ui_visible' => false,
        'ui_editable' => false,
        'is_cloneable' => false,
        'default' => true,
        'related_object_filter' => true,
        'weight' => false,
        'validation_minimum' => true,
        'validation_maximum' => true,
        'validation_regex' => false,
        'choice_set' => true,
        'comments' => false,
        'created' => true,
        'last_updated' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'url' => 'url',
        'display_url' => 'display_url',
        'display' => 'display',
        'object_types' => 'object_types',
        'type' => 'type',
        'related_object_type' => 'related_object_type',
        'data_type' => 'data_type',
        'name' => 'name',
        'label' => 'label',
        'group_name' => 'group_name',
        'description' => 'description',
        'required' => 'required',
        'unique' => 'unique',
        'search_weight' => 'search_weight',
        'filter_logic' => 'filter_logic',
        'ui_visible' => 'ui_visible',
        'ui_editable' => 'ui_editable',
        'is_cloneable' => 'is_cloneable',
        'default' => 'default',
        'related_object_filter' => 'related_object_filter',
        'weight' => 'weight',
        'validation_minimum' => 'validation_minimum',
        'validation_maximum' => 'validation_maximum',
        'validation_regex' => 'validation_regex',
        'choice_set' => 'choice_set',
        'comments' => 'comments',
        'created' => 'created',
        'last_updated' => 'last_updated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'url' => 'setUrl',
        'display_url' => 'setDisplayUrl',
        'display' => 'setDisplay',
        'object_types' => 'setObjectTypes',
        'type' => 'setType',
        'related_object_type' => 'setRelatedObjectType',
        'data_type' => 'setDataType',
        'name' => 'setName',
        'label' => 'setLabel',
        'group_name' => 'setGroupName',
        'description' => 'setDescription',
        'required' => 'setRequired',
        'unique' => 'setUnique',
        'search_weight' => 'setSearchWeight',
        'filter_logic' => 'setFilterLogic',
        'ui_visible' => 'setUiVisible',
        'ui_editable' => 'setUiEditable',
        'is_cloneable' => 'setIsCloneable',
        'default' => 'setDefault',
        'related_object_filter' => 'setRelatedObjectFilter',
        'weight' => 'setWeight',
        'validation_minimum' => 'setValidationMinimum',
        'validation_maximum' => 'setValidationMaximum',
        'validation_regex' => 'setValidationRegex',
        'choice_set' => 'setChoiceSet',
        'comments' => 'setComments',
        'created' => 'setCreated',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'url' => 'getUrl',
        'display_url' => 'getDisplayUrl',
        'display' => 'getDisplay',
        'object_types' => 'getObjectTypes',
        'type' => 'getType',
        'related_object_type' => 'getRelatedObjectType',
        'data_type' => 'getDataType',
        'name' => 'getName',
        'label' => 'getLabel',
        'group_name' => 'getGroupName',
        'description' => 'getDescription',
        'required' => 'getRequired',
        'unique' => 'getUnique',
        'search_weight' => 'getSearchWeight',
        'filter_logic' => 'getFilterLogic',
        'ui_visible' => 'getUiVisible',
        'ui_editable' => 'getUiEditable',
        'is_cloneable' => 'getIsCloneable',
        'default' => 'getDefault',
        'related_object_filter' => 'getRelatedObjectFilter',
        'weight' => 'getWeight',
        'validation_minimum' => 'getValidationMinimum',
        'validation_maximum' => 'getValidationMaximum',
        'validation_regex' => 'getValidationRegex',
        'choice_set' => 'getChoiceSet',
        'comments' => 'getComments',
        'created' => 'getCreated',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('display_url', $data ?? [], null);
        $this->setIfExists('display', $data ?? [], null);
        $this->setIfExists('object_types', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('related_object_type', $data ?? [], null);
        $this->setIfExists('data_type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('group_name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('required', $data ?? [], null);
        $this->setIfExists('unique', $data ?? [], null);
        $this->setIfExists('search_weight', $data ?? [], null);
        $this->setIfExists('filter_logic', $data ?? [], null);
        $this->setIfExists('ui_visible', $data ?? [], null);
        $this->setIfExists('ui_editable', $data ?? [], null);
        $this->setIfExists('is_cloneable', $data ?? [], null);
        $this->setIfExists('default', $data ?? [], null);
        $this->setIfExists('related_object_filter', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('validation_minimum', $data ?? [], null);
        $this->setIfExists('validation_maximum', $data ?? [], null);
        $this->setIfExists('validation_regex', $data ?? [], null);
        $this->setIfExists('choice_set', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['display_url'] === null) {
            $invalidProperties[] = "'display_url' can't be null";
        }
        if ($this->container['display'] === null) {
            $invalidProperties[] = "'display' can't be null";
        }
        if ($this->container['object_types'] === null) {
            $invalidProperties[] = "'object_types' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['data_type'] === null) {
            $invalidProperties[] = "'data_type' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if (!preg_match("/^[a-z0-9_]+$/", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /^[a-z0-9_]+$/.";
        }

        if (!is_null($this->container['label']) && (mb_strlen($this->container['label']) > 50)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['group_name']) && (mb_strlen($this->container['group_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'group_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 200)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['search_weight']) && ($this->container['search_weight'] > 32767)) {
            $invalidProperties[] = "invalid value for 'search_weight', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['search_weight']) && ($this->container['search_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'search_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] > 32767)) {
            $invalidProperties[] = "invalid value for 'weight', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['validation_minimum']) && ($this->container['validation_minimum'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'validation_minimum', must be smaller than or equal to 9223372036854775807.";
        }

        if (!is_null($this->container['validation_minimum']) && ($this->container['validation_minimum'] < -9223372036854775808)) {
            $invalidProperties[] = "invalid value for 'validation_minimum', must be bigger than or equal to -9223372036854775808.";
        }

        if (!is_null($this->container['validation_maximum']) && ($this->container['validation_maximum'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'validation_maximum', must be smaller than or equal to 9223372036854775807.";
        }

        if (!is_null($this->container['validation_maximum']) && ($this->container['validation_maximum'] < -9223372036854775808)) {
            $invalidProperties[] = "invalid value for 'validation_maximum', must be bigger than or equal to -9223372036854775808.";
        }

        if (!is_null($this->container['validation_regex']) && (mb_strlen($this->container['validation_regex']) > 500)) {
            $invalidProperties[] = "invalid value for 'validation_regex', the character length must be smaller than or equal to 500.";
        }

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['last_updated'] === null) {
            $invalidProperties[] = "'last_updated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets display_url
     *
     * @return string
     */
    public function getDisplayUrl()
    {
        return $this->container['display_url'];
    }

    /**
     * Sets display_url
     *
     * @param string $display_url display_url
     *
     * @return self
     */
    public function setDisplayUrl($display_url)
    {
        if (is_null($display_url)) {
            throw new \InvalidArgumentException('non-nullable display_url cannot be null');
        }
        $this->container['display_url'] = $display_url;

        return $this;
    }

    /**
     * Gets display
     *
     * @return string
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param string $display display
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (is_null($display)) {
            throw new \InvalidArgumentException('non-nullable display cannot be null');
        }
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets object_types
     *
     * @return string[]
     */
    public function getObjectTypes()
    {
        return $this->container['object_types'];
    }

    /**
     * Sets object_types
     *
     * @param string[] $object_types object_types
     *
     * @return self
     */
    public function setObjectTypes($object_types)
    {
        if (is_null($object_types)) {
            throw new \InvalidArgumentException('non-nullable object_types cannot be null');
        }
        $this->container['object_types'] = $object_types;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\CustomFieldType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\CustomFieldType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets related_object_type
     *
     * @return string|null
     */
    public function getRelatedObjectType()
    {
        return $this->container['related_object_type'];
    }

    /**
     * Sets related_object_type
     *
     * @param string|null $related_object_type related_object_type
     *
     * @return self
     */
    public function setRelatedObjectType($related_object_type)
    {
        if (is_null($related_object_type)) {
            array_push($this->openAPINullablesSetToNull, 'related_object_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_object_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['related_object_type'] = $related_object_type;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string $data_type data_type
     *
     * @return self
     */
    public function setDataType($data_type)
    {
        if (is_null($data_type)) {
            throw new \InvalidArgumentException('non-nullable data_type cannot be null');
        }
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Internal field name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CustomField., must be smaller than or equal to 50.');
        }
        if ((!preg_match("/^[a-z0-9_]+$/", ObjectSerializer::toString($name)))) {
            throw new \InvalidArgumentException("invalid value for \$name when calling CustomField., must conform to the pattern /^[a-z0-9_]+$/.");
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label Name of the field as displayed to users (if not provided, 'the field's name will be used)
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        if ((mb_strlen($label) > 50)) {
            throw new \InvalidArgumentException('invalid length for $label when calling CustomField., must be smaller than or equal to 50.');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string|null
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string|null $group_name Custom fields within the same group will be displayed together
     *
     * @return self
     */
    public function setGroupName($group_name)
    {
        if (is_null($group_name)) {
            throw new \InvalidArgumentException('non-nullable group_name cannot be null');
        }
        if ((mb_strlen($group_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $group_name when calling CustomField., must be smaller than or equal to 50.');
        }

        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 200)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CustomField., must be smaller than or equal to 200.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required This field is required when creating new objects or editing an existing object.
     *
     * @return self
     */
    public function setRequired($required)
    {
        if (is_null($required)) {
            throw new \InvalidArgumentException('non-nullable required cannot be null');
        }
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets unique
     *
     * @return bool|null
     */
    public function getUnique()
    {
        return $this->container['unique'];
    }

    /**
     * Sets unique
     *
     * @param bool|null $unique The value of this field must be unique for the assigned object
     *
     * @return self
     */
    public function setUnique($unique)
    {
        if (is_null($unique)) {
            throw new \InvalidArgumentException('non-nullable unique cannot be null');
        }
        $this->container['unique'] = $unique;

        return $this;
    }

    /**
     * Gets search_weight
     *
     * @return int|null
     */
    public function getSearchWeight()
    {
        return $this->container['search_weight'];
    }

    /**
     * Sets search_weight
     *
     * @param int|null $search_weight Weighting for search. Lower values are considered more important. Fields with a search weight of zero will be ignored.
     *
     * @return self
     */
    public function setSearchWeight($search_weight)
    {
        if (is_null($search_weight)) {
            throw new \InvalidArgumentException('non-nullable search_weight cannot be null');
        }

        if (($search_weight > 32767)) {
            throw new \InvalidArgumentException('invalid value for $search_weight when calling CustomField., must be smaller than or equal to 32767.');
        }
        if (($search_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $search_weight when calling CustomField., must be bigger than or equal to 0.');
        }

        $this->container['search_weight'] = $search_weight;

        return $this;
    }

    /**
     * Gets filter_logic
     *
     * @return \OpenAPI\Client\Model\CustomFieldFilterLogic|null
     */
    public function getFilterLogic()
    {
        return $this->container['filter_logic'];
    }

    /**
     * Sets filter_logic
     *
     * @param \OpenAPI\Client\Model\CustomFieldFilterLogic|null $filter_logic filter_logic
     *
     * @return self
     */
    public function setFilterLogic($filter_logic)
    {
        if (is_null($filter_logic)) {
            throw new \InvalidArgumentException('non-nullable filter_logic cannot be null');
        }
        $this->container['filter_logic'] = $filter_logic;

        return $this;
    }

    /**
     * Gets ui_visible
     *
     * @return \OpenAPI\Client\Model\CustomFieldUiVisible|null
     */
    public function getUiVisible()
    {
        return $this->container['ui_visible'];
    }

    /**
     * Sets ui_visible
     *
     * @param \OpenAPI\Client\Model\CustomFieldUiVisible|null $ui_visible ui_visible
     *
     * @return self
     */
    public function setUiVisible($ui_visible)
    {
        if (is_null($ui_visible)) {
            throw new \InvalidArgumentException('non-nullable ui_visible cannot be null');
        }
        $this->container['ui_visible'] = $ui_visible;

        return $this;
    }

    /**
     * Gets ui_editable
     *
     * @return \OpenAPI\Client\Model\CustomFieldUiEditable|null
     */
    public function getUiEditable()
    {
        return $this->container['ui_editable'];
    }

    /**
     * Sets ui_editable
     *
     * @param \OpenAPI\Client\Model\CustomFieldUiEditable|null $ui_editable ui_editable
     *
     * @return self
     */
    public function setUiEditable($ui_editable)
    {
        if (is_null($ui_editable)) {
            throw new \InvalidArgumentException('non-nullable ui_editable cannot be null');
        }
        $this->container['ui_editable'] = $ui_editable;

        return $this;
    }

    /**
     * Gets is_cloneable
     *
     * @return bool|null
     */
    public function getIsCloneable()
    {
        return $this->container['is_cloneable'];
    }

    /**
     * Sets is_cloneable
     *
     * @param bool|null $is_cloneable Replicate this value when cloning objects
     *
     * @return self
     */
    public function setIsCloneable($is_cloneable)
    {
        if (is_null($is_cloneable)) {
            throw new \InvalidArgumentException('non-nullable is_cloneable cannot be null');
        }
        $this->container['is_cloneable'] = $is_cloneable;

        return $this;
    }

    /**
     * Gets default
     *
     * @return mixed|null
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param mixed|null $default Default value for the field (must be a JSON value). Encapsulate strings with double quotes (e.g. \"Foo\").
     *
     * @return self
     */
    public function setDefault($default)
    {
        if (is_null($default)) {
            array_push($this->openAPINullablesSetToNull, 'default');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets related_object_filter
     *
     * @return mixed|null
     */
    public function getRelatedObjectFilter()
    {
        return $this->container['related_object_filter'];
    }

    /**
     * Sets related_object_filter
     *
     * @param mixed|null $related_object_filter Filter the object selection choices using a query_params dict (must be a JSON value).Encapsulate strings with double quotes (e.g. \"Foo\").
     *
     * @return self
     */
    public function setRelatedObjectFilter($related_object_filter)
    {
        if (is_null($related_object_filter)) {
            array_push($this->openAPINullablesSetToNull, 'related_object_filter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_object_filter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['related_object_filter'] = $related_object_filter;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int|null $weight Fields with higher weights appear lower in a form.
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }

        if (($weight > 32767)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling CustomField., must be smaller than or equal to 32767.');
        }
        if (($weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling CustomField., must be bigger than or equal to 0.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets validation_minimum
     *
     * @return int|null
     */
    public function getValidationMinimum()
    {
        return $this->container['validation_minimum'];
    }

    /**
     * Sets validation_minimum
     *
     * @param int|null $validation_minimum Minimum allowed value (for numeric fields)
     *
     * @return self
     */
    public function setValidationMinimum($validation_minimum)
    {
        if (is_null($validation_minimum)) {
            array_push($this->openAPINullablesSetToNull, 'validation_minimum');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validation_minimum', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($validation_minimum) && ($validation_minimum > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $validation_minimum when calling CustomField., must be smaller than or equal to 9223372036854775807.');
        }
        if (!is_null($validation_minimum) && ($validation_minimum < -9223372036854775808)) {
            throw new \InvalidArgumentException('invalid value for $validation_minimum when calling CustomField., must be bigger than or equal to -9223372036854775808.');
        }

        $this->container['validation_minimum'] = $validation_minimum;

        return $this;
    }

    /**
     * Gets validation_maximum
     *
     * @return int|null
     */
    public function getValidationMaximum()
    {
        return $this->container['validation_maximum'];
    }

    /**
     * Sets validation_maximum
     *
     * @param int|null $validation_maximum Maximum allowed value (for numeric fields)
     *
     * @return self
     */
    public function setValidationMaximum($validation_maximum)
    {
        if (is_null($validation_maximum)) {
            array_push($this->openAPINullablesSetToNull, 'validation_maximum');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validation_maximum', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($validation_maximum) && ($validation_maximum > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $validation_maximum when calling CustomField., must be smaller than or equal to 9223372036854775807.');
        }
        if (!is_null($validation_maximum) && ($validation_maximum < -9223372036854775808)) {
            throw new \InvalidArgumentException('invalid value for $validation_maximum when calling CustomField., must be bigger than or equal to -9223372036854775808.');
        }

        $this->container['validation_maximum'] = $validation_maximum;

        return $this;
    }

    /**
     * Gets validation_regex
     *
     * @return string|null
     */
    public function getValidationRegex()
    {
        return $this->container['validation_regex'];
    }

    /**
     * Sets validation_regex
     *
     * @param string|null $validation_regex Regular expression to enforce on text field values. Use ^ and $ to force matching of entire string. For example, <code>^[A-Z]{3}$</code> will limit values to exactly three uppercase letters.
     *
     * @return self
     */
    public function setValidationRegex($validation_regex)
    {
        if (is_null($validation_regex)) {
            throw new \InvalidArgumentException('non-nullable validation_regex cannot be null');
        }
        if ((mb_strlen($validation_regex) > 500)) {
            throw new \InvalidArgumentException('invalid length for $validation_regex when calling CustomField., must be smaller than or equal to 500.');
        }

        $this->container['validation_regex'] = $validation_regex;

        return $this;
    }

    /**
     * Gets choice_set
     *
     * @return \OpenAPI\Client\Model\BriefCustomFieldChoiceSet|null
     */
    public function getChoiceSet()
    {
        return $this->container['choice_set'];
    }

    /**
     * Sets choice_set
     *
     * @param \OpenAPI\Client\Model\BriefCustomFieldChoiceSet|null $choice_set choice_set
     *
     * @return self
     */
    public function setChoiceSet($choice_set)
    {
        if (is_null($choice_set)) {
            array_push($this->openAPINullablesSetToNull, 'choice_set');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('choice_set', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['choice_set'] = $choice_set;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            array_push($this->openAPINullablesSetToNull, 'created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            array_push($this->openAPINullablesSetToNull, 'last_updated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_updated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


