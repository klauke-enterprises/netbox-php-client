<?php
/**
 * PowerOutletType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1.1 (4.1)
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PowerOutletType Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PowerOutletType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PowerOutlet_type';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'value' => 'string',
        'label' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'value' => null,
        'label' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'value' => false,
        'label' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'value' => 'value',
        'label' => 'label'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'value' => 'setValue',
        'label' => 'setLabel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'value' => 'getValue',
        'label' => 'getLabel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const VALUE_IEC_60320_C5 = 'iec-60320-c5';
    public const VALUE_IEC_60320_C7 = 'iec-60320-c7';
    public const VALUE_IEC_60320_C13 = 'iec-60320-c13';
    public const VALUE_IEC_60320_C15 = 'iec-60320-c15';
    public const VALUE_IEC_60320_C19 = 'iec-60320-c19';
    public const VALUE_IEC_60320_C21 = 'iec-60320-c21';
    public const VALUE_IEC_60309_P_N_E_4H = 'iec-60309-p-n-e-4h';
    public const VALUE_IEC_60309_P_N_E_6H = 'iec-60309-p-n-e-6h';
    public const VALUE_IEC_60309_P_N_E_9H = 'iec-60309-p-n-e-9h';
    public const VALUE_IEC_60309_2P_E_4H = 'iec-60309-2p-e-4h';
    public const VALUE_IEC_60309_2P_E_6H = 'iec-60309-2p-e-6h';
    public const VALUE_IEC_60309_2P_E_9H = 'iec-60309-2p-e-9h';
    public const VALUE_IEC_60309_3P_E_4H = 'iec-60309-3p-e-4h';
    public const VALUE_IEC_60309_3P_E_6H = 'iec-60309-3p-e-6h';
    public const VALUE_IEC_60309_3P_E_9H = 'iec-60309-3p-e-9h';
    public const VALUE_IEC_60309_3P_N_E_4H = 'iec-60309-3p-n-e-4h';
    public const VALUE_IEC_60309_3P_N_E_6H = 'iec-60309-3p-n-e-6h';
    public const VALUE_IEC_60309_3P_N_E_9H = 'iec-60309-3p-n-e-9h';
    public const VALUE_IEC_60906_1 = 'iec-60906-1';
    public const VALUE_NBR_14136_10A = 'nbr-14136-10a';
    public const VALUE_NBR_14136_20A = 'nbr-14136-20a';
    public const VALUE_NEMA_1_15R = 'nema-1-15r';
    public const VALUE_NEMA_5_15R = 'nema-5-15r';
    public const VALUE_NEMA_5_20R = 'nema-5-20r';
    public const VALUE_NEMA_5_30R = 'nema-5-30r';
    public const VALUE_NEMA_5_50R = 'nema-5-50r';
    public const VALUE_NEMA_6_15R = 'nema-6-15r';
    public const VALUE_NEMA_6_20R = 'nema-6-20r';
    public const VALUE_NEMA_6_30R = 'nema-6-30r';
    public const VALUE_NEMA_6_50R = 'nema-6-50r';
    public const VALUE_NEMA_10_30R = 'nema-10-30r';
    public const VALUE_NEMA_10_50R = 'nema-10-50r';
    public const VALUE_NEMA_14_20R = 'nema-14-20r';
    public const VALUE_NEMA_14_30R = 'nema-14-30r';
    public const VALUE_NEMA_14_50R = 'nema-14-50r';
    public const VALUE_NEMA_14_60R = 'nema-14-60r';
    public const VALUE_NEMA_15_15R = 'nema-15-15r';
    public const VALUE_NEMA_15_20R = 'nema-15-20r';
    public const VALUE_NEMA_15_30R = 'nema-15-30r';
    public const VALUE_NEMA_15_50R = 'nema-15-50r';
    public const VALUE_NEMA_15_60R = 'nema-15-60r';
    public const VALUE_NEMA_L1_15R = 'nema-l1-15r';
    public const VALUE_NEMA_L5_15R = 'nema-l5-15r';
    public const VALUE_NEMA_L5_20R = 'nema-l5-20r';
    public const VALUE_NEMA_L5_30R = 'nema-l5-30r';
    public const VALUE_NEMA_L5_50R = 'nema-l5-50r';
    public const VALUE_NEMA_L6_15R = 'nema-l6-15r';
    public const VALUE_NEMA_L6_20R = 'nema-l6-20r';
    public const VALUE_NEMA_L6_30R = 'nema-l6-30r';
    public const VALUE_NEMA_L6_50R = 'nema-l6-50r';
    public const VALUE_NEMA_L10_30R = 'nema-l10-30r';
    public const VALUE_NEMA_L14_20R = 'nema-l14-20r';
    public const VALUE_NEMA_L14_30R = 'nema-l14-30r';
    public const VALUE_NEMA_L14_50R = 'nema-l14-50r';
    public const VALUE_NEMA_L14_60R = 'nema-l14-60r';
    public const VALUE_NEMA_L15_20R = 'nema-l15-20r';
    public const VALUE_NEMA_L15_30R = 'nema-l15-30r';
    public const VALUE_NEMA_L15_50R = 'nema-l15-50r';
    public const VALUE_NEMA_L15_60R = 'nema-l15-60r';
    public const VALUE_NEMA_L21_20R = 'nema-l21-20r';
    public const VALUE_NEMA_L21_30R = 'nema-l21-30r';
    public const VALUE_NEMA_L22_20R = 'nema-l22-20r';
    public const VALUE_NEMA_L22_30R = 'nema-l22-30r';
    public const VALUE_CS6360_C = 'CS6360C';
    public const VALUE_CS6364_C = 'CS6364C';
    public const VALUE_CS8164_C = 'CS8164C';
    public const VALUE_CS8264_C = 'CS8264C';
    public const VALUE_CS8364_C = 'CS8364C';
    public const VALUE_CS8464_C = 'CS8464C';
    public const VALUE_ITA_E = 'ita-e';
    public const VALUE_ITA_F = 'ita-f';
    public const VALUE_ITA_G = 'ita-g';
    public const VALUE_ITA_H = 'ita-h';
    public const VALUE_ITA_I = 'ita-i';
    public const VALUE_ITA_J = 'ita-j';
    public const VALUE_ITA_K = 'ita-k';
    public const VALUE_ITA_L = 'ita-l';
    public const VALUE_ITA_M = 'ita-m';
    public const VALUE_ITA_N = 'ita-n';
    public const VALUE_ITA_O = 'ita-o';
    public const VALUE_ITA_MULTISTANDARD = 'ita-multistandard';
    public const VALUE_USB_A = 'usb-a';
    public const VALUE_USB_MICRO_B = 'usb-micro-b';
    public const VALUE_USB_C = 'usb-c';
    public const VALUE_MOLEX_MICRO_FIT_1X2 = 'molex-micro-fit-1x2';
    public const VALUE_MOLEX_MICRO_FIT_2X2 = 'molex-micro-fit-2x2';
    public const VALUE_MOLEX_MICRO_FIT_2X4 = 'molex-micro-fit-2x4';
    public const VALUE_DC_TERMINAL = 'dc-terminal';
    public const VALUE_HDOT_CX = 'hdot-cx';
    public const VALUE_SAF_D_GRID = 'saf-d-grid';
    public const VALUE_NEUTRIK_POWERCON_20A = 'neutrik-powercon-20a';
    public const VALUE_NEUTRIK_POWERCON_32A = 'neutrik-powercon-32a';
    public const VALUE_NEUTRIK_POWERCON_TRUE1 = 'neutrik-powercon-true1';
    public const VALUE_NEUTRIK_POWERCON_TRUE1_TOP = 'neutrik-powercon-true1-top';
    public const VALUE_UBIQUITI_SMARTPOWER = 'ubiquiti-smartpower';
    public const VALUE_HARDWIRED = 'hardwired';
    public const VALUE_OTHER = 'other';
    public const VALUE_EMPTY = '';
    public const VALUE_NULL = 'null';
    public const LABEL_C5 = 'C5';
    public const LABEL_C7 = 'C7';
    public const LABEL_C13 = 'C13';
    public const LABEL_C15 = 'C15';
    public const LABEL_C19 = 'C19';
    public const LABEL_C21 = 'C21';
    public const LABEL_PNE_4_H = 'P+N+E 4H';
    public const LABEL_PNE_6_H = 'P+N+E 6H';
    public const LABEL_PNE_9_H = 'P+N+E 9H';
    public const LABEL__2_PE_4_H = '2P+E 4H';
    public const LABEL__2_PE_6_H = '2P+E 6H';
    public const LABEL__2_PE_9_H = '2P+E 9H';
    public const LABEL__3_PE_4_H = '3P+E 4H';
    public const LABEL__3_PE_6_H = '3P+E 6H';
    public const LABEL__3_PE_9_H = '3P+E 9H';
    public const LABEL__3_PNE_4_H = '3P+N+E 4H';
    public const LABEL__3_PNE_6_H = '3P+N+E 6H';
    public const LABEL__3_PNE_9_H = '3P+N+E 9H';
    public const LABEL_IEC_60906_1 = 'IEC 60906-1';
    public const LABEL__2_PT_10_A__NBR_14136 = '2P+T 10A (NBR 14136)';
    public const LABEL__2_PT_20_A__NBR_14136 = '2P+T 20A (NBR 14136)';
    public const LABEL_NEMA_1_15_R = 'NEMA 1-15R';
    public const LABEL_NEMA_5_15_R = 'NEMA 5-15R';
    public const LABEL_NEMA_5_20_R = 'NEMA 5-20R';
    public const LABEL_NEMA_5_30_R = 'NEMA 5-30R';
    public const LABEL_NEMA_5_50_R = 'NEMA 5-50R';
    public const LABEL_NEMA_6_15_R = 'NEMA 6-15R';
    public const LABEL_NEMA_6_20_R = 'NEMA 6-20R';
    public const LABEL_NEMA_6_30_R = 'NEMA 6-30R';
    public const LABEL_NEMA_6_50_R = 'NEMA 6-50R';
    public const LABEL_NEMA_10_30_R = 'NEMA 10-30R';
    public const LABEL_NEMA_10_50_R = 'NEMA 10-50R';
    public const LABEL_NEMA_14_20_R = 'NEMA 14-20R';
    public const LABEL_NEMA_14_30_R = 'NEMA 14-30R';
    public const LABEL_NEMA_14_50_R = 'NEMA 14-50R';
    public const LABEL_NEMA_14_60_R = 'NEMA 14-60R';
    public const LABEL_NEMA_15_15_R = 'NEMA 15-15R';
    public const LABEL_NEMA_15_20_R = 'NEMA 15-20R';
    public const LABEL_NEMA_15_30_R = 'NEMA 15-30R';
    public const LABEL_NEMA_15_50_R = 'NEMA 15-50R';
    public const LABEL_NEMA_15_60_R = 'NEMA 15-60R';
    public const LABEL_NEMA_L1_15_R = 'NEMA L1-15R';
    public const LABEL_NEMA_L5_15_R = 'NEMA L5-15R';
    public const LABEL_NEMA_L5_20_R = 'NEMA L5-20R';
    public const LABEL_NEMA_L5_30_R = 'NEMA L5-30R';
    public const LABEL_NEMA_L5_50_R = 'NEMA L5-50R';
    public const LABEL_NEMA_L6_15_R = 'NEMA L6-15R';
    public const LABEL_NEMA_L6_20_R = 'NEMA L6-20R';
    public const LABEL_NEMA_L6_30_R = 'NEMA L6-30R';
    public const LABEL_NEMA_L6_50_R = 'NEMA L6-50R';
    public const LABEL_NEMA_L10_30_R = 'NEMA L10-30R';
    public const LABEL_NEMA_L14_20_R = 'NEMA L14-20R';
    public const LABEL_NEMA_L14_30_R = 'NEMA L14-30R';
    public const LABEL_NEMA_L14_50_R = 'NEMA L14-50R';
    public const LABEL_NEMA_L14_60_R = 'NEMA L14-60R';
    public const LABEL_NEMA_L15_20_R = 'NEMA L15-20R';
    public const LABEL_NEMA_L15_30_R = 'NEMA L15-30R';
    public const LABEL_NEMA_L15_50_R = 'NEMA L15-50R';
    public const LABEL_NEMA_L15_60_R = 'NEMA L15-60R';
    public const LABEL_NEMA_L21_20_R = 'NEMA L21-20R';
    public const LABEL_NEMA_L21_30_R = 'NEMA L21-30R';
    public const LABEL_NEMA_L22_20_R = 'NEMA L22-20R';
    public const LABEL_NEMA_L22_30_R = 'NEMA L22-30R';
    public const LABEL_CS6360_C = 'CS6360C';
    public const LABEL_CS6364_C = 'CS6364C';
    public const LABEL_CS8164_C = 'CS8164C';
    public const LABEL_CS8264_C = 'CS8264C';
    public const LABEL_CS8364_C = 'CS8364C';
    public const LABEL_CS8464_C = 'CS8464C';
    public const LABEL_ITA_TYPE_E__CEE_7_5 = 'ITA Type E (CEE 7/5)';
    public const LABEL_ITA_TYPE_F__CEE_7_3 = 'ITA Type F (CEE 7/3)';
    public const LABEL_ITA_TYPE_G__BS_1363 = 'ITA Type G (BS 1363)';
    public const LABEL_ITA_TYPE_H = 'ITA Type H';
    public const LABEL_ITA_TYPE_I = 'ITA Type I';
    public const LABEL_ITA_TYPE_J = 'ITA Type J';
    public const LABEL_ITA_TYPE_K = 'ITA Type K';
    public const LABEL_ITA_TYPE_L__CEI_23_50 = 'ITA Type L (CEI 23-50)';
    public const LABEL_ITA_TYPE_M__BS_546 = 'ITA Type M (BS 546)';
    public const LABEL_ITA_TYPE_N = 'ITA Type N';
    public const LABEL_ITA_TYPE_O = 'ITA Type O';
    public const LABEL_ITA_MULTISTANDARD = 'ITA Multistandard';
    public const LABEL_USB_TYPE_A = 'USB Type A';
    public const LABEL_USB_MICRO_B = 'USB Micro B';
    public const LABEL_USB_TYPE_C = 'USB Type C';
    public const LABEL_MOLEX_MICRO_FIT_1X2 = 'Molex Micro-Fit 1x2';
    public const LABEL_MOLEX_MICRO_FIT_2X2 = 'Molex Micro-Fit 2x2';
    public const LABEL_MOLEX_MICRO_FIT_2X4 = 'Molex Micro-Fit 2x4';
    public const LABEL_DC_TERMINAL = 'DC Terminal';
    public const LABEL_HDOT_CX = 'HDOT Cx';
    public const LABEL_SAF_D_GRID = 'Saf-D-Grid';
    public const LABEL_NEUTRIK_POWER_CON__20_A = 'Neutrik powerCON (20A)';
    public const LABEL_NEUTRIK_POWER_CON__32_A = 'Neutrik powerCON (32A)';
    public const LABEL_NEUTRIK_POWER_CON_TRUE1 = 'Neutrik powerCON TRUE1';
    public const LABEL_NEUTRIK_POWER_CON_TRUE1_TOP = 'Neutrik powerCON TRUE1 TOP';
    public const LABEL_UBIQUITI_SMART_POWER = 'Ubiquiti SmartPower';
    public const LABEL_HARDWIRED = 'Hardwired';
    public const LABEL_OTHER = 'Other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValueAllowableValues()
    {
        return [
            self::VALUE_IEC_60320_C5,
            self::VALUE_IEC_60320_C7,
            self::VALUE_IEC_60320_C13,
            self::VALUE_IEC_60320_C15,
            self::VALUE_IEC_60320_C19,
            self::VALUE_IEC_60320_C21,
            self::VALUE_IEC_60309_P_N_E_4H,
            self::VALUE_IEC_60309_P_N_E_6H,
            self::VALUE_IEC_60309_P_N_E_9H,
            self::VALUE_IEC_60309_2P_E_4H,
            self::VALUE_IEC_60309_2P_E_6H,
            self::VALUE_IEC_60309_2P_E_9H,
            self::VALUE_IEC_60309_3P_E_4H,
            self::VALUE_IEC_60309_3P_E_6H,
            self::VALUE_IEC_60309_3P_E_9H,
            self::VALUE_IEC_60309_3P_N_E_4H,
            self::VALUE_IEC_60309_3P_N_E_6H,
            self::VALUE_IEC_60309_3P_N_E_9H,
            self::VALUE_IEC_60906_1,
            self::VALUE_NBR_14136_10A,
            self::VALUE_NBR_14136_20A,
            self::VALUE_NEMA_1_15R,
            self::VALUE_NEMA_5_15R,
            self::VALUE_NEMA_5_20R,
            self::VALUE_NEMA_5_30R,
            self::VALUE_NEMA_5_50R,
            self::VALUE_NEMA_6_15R,
            self::VALUE_NEMA_6_20R,
            self::VALUE_NEMA_6_30R,
            self::VALUE_NEMA_6_50R,
            self::VALUE_NEMA_10_30R,
            self::VALUE_NEMA_10_50R,
            self::VALUE_NEMA_14_20R,
            self::VALUE_NEMA_14_30R,
            self::VALUE_NEMA_14_50R,
            self::VALUE_NEMA_14_60R,
            self::VALUE_NEMA_15_15R,
            self::VALUE_NEMA_15_20R,
            self::VALUE_NEMA_15_30R,
            self::VALUE_NEMA_15_50R,
            self::VALUE_NEMA_15_60R,
            self::VALUE_NEMA_L1_15R,
            self::VALUE_NEMA_L5_15R,
            self::VALUE_NEMA_L5_20R,
            self::VALUE_NEMA_L5_30R,
            self::VALUE_NEMA_L5_50R,
            self::VALUE_NEMA_L6_15R,
            self::VALUE_NEMA_L6_20R,
            self::VALUE_NEMA_L6_30R,
            self::VALUE_NEMA_L6_50R,
            self::VALUE_NEMA_L10_30R,
            self::VALUE_NEMA_L14_20R,
            self::VALUE_NEMA_L14_30R,
            self::VALUE_NEMA_L14_50R,
            self::VALUE_NEMA_L14_60R,
            self::VALUE_NEMA_L15_20R,
            self::VALUE_NEMA_L15_30R,
            self::VALUE_NEMA_L15_50R,
            self::VALUE_NEMA_L15_60R,
            self::VALUE_NEMA_L21_20R,
            self::VALUE_NEMA_L21_30R,
            self::VALUE_NEMA_L22_20R,
            self::VALUE_NEMA_L22_30R,
            self::VALUE_CS6360_C,
            self::VALUE_CS6364_C,
            self::VALUE_CS8164_C,
            self::VALUE_CS8264_C,
            self::VALUE_CS8364_C,
            self::VALUE_CS8464_C,
            self::VALUE_ITA_E,
            self::VALUE_ITA_F,
            self::VALUE_ITA_G,
            self::VALUE_ITA_H,
            self::VALUE_ITA_I,
            self::VALUE_ITA_J,
            self::VALUE_ITA_K,
            self::VALUE_ITA_L,
            self::VALUE_ITA_M,
            self::VALUE_ITA_N,
            self::VALUE_ITA_O,
            self::VALUE_ITA_MULTISTANDARD,
            self::VALUE_USB_A,
            self::VALUE_USB_MICRO_B,
            self::VALUE_USB_C,
            self::VALUE_MOLEX_MICRO_FIT_1X2,
            self::VALUE_MOLEX_MICRO_FIT_2X2,
            self::VALUE_MOLEX_MICRO_FIT_2X4,
            self::VALUE_DC_TERMINAL,
            self::VALUE_HDOT_CX,
            self::VALUE_SAF_D_GRID,
            self::VALUE_NEUTRIK_POWERCON_20A,
            self::VALUE_NEUTRIK_POWERCON_32A,
            self::VALUE_NEUTRIK_POWERCON_TRUE1,
            self::VALUE_NEUTRIK_POWERCON_TRUE1_TOP,
            self::VALUE_UBIQUITI_SMARTPOWER,
            self::VALUE_HARDWIRED,
            self::VALUE_OTHER,
            self::VALUE_EMPTY,
            self::VALUE_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelAllowableValues()
    {
        return [
            self::LABEL_C5,
            self::LABEL_C7,
            self::LABEL_C13,
            self::LABEL_C15,
            self::LABEL_C19,
            self::LABEL_C21,
            self::LABEL_PNE_4_H,
            self::LABEL_PNE_6_H,
            self::LABEL_PNE_9_H,
            self::LABEL__2_PE_4_H,
            self::LABEL__2_PE_6_H,
            self::LABEL__2_PE_9_H,
            self::LABEL__3_PE_4_H,
            self::LABEL__3_PE_6_H,
            self::LABEL__3_PE_9_H,
            self::LABEL__3_PNE_4_H,
            self::LABEL__3_PNE_6_H,
            self::LABEL__3_PNE_9_H,
            self::LABEL_IEC_60906_1,
            self::LABEL__2_PT_10_A__NBR_14136,
            self::LABEL__2_PT_20_A__NBR_14136,
            self::LABEL_NEMA_1_15_R,
            self::LABEL_NEMA_5_15_R,
            self::LABEL_NEMA_5_20_R,
            self::LABEL_NEMA_5_30_R,
            self::LABEL_NEMA_5_50_R,
            self::LABEL_NEMA_6_15_R,
            self::LABEL_NEMA_6_20_R,
            self::LABEL_NEMA_6_30_R,
            self::LABEL_NEMA_6_50_R,
            self::LABEL_NEMA_10_30_R,
            self::LABEL_NEMA_10_50_R,
            self::LABEL_NEMA_14_20_R,
            self::LABEL_NEMA_14_30_R,
            self::LABEL_NEMA_14_50_R,
            self::LABEL_NEMA_14_60_R,
            self::LABEL_NEMA_15_15_R,
            self::LABEL_NEMA_15_20_R,
            self::LABEL_NEMA_15_30_R,
            self::LABEL_NEMA_15_50_R,
            self::LABEL_NEMA_15_60_R,
            self::LABEL_NEMA_L1_15_R,
            self::LABEL_NEMA_L5_15_R,
            self::LABEL_NEMA_L5_20_R,
            self::LABEL_NEMA_L5_30_R,
            self::LABEL_NEMA_L5_50_R,
            self::LABEL_NEMA_L6_15_R,
            self::LABEL_NEMA_L6_20_R,
            self::LABEL_NEMA_L6_30_R,
            self::LABEL_NEMA_L6_50_R,
            self::LABEL_NEMA_L10_30_R,
            self::LABEL_NEMA_L14_20_R,
            self::LABEL_NEMA_L14_30_R,
            self::LABEL_NEMA_L14_50_R,
            self::LABEL_NEMA_L14_60_R,
            self::LABEL_NEMA_L15_20_R,
            self::LABEL_NEMA_L15_30_R,
            self::LABEL_NEMA_L15_50_R,
            self::LABEL_NEMA_L15_60_R,
            self::LABEL_NEMA_L21_20_R,
            self::LABEL_NEMA_L21_30_R,
            self::LABEL_NEMA_L22_20_R,
            self::LABEL_NEMA_L22_30_R,
            self::LABEL_CS6360_C,
            self::LABEL_CS6364_C,
            self::LABEL_CS8164_C,
            self::LABEL_CS8264_C,
            self::LABEL_CS8364_C,
            self::LABEL_CS8464_C,
            self::LABEL_ITA_TYPE_E__CEE_7_5,
            self::LABEL_ITA_TYPE_F__CEE_7_3,
            self::LABEL_ITA_TYPE_G__BS_1363,
            self::LABEL_ITA_TYPE_H,
            self::LABEL_ITA_TYPE_I,
            self::LABEL_ITA_TYPE_J,
            self::LABEL_ITA_TYPE_K,
            self::LABEL_ITA_TYPE_L__CEI_23_50,
            self::LABEL_ITA_TYPE_M__BS_546,
            self::LABEL_ITA_TYPE_N,
            self::LABEL_ITA_TYPE_O,
            self::LABEL_ITA_MULTISTANDARD,
            self::LABEL_USB_TYPE_A,
            self::LABEL_USB_MICRO_B,
            self::LABEL_USB_TYPE_C,
            self::LABEL_MOLEX_MICRO_FIT_1X2,
            self::LABEL_MOLEX_MICRO_FIT_2X2,
            self::LABEL_MOLEX_MICRO_FIT_2X4,
            self::LABEL_DC_TERMINAL,
            self::LABEL_HDOT_CX,
            self::LABEL_SAF_D_GRID,
            self::LABEL_NEUTRIK_POWER_CON__20_A,
            self::LABEL_NEUTRIK_POWER_CON__32_A,
            self::LABEL_NEUTRIK_POWER_CON_TRUE1,
            self::LABEL_NEUTRIK_POWER_CON_TRUE1_TOP,
            self::LABEL_UBIQUITI_SMART_POWER,
            self::LABEL_HARDWIRED,
            self::LABEL_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getValueAllowableValues();
        if (!is_null($this->container['value']) && !in_array($this->container['value'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'value', must be one of '%s'",
                $this->container['value'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLabelAllowableValues();
        if (!is_null($this->container['label']) && !in_array($this->container['label'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'label', must be one of '%s'",
                $this->container['label'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value * `iec-60320-c5` - C5 * `iec-60320-c7` - C7 * `iec-60320-c13` - C13 * `iec-60320-c15` - C15 * `iec-60320-c19` - C19 * `iec-60320-c21` - C21 * `iec-60309-p-n-e-4h` - P+N+E 4H * `iec-60309-p-n-e-6h` - P+N+E 6H * `iec-60309-p-n-e-9h` - P+N+E 9H * `iec-60309-2p-e-4h` - 2P+E 4H * `iec-60309-2p-e-6h` - 2P+E 6H * `iec-60309-2p-e-9h` - 2P+E 9H * `iec-60309-3p-e-4h` - 3P+E 4H * `iec-60309-3p-e-6h` - 3P+E 6H * `iec-60309-3p-e-9h` - 3P+E 9H * `iec-60309-3p-n-e-4h` - 3P+N+E 4H * `iec-60309-3p-n-e-6h` - 3P+N+E 6H * `iec-60309-3p-n-e-9h` - 3P+N+E 9H * `iec-60906-1` - IEC 60906-1 * `nbr-14136-10a` - 2P+T 10A (NBR 14136) * `nbr-14136-20a` - 2P+T 20A (NBR 14136) * `nema-1-15r` - NEMA 1-15R * `nema-5-15r` - NEMA 5-15R * `nema-5-20r` - NEMA 5-20R * `nema-5-30r` - NEMA 5-30R * `nema-5-50r` - NEMA 5-50R * `nema-6-15r` - NEMA 6-15R * `nema-6-20r` - NEMA 6-20R * `nema-6-30r` - NEMA 6-30R * `nema-6-50r` - NEMA 6-50R * `nema-10-30r` - NEMA 10-30R * `nema-10-50r` - NEMA 10-50R * `nema-14-20r` - NEMA 14-20R * `nema-14-30r` - NEMA 14-30R * `nema-14-50r` - NEMA 14-50R * `nema-14-60r` - NEMA 14-60R * `nema-15-15r` - NEMA 15-15R * `nema-15-20r` - NEMA 15-20R * `nema-15-30r` - NEMA 15-30R * `nema-15-50r` - NEMA 15-50R * `nema-15-60r` - NEMA 15-60R * `nema-l1-15r` - NEMA L1-15R * `nema-l5-15r` - NEMA L5-15R * `nema-l5-20r` - NEMA L5-20R * `nema-l5-30r` - NEMA L5-30R * `nema-l5-50r` - NEMA L5-50R * `nema-l6-15r` - NEMA L6-15R * `nema-l6-20r` - NEMA L6-20R * `nema-l6-30r` - NEMA L6-30R * `nema-l6-50r` - NEMA L6-50R * `nema-l10-30r` - NEMA L10-30R * `nema-l14-20r` - NEMA L14-20R * `nema-l14-30r` - NEMA L14-30R * `nema-l14-50r` - NEMA L14-50R * `nema-l14-60r` - NEMA L14-60R * `nema-l15-20r` - NEMA L15-20R * `nema-l15-30r` - NEMA L15-30R * `nema-l15-50r` - NEMA L15-50R * `nema-l15-60r` - NEMA L15-60R * `nema-l21-20r` - NEMA L21-20R * `nema-l21-30r` - NEMA L21-30R * `nema-l22-20r` - NEMA L22-20R * `nema-l22-30r` - NEMA L22-30R * `CS6360C` - CS6360C * `CS6364C` - CS6364C * `CS8164C` - CS8164C * `CS8264C` - CS8264C * `CS8364C` - CS8364C * `CS8464C` - CS8464C * `ita-e` - ITA Type E (CEE 7/5) * `ita-f` - ITA Type F (CEE 7/3) * `ita-g` - ITA Type G (BS 1363) * `ita-h` - ITA Type H * `ita-i` - ITA Type I * `ita-j` - ITA Type J * `ita-k` - ITA Type K * `ita-l` - ITA Type L (CEI 23-50) * `ita-m` - ITA Type M (BS 546) * `ita-n` - ITA Type N * `ita-o` - ITA Type O * `ita-multistandard` - ITA Multistandard * `usb-a` - USB Type A * `usb-micro-b` - USB Micro B * `usb-c` - USB Type C * `molex-micro-fit-1x2` - Molex Micro-Fit 1x2 * `molex-micro-fit-2x2` - Molex Micro-Fit 2x2 * `molex-micro-fit-2x4` - Molex Micro-Fit 2x4 * `dc-terminal` - DC Terminal * `hdot-cx` - HDOT Cx * `saf-d-grid` - Saf-D-Grid * `neutrik-powercon-20a` - Neutrik powerCON (20A) * `neutrik-powercon-32a` - Neutrik powerCON (32A) * `neutrik-powercon-true1` - Neutrik powerCON TRUE1 * `neutrik-powercon-true1-top` - Neutrik powerCON TRUE1 TOP * `ubiquiti-smartpower` - Ubiquiti SmartPower * `hardwired` - Hardwired * `other` - Other
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $allowedValues = $this->getValueAllowableValues();
        if (!in_array($value, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'value', must be one of '%s'",
                    $value,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $allowedValues = $this->getLabelAllowableValues();
        if (!in_array($label, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'label', must be one of '%s'",
                    $label,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['label'] = $label;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


