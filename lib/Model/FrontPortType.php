<?php
/**
 * FrontPortType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.8 (4.0)
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FrontPortType Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FrontPortType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FrontPort_type';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'value' => 'string',
        'label' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'value' => null,
        'label' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'value' => false,
        'label' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'value' => 'value',
        'label' => 'label'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'value' => 'setValue',
        'label' => 'setLabel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'value' => 'getValue',
        'label' => 'getLabel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const VALUE__8P8C = '8p8c';
    public const VALUE__8P6C = '8p6c';
    public const VALUE__8P4C = '8p4c';
    public const VALUE__8P2C = '8p2c';
    public const VALUE__6P6C = '6p6c';
    public const VALUE__6P4C = '6p4c';
    public const VALUE__6P2C = '6p2c';
    public const VALUE__4P4C = '4p4c';
    public const VALUE__4P2C = '4p2c';
    public const VALUE_GG45 = 'gg45';
    public const VALUE_TERA_4P = 'tera-4p';
    public const VALUE_TERA_2P = 'tera-2p';
    public const VALUE_TERA_1P = 'tera-1p';
    public const VALUE__110_PUNCH = '110-punch';
    public const VALUE_BNC = 'bnc';
    public const VALUE_F = 'f';
    public const VALUE_N = 'n';
    public const VALUE_MRJ21 = 'mrj21';
    public const VALUE_FC = 'fc';
    public const VALUE_LC = 'lc';
    public const VALUE_LC_PC = 'lc-pc';
    public const VALUE_LC_UPC = 'lc-upc';
    public const VALUE_LC_APC = 'lc-apc';
    public const VALUE_LSH = 'lsh';
    public const VALUE_LSH_PC = 'lsh-pc';
    public const VALUE_LSH_UPC = 'lsh-upc';
    public const VALUE_LSH_APC = 'lsh-apc';
    public const VALUE_LX5 = 'lx5';
    public const VALUE_LX5_PC = 'lx5-pc';
    public const VALUE_LX5_UPC = 'lx5-upc';
    public const VALUE_LX5_APC = 'lx5-apc';
    public const VALUE_MPO = 'mpo';
    public const VALUE_MTRJ = 'mtrj';
    public const VALUE_SC = 'sc';
    public const VALUE_SC_PC = 'sc-pc';
    public const VALUE_SC_UPC = 'sc-upc';
    public const VALUE_SC_APC = 'sc-apc';
    public const VALUE_ST = 'st';
    public const VALUE_CS = 'cs';
    public const VALUE_SN = 'sn';
    public const VALUE_SMA_905 = 'sma-905';
    public const VALUE_SMA_906 = 'sma-906';
    public const VALUE_URM_P2 = 'urm-p2';
    public const VALUE_URM_P4 = 'urm-p4';
    public const VALUE_URM_P8 = 'urm-p8';
    public const VALUE_SPLICE = 'splice';
    public const VALUE_OTHER = 'other';
    public const LABEL__8_P8_C = '8P8C';
    public const LABEL__8_P6_C = '8P6C';
    public const LABEL__8_P4_C = '8P4C';
    public const LABEL__8_P2_C = '8P2C';
    public const LABEL__6_P6_C = '6P6C';
    public const LABEL__6_P4_C = '6P4C';
    public const LABEL__6_P2_C = '6P2C';
    public const LABEL__4_P4_C = '4P4C';
    public const LABEL__4_P2_C = '4P2C';
    public const LABEL_GG45 = 'GG45';
    public const LABEL_TERA_4_P = 'TERA 4P';
    public const LABEL_TERA_2_P = 'TERA 2P';
    public const LABEL_TERA_1_P = 'TERA 1P';
    public const LABEL__110_PUNCH = '110 Punch';
    public const LABEL_BNC = 'BNC';
    public const LABEL_F_CONNECTOR = 'F Connector';
    public const LABEL_N_CONNECTOR = 'N Connector';
    public const LABEL_MRJ21 = 'MRJ21';
    public const LABEL_FC = 'FC';
    public const LABEL_LC = 'LC';
    public const LABEL_LC_PC = 'LC/PC';
    public const LABEL_LC_UPC = 'LC/UPC';
    public const LABEL_LC_APC = 'LC/APC';
    public const LABEL_LSH = 'LSH';
    public const LABEL_LSH_PC = 'LSH/PC';
    public const LABEL_LSH_UPC = 'LSH/UPC';
    public const LABEL_LSH_APC = 'LSH/APC';
    public const LABEL_LX_5 = 'LX.5';
    public const LABEL_LX_5_PC = 'LX.5/PC';
    public const LABEL_LX_5_UPC = 'LX.5/UPC';
    public const LABEL_LX_5_APC = 'LX.5/APC';
    public const LABEL_MPO = 'MPO';
    public const LABEL_MTRJ = 'MTRJ';
    public const LABEL_SC = 'SC';
    public const LABEL_SC_PC = 'SC/PC';
    public const LABEL_SC_UPC = 'SC/UPC';
    public const LABEL_SC_APC = 'SC/APC';
    public const LABEL_ST = 'ST';
    public const LABEL_CS = 'CS';
    public const LABEL_SN = 'SN';
    public const LABEL_SMA_905 = 'SMA 905';
    public const LABEL_SMA_906 = 'SMA 906';
    public const LABEL_URM_P2 = 'URM-P2';
    public const LABEL_URM_P4 = 'URM-P4';
    public const LABEL_URM_P8 = 'URM-P8';
    public const LABEL_SPLICE = 'Splice';
    public const LABEL_OTHER = 'Other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValueAllowableValues()
    {
        return [
            self::VALUE__8P8C,
            self::VALUE__8P6C,
            self::VALUE__8P4C,
            self::VALUE__8P2C,
            self::VALUE__6P6C,
            self::VALUE__6P4C,
            self::VALUE__6P2C,
            self::VALUE__4P4C,
            self::VALUE__4P2C,
            self::VALUE_GG45,
            self::VALUE_TERA_4P,
            self::VALUE_TERA_2P,
            self::VALUE_TERA_1P,
            self::VALUE__110_PUNCH,
            self::VALUE_BNC,
            self::VALUE_F,
            self::VALUE_N,
            self::VALUE_MRJ21,
            self::VALUE_FC,
            self::VALUE_LC,
            self::VALUE_LC_PC,
            self::VALUE_LC_UPC,
            self::VALUE_LC_APC,
            self::VALUE_LSH,
            self::VALUE_LSH_PC,
            self::VALUE_LSH_UPC,
            self::VALUE_LSH_APC,
            self::VALUE_LX5,
            self::VALUE_LX5_PC,
            self::VALUE_LX5_UPC,
            self::VALUE_LX5_APC,
            self::VALUE_MPO,
            self::VALUE_MTRJ,
            self::VALUE_SC,
            self::VALUE_SC_PC,
            self::VALUE_SC_UPC,
            self::VALUE_SC_APC,
            self::VALUE_ST,
            self::VALUE_CS,
            self::VALUE_SN,
            self::VALUE_SMA_905,
            self::VALUE_SMA_906,
            self::VALUE_URM_P2,
            self::VALUE_URM_P4,
            self::VALUE_URM_P8,
            self::VALUE_SPLICE,
            self::VALUE_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelAllowableValues()
    {
        return [
            self::LABEL__8_P8_C,
            self::LABEL__8_P6_C,
            self::LABEL__8_P4_C,
            self::LABEL__8_P2_C,
            self::LABEL__6_P6_C,
            self::LABEL__6_P4_C,
            self::LABEL__6_P2_C,
            self::LABEL__4_P4_C,
            self::LABEL__4_P2_C,
            self::LABEL_GG45,
            self::LABEL_TERA_4_P,
            self::LABEL_TERA_2_P,
            self::LABEL_TERA_1_P,
            self::LABEL__110_PUNCH,
            self::LABEL_BNC,
            self::LABEL_F_CONNECTOR,
            self::LABEL_N_CONNECTOR,
            self::LABEL_MRJ21,
            self::LABEL_FC,
            self::LABEL_LC,
            self::LABEL_LC_PC,
            self::LABEL_LC_UPC,
            self::LABEL_LC_APC,
            self::LABEL_LSH,
            self::LABEL_LSH_PC,
            self::LABEL_LSH_UPC,
            self::LABEL_LSH_APC,
            self::LABEL_LX_5,
            self::LABEL_LX_5_PC,
            self::LABEL_LX_5_UPC,
            self::LABEL_LX_5_APC,
            self::LABEL_MPO,
            self::LABEL_MTRJ,
            self::LABEL_SC,
            self::LABEL_SC_PC,
            self::LABEL_SC_UPC,
            self::LABEL_SC_APC,
            self::LABEL_ST,
            self::LABEL_CS,
            self::LABEL_SN,
            self::LABEL_SMA_905,
            self::LABEL_SMA_906,
            self::LABEL_URM_P2,
            self::LABEL_URM_P4,
            self::LABEL_URM_P8,
            self::LABEL_SPLICE,
            self::LABEL_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getValueAllowableValues();
        if (!is_null($this->container['value']) && !in_array($this->container['value'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'value', must be one of '%s'",
                $this->container['value'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLabelAllowableValues();
        if (!is_null($this->container['label']) && !in_array($this->container['label'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'label', must be one of '%s'",
                $this->container['label'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value * `8p8c` - 8P8C * `8p6c` - 8P6C * `8p4c` - 8P4C * `8p2c` - 8P2C * `6p6c` - 6P6C * `6p4c` - 6P4C * `6p2c` - 6P2C * `4p4c` - 4P4C * `4p2c` - 4P2C * `gg45` - GG45 * `tera-4p` - TERA 4P * `tera-2p` - TERA 2P * `tera-1p` - TERA 1P * `110-punch` - 110 Punch * `bnc` - BNC * `f` - F Connector * `n` - N Connector * `mrj21` - MRJ21 * `fc` - FC * `lc` - LC * `lc-pc` - LC/PC * `lc-upc` - LC/UPC * `lc-apc` - LC/APC * `lsh` - LSH * `lsh-pc` - LSH/PC * `lsh-upc` - LSH/UPC * `lsh-apc` - LSH/APC * `lx5` - LX.5 * `lx5-pc` - LX.5/PC * `lx5-upc` - LX.5/UPC * `lx5-apc` - LX.5/APC * `mpo` - MPO * `mtrj` - MTRJ * `sc` - SC * `sc-pc` - SC/PC * `sc-upc` - SC/UPC * `sc-apc` - SC/APC * `st` - ST * `cs` - CS * `sn` - SN * `sma-905` - SMA 905 * `sma-906` - SMA 906 * `urm-p2` - URM-P2 * `urm-p4` - URM-P4 * `urm-p8` - URM-P8 * `splice` - Splice * `other` - Other
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $allowedValues = $this->getValueAllowableValues();
        if (!in_array($value, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'value', must be one of '%s'",
                    $value,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $allowedValues = $this->getLabelAllowableValues();
        if (!in_array($label, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'label', must be one of '%s'",
                    $label,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['label'] = $label;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


