<?php
/**
 * WritableRackRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1.1 (4.1)
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WritableRackRequest Class Doc Comment
 *
 * @category Class
 * @description Adds support for custom fields and tags.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WritableRackRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WritableRackRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'facility_id' => 'string',
        'site' => '\OpenAPI\Client\Model\BriefSiteRequest',
        'location' => '\OpenAPI\Client\Model\BriefLocationRequest',
        'tenant' => '\OpenAPI\Client\Model\BriefTenantRequest',
        'status' => 'string',
        'role' => '\OpenAPI\Client\Model\BriefRackRoleRequest',
        'serial' => 'string',
        'asset_tag' => 'string',
        'rack_type' => '\OpenAPI\Client\Model\BriefRackTypeRequest',
        'form_factor' => 'string',
        'width' => 'int',
        'u_height' => 'int',
        'starting_unit' => 'int',
        'weight' => 'float',
        'max_weight' => 'int',
        'weight_unit' => 'string',
        'desc_units' => 'bool',
        'outer_width' => 'int',
        'outer_depth' => 'int',
        'outer_unit' => 'string',
        'mounting_depth' => 'int',
        'airflow' => 'string',
        'description' => 'string',
        'comments' => 'string',
        'tags' => '\OpenAPI\Client\Model\NestedTagRequest[]',
        'custom_fields' => 'array<string,mixed>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'facility_id' => null,
        'site' => null,
        'location' => null,
        'tenant' => null,
        'status' => null,
        'role' => null,
        'serial' => null,
        'asset_tag' => null,
        'rack_type' => null,
        'form_factor' => null,
        'width' => null,
        'u_height' => null,
        'starting_unit' => null,
        'weight' => 'double',
        'max_weight' => null,
        'weight_unit' => null,
        'desc_units' => null,
        'outer_width' => null,
        'outer_depth' => null,
        'outer_unit' => null,
        'mounting_depth' => null,
        'airflow' => null,
        'description' => null,
        'comments' => null,
        'tags' => null,
        'custom_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'facility_id' => true,
        'site' => false,
        'location' => true,
        'tenant' => true,
        'status' => false,
        'role' => true,
        'serial' => false,
        'asset_tag' => true,
        'rack_type' => true,
        'form_factor' => false,
        'width' => false,
        'u_height' => false,
        'starting_unit' => false,
        'weight' => true,
        'max_weight' => true,
        'weight_unit' => false,
        'desc_units' => false,
        'outer_width' => true,
        'outer_depth' => true,
        'outer_unit' => false,
        'mounting_depth' => true,
        'airflow' => false,
        'description' => false,
        'comments' => false,
        'tags' => false,
        'custom_fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'facility_id' => 'facility_id',
        'site' => 'site',
        'location' => 'location',
        'tenant' => 'tenant',
        'status' => 'status',
        'role' => 'role',
        'serial' => 'serial',
        'asset_tag' => 'asset_tag',
        'rack_type' => 'rack_type',
        'form_factor' => 'form_factor',
        'width' => 'width',
        'u_height' => 'u_height',
        'starting_unit' => 'starting_unit',
        'weight' => 'weight',
        'max_weight' => 'max_weight',
        'weight_unit' => 'weight_unit',
        'desc_units' => 'desc_units',
        'outer_width' => 'outer_width',
        'outer_depth' => 'outer_depth',
        'outer_unit' => 'outer_unit',
        'mounting_depth' => 'mounting_depth',
        'airflow' => 'airflow',
        'description' => 'description',
        'comments' => 'comments',
        'tags' => 'tags',
        'custom_fields' => 'custom_fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'facility_id' => 'setFacilityId',
        'site' => 'setSite',
        'location' => 'setLocation',
        'tenant' => 'setTenant',
        'status' => 'setStatus',
        'role' => 'setRole',
        'serial' => 'setSerial',
        'asset_tag' => 'setAssetTag',
        'rack_type' => 'setRackType',
        'form_factor' => 'setFormFactor',
        'width' => 'setWidth',
        'u_height' => 'setUHeight',
        'starting_unit' => 'setStartingUnit',
        'weight' => 'setWeight',
        'max_weight' => 'setMaxWeight',
        'weight_unit' => 'setWeightUnit',
        'desc_units' => 'setDescUnits',
        'outer_width' => 'setOuterWidth',
        'outer_depth' => 'setOuterDepth',
        'outer_unit' => 'setOuterUnit',
        'mounting_depth' => 'setMountingDepth',
        'airflow' => 'setAirflow',
        'description' => 'setDescription',
        'comments' => 'setComments',
        'tags' => 'setTags',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'facility_id' => 'getFacilityId',
        'site' => 'getSite',
        'location' => 'getLocation',
        'tenant' => 'getTenant',
        'status' => 'getStatus',
        'role' => 'getRole',
        'serial' => 'getSerial',
        'asset_tag' => 'getAssetTag',
        'rack_type' => 'getRackType',
        'form_factor' => 'getFormFactor',
        'width' => 'getWidth',
        'u_height' => 'getUHeight',
        'starting_unit' => 'getStartingUnit',
        'weight' => 'getWeight',
        'max_weight' => 'getMaxWeight',
        'weight_unit' => 'getWeightUnit',
        'desc_units' => 'getDescUnits',
        'outer_width' => 'getOuterWidth',
        'outer_depth' => 'getOuterDepth',
        'outer_unit' => 'getOuterUnit',
        'mounting_depth' => 'getMountingDepth',
        'airflow' => 'getAirflow',
        'description' => 'getDescription',
        'comments' => 'getComments',
        'tags' => 'getTags',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_RESERVED = 'reserved';
    public const STATUS_AVAILABLE = 'available';
    public const STATUS_PLANNED = 'planned';
    public const STATUS_ACTIVE = 'active';
    public const STATUS_DEPRECATED = 'deprecated';
    public const FORM_FACTOR__2_POST_FRAME = '2-post-frame';
    public const FORM_FACTOR__4_POST_FRAME = '4-post-frame';
    public const FORM_FACTOR__4_POST_CABINET = '4-post-cabinet';
    public const FORM_FACTOR_WALL_FRAME = 'wall-frame';
    public const FORM_FACTOR_WALL_FRAME_VERTICAL = 'wall-frame-vertical';
    public const FORM_FACTOR_WALL_CABINET = 'wall-cabinet';
    public const FORM_FACTOR_WALL_CABINET_VERTICAL = 'wall-cabinet-vertical';
    public const FORM_FACTOR_EMPTY = '';
    public const WIDTH_10 = 10;
    public const WIDTH_19 = 19;
    public const WIDTH_21 = 21;
    public const WIDTH_23 = 23;
    public const WEIGHT_UNIT_KG = 'kg';
    public const WEIGHT_UNIT_G = 'g';
    public const WEIGHT_UNIT_LB = 'lb';
    public const WEIGHT_UNIT_OZ = 'oz';
    public const WEIGHT_UNIT_EMPTY = '';
    public const OUTER_UNIT_MM = 'mm';
    public const OUTER_UNIT_IN = 'in';
    public const OUTER_UNIT_EMPTY = '';
    public const AIRFLOW_FRONT_TO_REAR = 'front-to-rear';
    public const AIRFLOW_REAR_TO_FRONT = 'rear-to-front';
    public const AIRFLOW_EMPTY = '';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_RESERVED,
            self::STATUS_AVAILABLE,
            self::STATUS_PLANNED,
            self::STATUS_ACTIVE,
            self::STATUS_DEPRECATED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormFactorAllowableValues()
    {
        return [
            self::FORM_FACTOR__2_POST_FRAME,
            self::FORM_FACTOR__4_POST_FRAME,
            self::FORM_FACTOR__4_POST_CABINET,
            self::FORM_FACTOR_WALL_FRAME,
            self::FORM_FACTOR_WALL_FRAME_VERTICAL,
            self::FORM_FACTOR_WALL_CABINET,
            self::FORM_FACTOR_WALL_CABINET_VERTICAL,
            self::FORM_FACTOR_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWidthAllowableValues()
    {
        return [
            self::WIDTH_10,
            self::WIDTH_19,
            self::WIDTH_21,
            self::WIDTH_23,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeightUnitAllowableValues()
    {
        return [
            self::WEIGHT_UNIT_KG,
            self::WEIGHT_UNIT_G,
            self::WEIGHT_UNIT_LB,
            self::WEIGHT_UNIT_OZ,
            self::WEIGHT_UNIT_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOuterUnitAllowableValues()
    {
        return [
            self::OUTER_UNIT_MM,
            self::OUTER_UNIT_IN,
            self::OUTER_UNIT_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAirflowAllowableValues()
    {
        return [
            self::AIRFLOW_FRONT_TO_REAR,
            self::AIRFLOW_REAR_TO_FRONT,
            self::AIRFLOW_EMPTY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('facility_id', $data ?? [], null);
        $this->setIfExists('site', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('tenant', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('serial', $data ?? [], null);
        $this->setIfExists('asset_tag', $data ?? [], null);
        $this->setIfExists('rack_type', $data ?? [], null);
        $this->setIfExists('form_factor', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('u_height', $data ?? [], null);
        $this->setIfExists('starting_unit', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('max_weight', $data ?? [], null);
        $this->setIfExists('weight_unit', $data ?? [], null);
        $this->setIfExists('desc_units', $data ?? [], null);
        $this->setIfExists('outer_width', $data ?? [], null);
        $this->setIfExists('outer_depth', $data ?? [], null);
        $this->setIfExists('outer_unit', $data ?? [], null);
        $this->setIfExists('mounting_depth', $data ?? [], null);
        $this->setIfExists('airflow', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['facility_id']) && (mb_strlen($this->container['facility_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'facility_id', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['site'] === null) {
            $invalidProperties[] = "'site' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['serial']) && (mb_strlen($this->container['serial']) > 50)) {
            $invalidProperties[] = "invalid value for 'serial', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['asset_tag']) && (mb_strlen($this->container['asset_tag']) > 50)) {
            $invalidProperties[] = "invalid value for 'asset_tag', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getFormFactorAllowableValues();
        if (!is_null($this->container['form_factor']) && !in_array($this->container['form_factor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'form_factor', must be one of '%s'",
                $this->container['form_factor'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWidthAllowableValues();
        if (!is_null($this->container['width']) && !in_array($this->container['width'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'width', must be one of '%s'",
                $this->container['width'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['width']) && ($this->container['width'] > 32767)) {
            $invalidProperties[] = "invalid value for 'width', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['width']) && ($this->container['width'] < 0)) {
            $invalidProperties[] = "invalid value for 'width', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['u_height']) && ($this->container['u_height'] > 100)) {
            $invalidProperties[] = "invalid value for 'u_height', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['u_height']) && ($this->container['u_height'] < 1)) {
            $invalidProperties[] = "invalid value for 'u_height', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['starting_unit']) && ($this->container['starting_unit'] > 32767)) {
            $invalidProperties[] = "invalid value for 'starting_unit', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['starting_unit']) && ($this->container['starting_unit'] < 1)) {
            $invalidProperties[] = "invalid value for 'starting_unit', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] >= 1000000)) {
            $invalidProperties[] = "invalid value for 'weight', must be smaller than 1000000.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] <= -1000000)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than -1000000.";
        }

        if (!is_null($this->container['max_weight']) && ($this->container['max_weight'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'max_weight', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['max_weight']) && ($this->container['max_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_weight', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getWeightUnitAllowableValues();
        if (!is_null($this->container['weight_unit']) && !in_array($this->container['weight_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'weight_unit', must be one of '%s'",
                $this->container['weight_unit'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['outer_width']) && ($this->container['outer_width'] > 32767)) {
            $invalidProperties[] = "invalid value for 'outer_width', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['outer_width']) && ($this->container['outer_width'] < 0)) {
            $invalidProperties[] = "invalid value for 'outer_width', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['outer_depth']) && ($this->container['outer_depth'] > 32767)) {
            $invalidProperties[] = "invalid value for 'outer_depth', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['outer_depth']) && ($this->container['outer_depth'] < 0)) {
            $invalidProperties[] = "invalid value for 'outer_depth', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getOuterUnitAllowableValues();
        if (!is_null($this->container['outer_unit']) && !in_array($this->container['outer_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'outer_unit', must be one of '%s'",
                $this->container['outer_unit'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mounting_depth']) && ($this->container['mounting_depth'] > 32767)) {
            $invalidProperties[] = "invalid value for 'mounting_depth', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['mounting_depth']) && ($this->container['mounting_depth'] < 0)) {
            $invalidProperties[] = "invalid value for 'mounting_depth', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAirflowAllowableValues();
        if (!is_null($this->container['airflow']) && !in_array($this->container['airflow'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'airflow', must be one of '%s'",
                $this->container['airflow'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 200)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 200.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling WritableRackRequest., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling WritableRackRequest., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets facility_id
     *
     * @return string|null
     */
    public function getFacilityId()
    {
        return $this->container['facility_id'];
    }

    /**
     * Sets facility_id
     *
     * @param string|null $facility_id facility_id
     *
     * @return self
     */
    public function setFacilityId($facility_id)
    {
        if (is_null($facility_id)) {
            array_push($this->openAPINullablesSetToNull, 'facility_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facility_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($facility_id) && (mb_strlen($facility_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $facility_id when calling WritableRackRequest., must be smaller than or equal to 50.');
        }

        $this->container['facility_id'] = $facility_id;

        return $this;
    }

    /**
     * Gets site
     *
     * @return \OpenAPI\Client\Model\BriefSiteRequest
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \OpenAPI\Client\Model\BriefSiteRequest $site site
     *
     * @return self
     */
    public function setSite($site)
    {
        if (is_null($site)) {
            throw new \InvalidArgumentException('non-nullable site cannot be null');
        }
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \OpenAPI\Client\Model\BriefLocationRequest|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \OpenAPI\Client\Model\BriefLocationRequest|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets tenant
     *
     * @return \OpenAPI\Client\Model\BriefTenantRequest|null
     */
    public function getTenant()
    {
        return $this->container['tenant'];
    }

    /**
     * Sets tenant
     *
     * @param \OpenAPI\Client\Model\BriefTenantRequest|null $tenant tenant
     *
     * @return self
     */
    public function setTenant($tenant)
    {
        if (is_null($tenant)) {
            array_push($this->openAPINullablesSetToNull, 'tenant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tenant'] = $tenant;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status * `reserved` - Reserved * `available` - Available * `planned` - Planned * `active` - Active * `deprecated` - Deprecated
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets role
     *
     * @return \OpenAPI\Client\Model\BriefRackRoleRequest|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param \OpenAPI\Client\Model\BriefRackRoleRequest|null $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            array_push($this->openAPINullablesSetToNull, 'role');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('role', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets serial
     *
     * @return string|null
     */
    public function getSerial()
    {
        return $this->container['serial'];
    }

    /**
     * Sets serial
     *
     * @param string|null $serial serial
     *
     * @return self
     */
    public function setSerial($serial)
    {
        if (is_null($serial)) {
            throw new \InvalidArgumentException('non-nullable serial cannot be null');
        }
        if ((mb_strlen($serial) > 50)) {
            throw new \InvalidArgumentException('invalid length for $serial when calling WritableRackRequest., must be smaller than or equal to 50.');
        }

        $this->container['serial'] = $serial;

        return $this;
    }

    /**
     * Gets asset_tag
     *
     * @return string|null
     */
    public function getAssetTag()
    {
        return $this->container['asset_tag'];
    }

    /**
     * Sets asset_tag
     *
     * @param string|null $asset_tag A unique tag used to identify this rack
     *
     * @return self
     */
    public function setAssetTag($asset_tag)
    {
        if (is_null($asset_tag)) {
            array_push($this->openAPINullablesSetToNull, 'asset_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($asset_tag) && (mb_strlen($asset_tag) > 50)) {
            throw new \InvalidArgumentException('invalid length for $asset_tag when calling WritableRackRequest., must be smaller than or equal to 50.');
        }

        $this->container['asset_tag'] = $asset_tag;

        return $this;
    }

    /**
     * Gets rack_type
     *
     * @return \OpenAPI\Client\Model\BriefRackTypeRequest|null
     */
    public function getRackType()
    {
        return $this->container['rack_type'];
    }

    /**
     * Sets rack_type
     *
     * @param \OpenAPI\Client\Model\BriefRackTypeRequest|null $rack_type rack_type
     *
     * @return self
     */
    public function setRackType($rack_type)
    {
        if (is_null($rack_type)) {
            array_push($this->openAPINullablesSetToNull, 'rack_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rack_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rack_type'] = $rack_type;

        return $this;
    }

    /**
     * Gets form_factor
     *
     * @return string|null
     */
    public function getFormFactor()
    {
        return $this->container['form_factor'];
    }

    /**
     * Sets form_factor
     *
     * @param string|null $form_factor * `2-post-frame` - 2-post frame * `4-post-frame` - 4-post frame * `4-post-cabinet` - 4-post cabinet * `wall-frame` - Wall-mounted frame * `wall-frame-vertical` - Wall-mounted frame (vertical) * `wall-cabinet` - Wall-mounted cabinet * `wall-cabinet-vertical` - Wall-mounted cabinet (vertical)
     *
     * @return self
     */
    public function setFormFactor($form_factor)
    {
        if (is_null($form_factor)) {
            throw new \InvalidArgumentException('non-nullable form_factor cannot be null');
        }
        $allowedValues = $this->getFormFactorAllowableValues();
        if (!in_array($form_factor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'form_factor', must be one of '%s'",
                    $form_factor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['form_factor'] = $form_factor;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width Rail-to-rail width  * `10` - 10 inches * `19` - 19 inches * `21` - 21 inches * `23` - 23 inches
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $allowedValues = $this->getWidthAllowableValues();
        if (!in_array($width, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'width', must be one of '%s'",
                    $width,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (($width > 32767)) {
            throw new \InvalidArgumentException('invalid value for $width when calling WritableRackRequest., must be smaller than or equal to 32767.');
        }
        if (($width < 0)) {
            throw new \InvalidArgumentException('invalid value for $width when calling WritableRackRequest., must be bigger than or equal to 0.');
        }

        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets u_height
     *
     * @return int|null
     */
    public function getUHeight()
    {
        return $this->container['u_height'];
    }

    /**
     * Sets u_height
     *
     * @param int|null $u_height Height in rack units
     *
     * @return self
     */
    public function setUHeight($u_height)
    {
        if (is_null($u_height)) {
            throw new \InvalidArgumentException('non-nullable u_height cannot be null');
        }

        if (($u_height > 100)) {
            throw new \InvalidArgumentException('invalid value for $u_height when calling WritableRackRequest., must be smaller than or equal to 100.');
        }
        if (($u_height < 1)) {
            throw new \InvalidArgumentException('invalid value for $u_height when calling WritableRackRequest., must be bigger than or equal to 1.');
        }

        $this->container['u_height'] = $u_height;

        return $this;
    }

    /**
     * Gets starting_unit
     *
     * @return int|null
     */
    public function getStartingUnit()
    {
        return $this->container['starting_unit'];
    }

    /**
     * Sets starting_unit
     *
     * @param int|null $starting_unit Starting unit for rack
     *
     * @return self
     */
    public function setStartingUnit($starting_unit)
    {
        if (is_null($starting_unit)) {
            throw new \InvalidArgumentException('non-nullable starting_unit cannot be null');
        }

        if (($starting_unit > 32767)) {
            throw new \InvalidArgumentException('invalid value for $starting_unit when calling WritableRackRequest., must be smaller than or equal to 32767.');
        }
        if (($starting_unit < 1)) {
            throw new \InvalidArgumentException('invalid value for $starting_unit when calling WritableRackRequest., must be bigger than or equal to 1.');
        }

        $this->container['starting_unit'] = $starting_unit;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            array_push($this->openAPINullablesSetToNull, 'weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($weight) && ($weight >= 1000000)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling WritableRackRequest., must be smaller than 1000000.');
        }
        if (!is_null($weight) && ($weight <= -1000000)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling WritableRackRequest., must be bigger than -1000000.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets max_weight
     *
     * @return int|null
     */
    public function getMaxWeight()
    {
        return $this->container['max_weight'];
    }

    /**
     * Sets max_weight
     *
     * @param int|null $max_weight Maximum load capacity for the rack
     *
     * @return self
     */
    public function setMaxWeight($max_weight)
    {
        if (is_null($max_weight)) {
            array_push($this->openAPINullablesSetToNull, 'max_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($max_weight) && ($max_weight > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $max_weight when calling WritableRackRequest., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($max_weight) && ($max_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_weight when calling WritableRackRequest., must be bigger than or equal to 0.');
        }

        $this->container['max_weight'] = $max_weight;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return string|null
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param string|null $weight_unit * `kg` - Kilograms * `g` - Grams * `lb` - Pounds * `oz` - Ounces
     *
     * @return self
     */
    public function setWeightUnit($weight_unit)
    {
        if (is_null($weight_unit)) {
            throw new \InvalidArgumentException('non-nullable weight_unit cannot be null');
        }
        $allowedValues = $this->getWeightUnitAllowableValues();
        if (!in_array($weight_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'weight_unit', must be one of '%s'",
                    $weight_unit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets desc_units
     *
     * @return bool|null
     */
    public function getDescUnits()
    {
        return $this->container['desc_units'];
    }

    /**
     * Sets desc_units
     *
     * @param bool|null $desc_units Units are numbered top-to-bottom
     *
     * @return self
     */
    public function setDescUnits($desc_units)
    {
        if (is_null($desc_units)) {
            throw new \InvalidArgumentException('non-nullable desc_units cannot be null');
        }
        $this->container['desc_units'] = $desc_units;

        return $this;
    }

    /**
     * Gets outer_width
     *
     * @return int|null
     */
    public function getOuterWidth()
    {
        return $this->container['outer_width'];
    }

    /**
     * Sets outer_width
     *
     * @param int|null $outer_width Outer dimension of rack (width)
     *
     * @return self
     */
    public function setOuterWidth($outer_width)
    {
        if (is_null($outer_width)) {
            array_push($this->openAPINullablesSetToNull, 'outer_width');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outer_width', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($outer_width) && ($outer_width > 32767)) {
            throw new \InvalidArgumentException('invalid value for $outer_width when calling WritableRackRequest., must be smaller than or equal to 32767.');
        }
        if (!is_null($outer_width) && ($outer_width < 0)) {
            throw new \InvalidArgumentException('invalid value for $outer_width when calling WritableRackRequest., must be bigger than or equal to 0.');
        }

        $this->container['outer_width'] = $outer_width;

        return $this;
    }

    /**
     * Gets outer_depth
     *
     * @return int|null
     */
    public function getOuterDepth()
    {
        return $this->container['outer_depth'];
    }

    /**
     * Sets outer_depth
     *
     * @param int|null $outer_depth Outer dimension of rack (depth)
     *
     * @return self
     */
    public function setOuterDepth($outer_depth)
    {
        if (is_null($outer_depth)) {
            array_push($this->openAPINullablesSetToNull, 'outer_depth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outer_depth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($outer_depth) && ($outer_depth > 32767)) {
            throw new \InvalidArgumentException('invalid value for $outer_depth when calling WritableRackRequest., must be smaller than or equal to 32767.');
        }
        if (!is_null($outer_depth) && ($outer_depth < 0)) {
            throw new \InvalidArgumentException('invalid value for $outer_depth when calling WritableRackRequest., must be bigger than or equal to 0.');
        }

        $this->container['outer_depth'] = $outer_depth;

        return $this;
    }

    /**
     * Gets outer_unit
     *
     * @return string|null
     */
    public function getOuterUnit()
    {
        return $this->container['outer_unit'];
    }

    /**
     * Sets outer_unit
     *
     * @param string|null $outer_unit * `mm` - Millimeters * `in` - Inches
     *
     * @return self
     */
    public function setOuterUnit($outer_unit)
    {
        if (is_null($outer_unit)) {
            throw new \InvalidArgumentException('non-nullable outer_unit cannot be null');
        }
        $allowedValues = $this->getOuterUnitAllowableValues();
        if (!in_array($outer_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'outer_unit', must be one of '%s'",
                    $outer_unit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['outer_unit'] = $outer_unit;

        return $this;
    }

    /**
     * Gets mounting_depth
     *
     * @return int|null
     */
    public function getMountingDepth()
    {
        return $this->container['mounting_depth'];
    }

    /**
     * Sets mounting_depth
     *
     * @param int|null $mounting_depth Maximum depth of a mounted device, in millimeters. For four-post racks, this is the distance between the front and rear rails.
     *
     * @return self
     */
    public function setMountingDepth($mounting_depth)
    {
        if (is_null($mounting_depth)) {
            array_push($this->openAPINullablesSetToNull, 'mounting_depth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mounting_depth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($mounting_depth) && ($mounting_depth > 32767)) {
            throw new \InvalidArgumentException('invalid value for $mounting_depth when calling WritableRackRequest., must be smaller than or equal to 32767.');
        }
        if (!is_null($mounting_depth) && ($mounting_depth < 0)) {
            throw new \InvalidArgumentException('invalid value for $mounting_depth when calling WritableRackRequest., must be bigger than or equal to 0.');
        }

        $this->container['mounting_depth'] = $mounting_depth;

        return $this;
    }

    /**
     * Gets airflow
     *
     * @return string|null
     */
    public function getAirflow()
    {
        return $this->container['airflow'];
    }

    /**
     * Sets airflow
     *
     * @param string|null $airflow * `front-to-rear` - Front to rear * `rear-to-front` - Rear to front
     *
     * @return self
     */
    public function setAirflow($airflow)
    {
        if (is_null($airflow)) {
            throw new \InvalidArgumentException('non-nullable airflow cannot be null');
        }
        $allowedValues = $this->getAirflowAllowableValues();
        if (!in_array($airflow, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'airflow', must be one of '%s'",
                    $airflow,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['airflow'] = $airflow;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 200)) {
            throw new \InvalidArgumentException('invalid length for $description when calling WritableRackRequest., must be smaller than or equal to 200.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\NestedTagRequest[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\NestedTagRequest[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return array<string,mixed>|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param array<string,mixed>|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


