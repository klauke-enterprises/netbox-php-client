<?php
/**
 * CircuitCircuitTerminationRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1.1 (4.1)
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CircuitCircuitTerminationRequest Class Doc Comment
 *
 * @category Class
 * @description Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a dictionary of attributes which can be used to uniquely identify the related object. This class should be subclassed to return a full representation of the related object on read.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CircuitCircuitTerminationRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CircuitCircuitTerminationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'site' => '\OpenAPI\Client\Model\BriefSiteRequest',
        'provider_network' => '\OpenAPI\Client\Model\BriefProviderNetworkRequest',
        'port_speed' => 'int',
        'upstream_speed' => 'int',
        'xconnect_id' => 'string',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'site' => null,
        'provider_network' => null,
        'port_speed' => null,
        'upstream_speed' => null,
        'xconnect_id' => null,
        'description' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'site' => true,
        'provider_network' => true,
        'port_speed' => true,
        'upstream_speed' => true,
        'xconnect_id' => false,
        'description' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'site' => 'site',
        'provider_network' => 'provider_network',
        'port_speed' => 'port_speed',
        'upstream_speed' => 'upstream_speed',
        'xconnect_id' => 'xconnect_id',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'site' => 'setSite',
        'provider_network' => 'setProviderNetwork',
        'port_speed' => 'setPortSpeed',
        'upstream_speed' => 'setUpstreamSpeed',
        'xconnect_id' => 'setXconnectId',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'site' => 'getSite',
        'provider_network' => 'getProviderNetwork',
        'port_speed' => 'getPortSpeed',
        'upstream_speed' => 'getUpstreamSpeed',
        'xconnect_id' => 'getXconnectId',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('site', $data ?? [], null);
        $this->setIfExists('provider_network', $data ?? [], null);
        $this->setIfExists('port_speed', $data ?? [], null);
        $this->setIfExists('upstream_speed', $data ?? [], null);
        $this->setIfExists('xconnect_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['site'] === null) {
            $invalidProperties[] = "'site' can't be null";
        }
        if ($this->container['provider_network'] === null) {
            $invalidProperties[] = "'provider_network' can't be null";
        }
        if (!is_null($this->container['port_speed']) && ($this->container['port_speed'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'port_speed', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['port_speed']) && ($this->container['port_speed'] < 0)) {
            $invalidProperties[] = "invalid value for 'port_speed', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['upstream_speed']) && ($this->container['upstream_speed'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'upstream_speed', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['upstream_speed']) && ($this->container['upstream_speed'] < 0)) {
            $invalidProperties[] = "invalid value for 'upstream_speed', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['xconnect_id']) && (mb_strlen($this->container['xconnect_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'xconnect_id', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 200)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 200.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets site
     *
     * @return \OpenAPI\Client\Model\BriefSiteRequest
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \OpenAPI\Client\Model\BriefSiteRequest $site site
     *
     * @return self
     */
    public function setSite($site)
    {
        if (is_null($site)) {
            array_push($this->openAPINullablesSetToNull, 'site');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('site', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets provider_network
     *
     * @return \OpenAPI\Client\Model\BriefProviderNetworkRequest
     */
    public function getProviderNetwork()
    {
        return $this->container['provider_network'];
    }

    /**
     * Sets provider_network
     *
     * @param \OpenAPI\Client\Model\BriefProviderNetworkRequest $provider_network provider_network
     *
     * @return self
     */
    public function setProviderNetwork($provider_network)
    {
        if (is_null($provider_network)) {
            array_push($this->openAPINullablesSetToNull, 'provider_network');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_network', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_network'] = $provider_network;

        return $this;
    }

    /**
     * Gets port_speed
     *
     * @return int|null
     */
    public function getPortSpeed()
    {
        return $this->container['port_speed'];
    }

    /**
     * Sets port_speed
     *
     * @param int|null $port_speed Physical circuit speed
     *
     * @return self
     */
    public function setPortSpeed($port_speed)
    {
        if (is_null($port_speed)) {
            array_push($this->openAPINullablesSetToNull, 'port_speed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('port_speed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($port_speed) && ($port_speed > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $port_speed when calling CircuitCircuitTerminationRequest., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($port_speed) && ($port_speed < 0)) {
            throw new \InvalidArgumentException('invalid value for $port_speed when calling CircuitCircuitTerminationRequest., must be bigger than or equal to 0.');
        }

        $this->container['port_speed'] = $port_speed;

        return $this;
    }

    /**
     * Gets upstream_speed
     *
     * @return int|null
     */
    public function getUpstreamSpeed()
    {
        return $this->container['upstream_speed'];
    }

    /**
     * Sets upstream_speed
     *
     * @param int|null $upstream_speed Upstream speed, if different from port speed
     *
     * @return self
     */
    public function setUpstreamSpeed($upstream_speed)
    {
        if (is_null($upstream_speed)) {
            array_push($this->openAPINullablesSetToNull, 'upstream_speed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upstream_speed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($upstream_speed) && ($upstream_speed > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $upstream_speed when calling CircuitCircuitTerminationRequest., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($upstream_speed) && ($upstream_speed < 0)) {
            throw new \InvalidArgumentException('invalid value for $upstream_speed when calling CircuitCircuitTerminationRequest., must be bigger than or equal to 0.');
        }

        $this->container['upstream_speed'] = $upstream_speed;

        return $this;
    }

    /**
     * Gets xconnect_id
     *
     * @return string|null
     */
    public function getXconnectId()
    {
        return $this->container['xconnect_id'];
    }

    /**
     * Sets xconnect_id
     *
     * @param string|null $xconnect_id ID of the local cross-connect
     *
     * @return self
     */
    public function setXconnectId($xconnect_id)
    {
        if (is_null($xconnect_id)) {
            throw new \InvalidArgumentException('non-nullable xconnect_id cannot be null');
        }
        if ((mb_strlen($xconnect_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $xconnect_id when calling CircuitCircuitTerminationRequest., must be smaller than or equal to 50.');
        }

        $this->container['xconnect_id'] = $xconnect_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 200)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CircuitCircuitTerminationRequest., must be smaller than or equal to 200.');
        }

        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


