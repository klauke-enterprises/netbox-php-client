<?php
/**
 * ConfigContext
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.8 (4.0)
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ConfigContext Class Doc Comment
 *
 * @category Class
 * @description Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConfigContext implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConfigContext';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'url' => 'string',
        'display' => 'string',
        'name' => 'string',
        'weight' => 'int',
        'description' => 'string',
        'is_active' => 'bool',
        'regions' => '\OpenAPI\Client\Model\Region[]',
        'site_groups' => '\OpenAPI\Client\Model\SiteGroup[]',
        'sites' => '\OpenAPI\Client\Model\Site[]',
        'locations' => '\OpenAPI\Client\Model\Location[]',
        'device_types' => '\OpenAPI\Client\Model\DeviceType[]',
        'roles' => '\OpenAPI\Client\Model\DeviceRole[]',
        'platforms' => '\OpenAPI\Client\Model\Platform[]',
        'cluster_types' => '\OpenAPI\Client\Model\ClusterType[]',
        'cluster_groups' => '\OpenAPI\Client\Model\ClusterGroup[]',
        'clusters' => '\OpenAPI\Client\Model\Cluster[]',
        'tenant_groups' => '\OpenAPI\Client\Model\TenantGroup[]',
        'tenants' => '\OpenAPI\Client\Model\Tenant[]',
        'tags' => 'string[]',
        'data_source' => '\OpenAPI\Client\Model\DataSource',
        'data_path' => 'string',
        'data_file' => '\OpenAPI\Client\Model\DataFile',
        'data_synced' => '\DateTime',
        'data' => 'mixed',
        'created' => '\DateTime',
        'last_updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'url' => 'uri',
        'display' => null,
        'name' => null,
        'weight' => null,
        'description' => null,
        'is_active' => null,
        'regions' => null,
        'site_groups' => null,
        'sites' => null,
        'locations' => null,
        'device_types' => null,
        'roles' => null,
        'platforms' => null,
        'cluster_types' => null,
        'cluster_groups' => null,
        'clusters' => null,
        'tenant_groups' => null,
        'tenants' => null,
        'tags' => null,
        'data_source' => null,
        'data_path' => null,
        'data_file' => null,
        'data_synced' => 'date-time',
        'data' => null,
        'created' => 'date-time',
        'last_updated' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'url' => false,
        'display' => false,
        'name' => false,
        'weight' => false,
        'description' => false,
        'is_active' => false,
        'regions' => false,
        'site_groups' => false,
        'sites' => false,
        'locations' => false,
        'device_types' => false,
        'roles' => false,
        'platforms' => false,
        'cluster_types' => false,
        'cluster_groups' => false,
        'clusters' => false,
        'tenant_groups' => false,
        'tenants' => false,
        'tags' => false,
        'data_source' => false,
        'data_path' => false,
        'data_file' => false,
        'data_synced' => true,
        'data' => true,
        'created' => true,
        'last_updated' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'url' => 'url',
        'display' => 'display',
        'name' => 'name',
        'weight' => 'weight',
        'description' => 'description',
        'is_active' => 'is_active',
        'regions' => 'regions',
        'site_groups' => 'site_groups',
        'sites' => 'sites',
        'locations' => 'locations',
        'device_types' => 'device_types',
        'roles' => 'roles',
        'platforms' => 'platforms',
        'cluster_types' => 'cluster_types',
        'cluster_groups' => 'cluster_groups',
        'clusters' => 'clusters',
        'tenant_groups' => 'tenant_groups',
        'tenants' => 'tenants',
        'tags' => 'tags',
        'data_source' => 'data_source',
        'data_path' => 'data_path',
        'data_file' => 'data_file',
        'data_synced' => 'data_synced',
        'data' => 'data',
        'created' => 'created',
        'last_updated' => 'last_updated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'url' => 'setUrl',
        'display' => 'setDisplay',
        'name' => 'setName',
        'weight' => 'setWeight',
        'description' => 'setDescription',
        'is_active' => 'setIsActive',
        'regions' => 'setRegions',
        'site_groups' => 'setSiteGroups',
        'sites' => 'setSites',
        'locations' => 'setLocations',
        'device_types' => 'setDeviceTypes',
        'roles' => 'setRoles',
        'platforms' => 'setPlatforms',
        'cluster_types' => 'setClusterTypes',
        'cluster_groups' => 'setClusterGroups',
        'clusters' => 'setClusters',
        'tenant_groups' => 'setTenantGroups',
        'tenants' => 'setTenants',
        'tags' => 'setTags',
        'data_source' => 'setDataSource',
        'data_path' => 'setDataPath',
        'data_file' => 'setDataFile',
        'data_synced' => 'setDataSynced',
        'data' => 'setData',
        'created' => 'setCreated',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'url' => 'getUrl',
        'display' => 'getDisplay',
        'name' => 'getName',
        'weight' => 'getWeight',
        'description' => 'getDescription',
        'is_active' => 'getIsActive',
        'regions' => 'getRegions',
        'site_groups' => 'getSiteGroups',
        'sites' => 'getSites',
        'locations' => 'getLocations',
        'device_types' => 'getDeviceTypes',
        'roles' => 'getRoles',
        'platforms' => 'getPlatforms',
        'cluster_types' => 'getClusterTypes',
        'cluster_groups' => 'getClusterGroups',
        'clusters' => 'getClusters',
        'tenant_groups' => 'getTenantGroups',
        'tenants' => 'getTenants',
        'tags' => 'getTags',
        'data_source' => 'getDataSource',
        'data_path' => 'getDataPath',
        'data_file' => 'getDataFile',
        'data_synced' => 'getDataSynced',
        'data' => 'getData',
        'created' => 'getCreated',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('display', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('regions', $data ?? [], null);
        $this->setIfExists('site_groups', $data ?? [], null);
        $this->setIfExists('sites', $data ?? [], null);
        $this->setIfExists('locations', $data ?? [], null);
        $this->setIfExists('device_types', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('platforms', $data ?? [], null);
        $this->setIfExists('cluster_types', $data ?? [], null);
        $this->setIfExists('cluster_groups', $data ?? [], null);
        $this->setIfExists('clusters', $data ?? [], null);
        $this->setIfExists('tenant_groups', $data ?? [], null);
        $this->setIfExists('tenants', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('data_source', $data ?? [], null);
        $this->setIfExists('data_path', $data ?? [], null);
        $this->setIfExists('data_file', $data ?? [], null);
        $this->setIfExists('data_synced', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['display'] === null) {
            $invalidProperties[] = "'display' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] > 32767)) {
            $invalidProperties[] = "invalid value for 'weight', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 200)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 200.";
        }

        if ($this->container['data_path'] === null) {
            $invalidProperties[] = "'data_path' can't be null";
        }
        if ($this->container['data_file'] === null) {
            $invalidProperties[] = "'data_file' can't be null";
        }
        if ($this->container['data_synced'] === null) {
            $invalidProperties[] = "'data_synced' can't be null";
        }
        if ($this->container['data'] === null) {
            $invalidProperties[] = "'data' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['last_updated'] === null) {
            $invalidProperties[] = "'last_updated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets display
     *
     * @return string
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param string $display display
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (is_null($display)) {
            throw new \InvalidArgumentException('non-nullable display cannot be null');
        }
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ConfigContext., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }

        if (($weight > 32767)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling ConfigContext., must be smaller than or equal to 32767.');
        }
        if (($weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling ConfigContext., must be bigger than or equal to 0.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 200)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ConfigContext., must be smaller than or equal to 200.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            throw new \InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets regions
     *
     * @return \OpenAPI\Client\Model\Region[]|null
     */
    public function getRegions()
    {
        return $this->container['regions'];
    }

    /**
     * Sets regions
     *
     * @param \OpenAPI\Client\Model\Region[]|null $regions regions
     *
     * @return self
     */
    public function setRegions($regions)
    {
        if (is_null($regions)) {
            throw new \InvalidArgumentException('non-nullable regions cannot be null');
        }
        $this->container['regions'] = $regions;

        return $this;
    }

    /**
     * Gets site_groups
     *
     * @return \OpenAPI\Client\Model\SiteGroup[]|null
     */
    public function getSiteGroups()
    {
        return $this->container['site_groups'];
    }

    /**
     * Sets site_groups
     *
     * @param \OpenAPI\Client\Model\SiteGroup[]|null $site_groups site_groups
     *
     * @return self
     */
    public function setSiteGroups($site_groups)
    {
        if (is_null($site_groups)) {
            throw new \InvalidArgumentException('non-nullable site_groups cannot be null');
        }
        $this->container['site_groups'] = $site_groups;

        return $this;
    }

    /**
     * Gets sites
     *
     * @return \OpenAPI\Client\Model\Site[]|null
     */
    public function getSites()
    {
        return $this->container['sites'];
    }

    /**
     * Sets sites
     *
     * @param \OpenAPI\Client\Model\Site[]|null $sites sites
     *
     * @return self
     */
    public function setSites($sites)
    {
        if (is_null($sites)) {
            throw new \InvalidArgumentException('non-nullable sites cannot be null');
        }
        $this->container['sites'] = $sites;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \OpenAPI\Client\Model\Location[]|null
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \OpenAPI\Client\Model\Location[]|null $locations locations
     *
     * @return self
     */
    public function setLocations($locations)
    {
        if (is_null($locations)) {
            throw new \InvalidArgumentException('non-nullable locations cannot be null');
        }
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets device_types
     *
     * @return \OpenAPI\Client\Model\DeviceType[]|null
     */
    public function getDeviceTypes()
    {
        return $this->container['device_types'];
    }

    /**
     * Sets device_types
     *
     * @param \OpenAPI\Client\Model\DeviceType[]|null $device_types device_types
     *
     * @return self
     */
    public function setDeviceTypes($device_types)
    {
        if (is_null($device_types)) {
            throw new \InvalidArgumentException('non-nullable device_types cannot be null');
        }
        $this->container['device_types'] = $device_types;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \OpenAPI\Client\Model\DeviceRole[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \OpenAPI\Client\Model\DeviceRole[]|null $roles roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets platforms
     *
     * @return \OpenAPI\Client\Model\Platform[]|null
     */
    public function getPlatforms()
    {
        return $this->container['platforms'];
    }

    /**
     * Sets platforms
     *
     * @param \OpenAPI\Client\Model\Platform[]|null $platforms platforms
     *
     * @return self
     */
    public function setPlatforms($platforms)
    {
        if (is_null($platforms)) {
            throw new \InvalidArgumentException('non-nullable platforms cannot be null');
        }
        $this->container['platforms'] = $platforms;

        return $this;
    }

    /**
     * Gets cluster_types
     *
     * @return \OpenAPI\Client\Model\ClusterType[]|null
     */
    public function getClusterTypes()
    {
        return $this->container['cluster_types'];
    }

    /**
     * Sets cluster_types
     *
     * @param \OpenAPI\Client\Model\ClusterType[]|null $cluster_types cluster_types
     *
     * @return self
     */
    public function setClusterTypes($cluster_types)
    {
        if (is_null($cluster_types)) {
            throw new \InvalidArgumentException('non-nullable cluster_types cannot be null');
        }
        $this->container['cluster_types'] = $cluster_types;

        return $this;
    }

    /**
     * Gets cluster_groups
     *
     * @return \OpenAPI\Client\Model\ClusterGroup[]|null
     */
    public function getClusterGroups()
    {
        return $this->container['cluster_groups'];
    }

    /**
     * Sets cluster_groups
     *
     * @param \OpenAPI\Client\Model\ClusterGroup[]|null $cluster_groups cluster_groups
     *
     * @return self
     */
    public function setClusterGroups($cluster_groups)
    {
        if (is_null($cluster_groups)) {
            throw new \InvalidArgumentException('non-nullable cluster_groups cannot be null');
        }
        $this->container['cluster_groups'] = $cluster_groups;

        return $this;
    }

    /**
     * Gets clusters
     *
     * @return \OpenAPI\Client\Model\Cluster[]|null
     */
    public function getClusters()
    {
        return $this->container['clusters'];
    }

    /**
     * Sets clusters
     *
     * @param \OpenAPI\Client\Model\Cluster[]|null $clusters clusters
     *
     * @return self
     */
    public function setClusters($clusters)
    {
        if (is_null($clusters)) {
            throw new \InvalidArgumentException('non-nullable clusters cannot be null');
        }
        $this->container['clusters'] = $clusters;

        return $this;
    }

    /**
     * Gets tenant_groups
     *
     * @return \OpenAPI\Client\Model\TenantGroup[]|null
     */
    public function getTenantGroups()
    {
        return $this->container['tenant_groups'];
    }

    /**
     * Sets tenant_groups
     *
     * @param \OpenAPI\Client\Model\TenantGroup[]|null $tenant_groups tenant_groups
     *
     * @return self
     */
    public function setTenantGroups($tenant_groups)
    {
        if (is_null($tenant_groups)) {
            throw new \InvalidArgumentException('non-nullable tenant_groups cannot be null');
        }
        $this->container['tenant_groups'] = $tenant_groups;

        return $this;
    }

    /**
     * Gets tenants
     *
     * @return \OpenAPI\Client\Model\Tenant[]|null
     */
    public function getTenants()
    {
        return $this->container['tenants'];
    }

    /**
     * Sets tenants
     *
     * @param \OpenAPI\Client\Model\Tenant[]|null $tenants tenants
     *
     * @return self
     */
    public function setTenants($tenants)
    {
        if (is_null($tenants)) {
            throw new \InvalidArgumentException('non-nullable tenants cannot be null');
        }
        $this->container['tenants'] = $tenants;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets data_source
     *
     * @return \OpenAPI\Client\Model\DataSource|null
     */
    public function getDataSource()
    {
        return $this->container['data_source'];
    }

    /**
     * Sets data_source
     *
     * @param \OpenAPI\Client\Model\DataSource|null $data_source data_source
     *
     * @return self
     */
    public function setDataSource($data_source)
    {
        if (is_null($data_source)) {
            throw new \InvalidArgumentException('non-nullable data_source cannot be null');
        }
        $this->container['data_source'] = $data_source;

        return $this;
    }

    /**
     * Gets data_path
     *
     * @return string
     */
    public function getDataPath()
    {
        return $this->container['data_path'];
    }

    /**
     * Sets data_path
     *
     * @param string $data_path Path to remote file (relative to data source root)
     *
     * @return self
     */
    public function setDataPath($data_path)
    {
        if (is_null($data_path)) {
            throw new \InvalidArgumentException('non-nullable data_path cannot be null');
        }
        $this->container['data_path'] = $data_path;

        return $this;
    }

    /**
     * Gets data_file
     *
     * @return \OpenAPI\Client\Model\DataFile
     */
    public function getDataFile()
    {
        return $this->container['data_file'];
    }

    /**
     * Sets data_file
     *
     * @param \OpenAPI\Client\Model\DataFile $data_file data_file
     *
     * @return self
     */
    public function setDataFile($data_file)
    {
        if (is_null($data_file)) {
            throw new \InvalidArgumentException('non-nullable data_file cannot be null');
        }
        $this->container['data_file'] = $data_file;

        return $this;
    }

    /**
     * Gets data_synced
     *
     * @return \DateTime
     */
    public function getDataSynced()
    {
        return $this->container['data_synced'];
    }

    /**
     * Sets data_synced
     *
     * @param \DateTime $data_synced data_synced
     *
     * @return self
     */
    public function setDataSynced($data_synced)
    {
        if (is_null($data_synced)) {
            array_push($this->openAPINullablesSetToNull, 'data_synced');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_synced', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_synced'] = $data_synced;

        return $this;
    }

    /**
     * Gets data
     *
     * @return mixed
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param mixed $data data
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            array_push($this->openAPINullablesSetToNull, 'data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            array_push($this->openAPINullablesSetToNull, 'created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            array_push($this->openAPINullablesSetToNull, 'last_updated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_updated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


