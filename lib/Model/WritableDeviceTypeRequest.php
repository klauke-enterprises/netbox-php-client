<?php
/**
 * WritableDeviceTypeRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.8 (4.0)
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WritableDeviceTypeRequest Class Doc Comment
 *
 * @category Class
 * @description Adds support for custom fields and tags.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WritableDeviceTypeRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WritableDeviceTypeRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'manufacturer' => '\OpenAPI\Client\Model\ManufacturerRequest',
        'default_platform' => '\OpenAPI\Client\Model\PlatformRequest',
        'model' => 'string',
        'slug' => 'string',
        'part_number' => 'string',
        'u_height' => 'float',
        'exclude_from_utilization' => 'bool',
        'is_full_depth' => 'bool',
        'subdevice_role' => 'string',
        'airflow' => 'string',
        'weight' => 'float',
        'weight_unit' => 'string',
        'front_image' => '\SplFileObject',
        'rear_image' => '\SplFileObject',
        'description' => 'string',
        'comments' => 'string',
        'tags' => '\OpenAPI\Client\Model\NestedTagRequest[]',
        'custom_fields' => 'array<string,mixed>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'manufacturer' => null,
        'default_platform' => null,
        'model' => null,
        'slug' => null,
        'part_number' => null,
        'u_height' => 'double',
        'exclude_from_utilization' => null,
        'is_full_depth' => null,
        'subdevice_role' => null,
        'airflow' => null,
        'weight' => 'double',
        'weight_unit' => null,
        'front_image' => 'binary',
        'rear_image' => 'binary',
        'description' => null,
        'comments' => null,
        'tags' => null,
        'custom_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'manufacturer' => false,
        'default_platform' => true,
        'model' => false,
        'slug' => false,
        'part_number' => false,
        'u_height' => false,
        'exclude_from_utilization' => false,
        'is_full_depth' => false,
        'subdevice_role' => false,
        'airflow' => false,
        'weight' => true,
        'weight_unit' => false,
        'front_image' => true,
        'rear_image' => true,
        'description' => false,
        'comments' => false,
        'tags' => false,
        'custom_fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'manufacturer' => 'manufacturer',
        'default_platform' => 'default_platform',
        'model' => 'model',
        'slug' => 'slug',
        'part_number' => 'part_number',
        'u_height' => 'u_height',
        'exclude_from_utilization' => 'exclude_from_utilization',
        'is_full_depth' => 'is_full_depth',
        'subdevice_role' => 'subdevice_role',
        'airflow' => 'airflow',
        'weight' => 'weight',
        'weight_unit' => 'weight_unit',
        'front_image' => 'front_image',
        'rear_image' => 'rear_image',
        'description' => 'description',
        'comments' => 'comments',
        'tags' => 'tags',
        'custom_fields' => 'custom_fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'manufacturer' => 'setManufacturer',
        'default_platform' => 'setDefaultPlatform',
        'model' => 'setModel',
        'slug' => 'setSlug',
        'part_number' => 'setPartNumber',
        'u_height' => 'setUHeight',
        'exclude_from_utilization' => 'setExcludeFromUtilization',
        'is_full_depth' => 'setIsFullDepth',
        'subdevice_role' => 'setSubdeviceRole',
        'airflow' => 'setAirflow',
        'weight' => 'setWeight',
        'weight_unit' => 'setWeightUnit',
        'front_image' => 'setFrontImage',
        'rear_image' => 'setRearImage',
        'description' => 'setDescription',
        'comments' => 'setComments',
        'tags' => 'setTags',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'manufacturer' => 'getManufacturer',
        'default_platform' => 'getDefaultPlatform',
        'model' => 'getModel',
        'slug' => 'getSlug',
        'part_number' => 'getPartNumber',
        'u_height' => 'getUHeight',
        'exclude_from_utilization' => 'getExcludeFromUtilization',
        'is_full_depth' => 'getIsFullDepth',
        'subdevice_role' => 'getSubdeviceRole',
        'airflow' => 'getAirflow',
        'weight' => 'getWeight',
        'weight_unit' => 'getWeightUnit',
        'front_image' => 'getFrontImage',
        'rear_image' => 'getRearImage',
        'description' => 'getDescription',
        'comments' => 'getComments',
        'tags' => 'getTags',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SUBDEVICE_ROLE_PARENT = 'parent';
    public const SUBDEVICE_ROLE_CHILD = 'child';
    public const SUBDEVICE_ROLE_EMPTY = '';
    public const AIRFLOW_FRONT_TO_REAR = 'front-to-rear';
    public const AIRFLOW_REAR_TO_FRONT = 'rear-to-front';
    public const AIRFLOW_LEFT_TO_RIGHT = 'left-to-right';
    public const AIRFLOW_RIGHT_TO_LEFT = 'right-to-left';
    public const AIRFLOW_SIDE_TO_REAR = 'side-to-rear';
    public const AIRFLOW_PASSIVE = 'passive';
    public const AIRFLOW_MIXED = 'mixed';
    public const AIRFLOW_EMPTY = '';
    public const WEIGHT_UNIT_KG = 'kg';
    public const WEIGHT_UNIT_G = 'g';
    public const WEIGHT_UNIT_LB = 'lb';
    public const WEIGHT_UNIT_OZ = 'oz';
    public const WEIGHT_UNIT_EMPTY = '';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubdeviceRoleAllowableValues()
    {
        return [
            self::SUBDEVICE_ROLE_PARENT,
            self::SUBDEVICE_ROLE_CHILD,
            self::SUBDEVICE_ROLE_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAirflowAllowableValues()
    {
        return [
            self::AIRFLOW_FRONT_TO_REAR,
            self::AIRFLOW_REAR_TO_FRONT,
            self::AIRFLOW_LEFT_TO_RIGHT,
            self::AIRFLOW_RIGHT_TO_LEFT,
            self::AIRFLOW_SIDE_TO_REAR,
            self::AIRFLOW_PASSIVE,
            self::AIRFLOW_MIXED,
            self::AIRFLOW_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeightUnitAllowableValues()
    {
        return [
            self::WEIGHT_UNIT_KG,
            self::WEIGHT_UNIT_G,
            self::WEIGHT_UNIT_LB,
            self::WEIGHT_UNIT_OZ,
            self::WEIGHT_UNIT_EMPTY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('manufacturer', $data ?? [], null);
        $this->setIfExists('default_platform', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('slug', $data ?? [], null);
        $this->setIfExists('part_number', $data ?? [], null);
        $this->setIfExists('u_height', $data ?? [], 1.0);
        $this->setIfExists('exclude_from_utilization', $data ?? [], null);
        $this->setIfExists('is_full_depth', $data ?? [], null);
        $this->setIfExists('subdevice_role', $data ?? [], null);
        $this->setIfExists('airflow', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('weight_unit', $data ?? [], null);
        $this->setIfExists('front_image', $data ?? [], null);
        $this->setIfExists('rear_image', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['manufacturer'] === null) {
            $invalidProperties[] = "'manufacturer' can't be null";
        }
        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        if ((mb_strlen($this->container['model']) > 100)) {
            $invalidProperties[] = "invalid value for 'model', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['model']) < 1)) {
            $invalidProperties[] = "invalid value for 'model', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['slug'] === null) {
            $invalidProperties[] = "'slug' can't be null";
        }
        if ((mb_strlen($this->container['slug']) > 100)) {
            $invalidProperties[] = "invalid value for 'slug', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['slug']) < 1)) {
            $invalidProperties[] = "invalid value for 'slug', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[-a-zA-Z0-9_]+$/", $this->container['slug'])) {
            $invalidProperties[] = "invalid value for 'slug', must be conform to the pattern /^[-a-zA-Z0-9_]+$/.";
        }

        if (!is_null($this->container['part_number']) && (mb_strlen($this->container['part_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'part_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['u_height']) && ($this->container['u_height'] >= 1000)) {
            $invalidProperties[] = "invalid value for 'u_height', must be smaller than 1000.";
        }

        if (!is_null($this->container['u_height']) && ($this->container['u_height'] < 0)) {
            $invalidProperties[] = "invalid value for 'u_height', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getSubdeviceRoleAllowableValues();
        if (!is_null($this->container['subdevice_role']) && !in_array($this->container['subdevice_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'subdevice_role', must be one of '%s'",
                $this->container['subdevice_role'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAirflowAllowableValues();
        if (!is_null($this->container['airflow']) && !in_array($this->container['airflow'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'airflow', must be one of '%s'",
                $this->container['airflow'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] >= 1000000)) {
            $invalidProperties[] = "invalid value for 'weight', must be smaller than 1000000.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] <= -1000000)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than -1000000.";
        }

        $allowedValues = $this->getWeightUnitAllowableValues();
        if (!is_null($this->container['weight_unit']) && !in_array($this->container['weight_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'weight_unit', must be one of '%s'",
                $this->container['weight_unit'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 200)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 200.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets manufacturer
     *
     * @return \OpenAPI\Client\Model\ManufacturerRequest
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param \OpenAPI\Client\Model\ManufacturerRequest $manufacturer manufacturer
     *
     * @return self
     */
    public function setManufacturer($manufacturer)
    {
        if (is_null($manufacturer)) {
            throw new \InvalidArgumentException('non-nullable manufacturer cannot be null');
        }
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets default_platform
     *
     * @return \OpenAPI\Client\Model\PlatformRequest|null
     */
    public function getDefaultPlatform()
    {
        return $this->container['default_platform'];
    }

    /**
     * Sets default_platform
     *
     * @param \OpenAPI\Client\Model\PlatformRequest|null $default_platform default_platform
     *
     * @return self
     */
    public function setDefaultPlatform($default_platform)
    {
        if (is_null($default_platform)) {
            array_push($this->openAPINullablesSetToNull, 'default_platform');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_platform', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_platform'] = $default_platform;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        if ((mb_strlen($model) > 100)) {
            throw new \InvalidArgumentException('invalid length for $model when calling WritableDeviceTypeRequest., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($model) < 1)) {
            throw new \InvalidArgumentException('invalid length for $model when calling WritableDeviceTypeRequest., must be bigger than or equal to 1.');
        }

        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug slug
     *
     * @return self
     */
    public function setSlug($slug)
    {
        if (is_null($slug)) {
            throw new \InvalidArgumentException('non-nullable slug cannot be null');
        }
        if ((mb_strlen($slug) > 100)) {
            throw new \InvalidArgumentException('invalid length for $slug when calling WritableDeviceTypeRequest., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($slug) < 1)) {
            throw new \InvalidArgumentException('invalid length for $slug when calling WritableDeviceTypeRequest., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[-a-zA-Z0-9_]+$/", ObjectSerializer::toString($slug)))) {
            throw new \InvalidArgumentException("invalid value for \$slug when calling WritableDeviceTypeRequest., must conform to the pattern /^[-a-zA-Z0-9_]+$/.");
        }

        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets part_number
     *
     * @return string|null
     */
    public function getPartNumber()
    {
        return $this->container['part_number'];
    }

    /**
     * Sets part_number
     *
     * @param string|null $part_number Discrete part number (optional)
     *
     * @return self
     */
    public function setPartNumber($part_number)
    {
        if (is_null($part_number)) {
            throw new \InvalidArgumentException('non-nullable part_number cannot be null');
        }
        if ((mb_strlen($part_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $part_number when calling WritableDeviceTypeRequest., must be smaller than or equal to 50.');
        }

        $this->container['part_number'] = $part_number;

        return $this;
    }

    /**
     * Gets u_height
     *
     * @return float|null
     */
    public function getUHeight()
    {
        return $this->container['u_height'];
    }

    /**
     * Sets u_height
     *
     * @param float|null $u_height u_height
     *
     * @return self
     */
    public function setUHeight($u_height)
    {
        if (is_null($u_height)) {
            throw new \InvalidArgumentException('non-nullable u_height cannot be null');
        }

        if (($u_height >= 1000)) {
            throw new \InvalidArgumentException('invalid value for $u_height when calling WritableDeviceTypeRequest., must be smaller than 1000.');
        }
        if (($u_height < 0)) {
            throw new \InvalidArgumentException('invalid value for $u_height when calling WritableDeviceTypeRequest., must be bigger than or equal to 0.');
        }

        $this->container['u_height'] = $u_height;

        return $this;
    }

    /**
     * Gets exclude_from_utilization
     *
     * @return bool|null
     */
    public function getExcludeFromUtilization()
    {
        return $this->container['exclude_from_utilization'];
    }

    /**
     * Sets exclude_from_utilization
     *
     * @param bool|null $exclude_from_utilization Devices of this type are excluded when calculating rack utilization.
     *
     * @return self
     */
    public function setExcludeFromUtilization($exclude_from_utilization)
    {
        if (is_null($exclude_from_utilization)) {
            throw new \InvalidArgumentException('non-nullable exclude_from_utilization cannot be null');
        }
        $this->container['exclude_from_utilization'] = $exclude_from_utilization;

        return $this;
    }

    /**
     * Gets is_full_depth
     *
     * @return bool|null
     */
    public function getIsFullDepth()
    {
        return $this->container['is_full_depth'];
    }

    /**
     * Sets is_full_depth
     *
     * @param bool|null $is_full_depth Device consumes both front and rear rack faces.
     *
     * @return self
     */
    public function setIsFullDepth($is_full_depth)
    {
        if (is_null($is_full_depth)) {
            throw new \InvalidArgumentException('non-nullable is_full_depth cannot be null');
        }
        $this->container['is_full_depth'] = $is_full_depth;

        return $this;
    }

    /**
     * Gets subdevice_role
     *
     * @return string|null
     */
    public function getSubdeviceRole()
    {
        return $this->container['subdevice_role'];
    }

    /**
     * Sets subdevice_role
     *
     * @param string|null $subdevice_role Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.  * `parent` - Parent * `child` - Child
     *
     * @return self
     */
    public function setSubdeviceRole($subdevice_role)
    {
        if (is_null($subdevice_role)) {
            throw new \InvalidArgumentException('non-nullable subdevice_role cannot be null');
        }
        $allowedValues = $this->getSubdeviceRoleAllowableValues();
        if (!in_array($subdevice_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'subdevice_role', must be one of '%s'",
                    $subdevice_role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subdevice_role'] = $subdevice_role;

        return $this;
    }

    /**
     * Gets airflow
     *
     * @return string|null
     */
    public function getAirflow()
    {
        return $this->container['airflow'];
    }

    /**
     * Sets airflow
     *
     * @param string|null $airflow * `front-to-rear` - Front to rear * `rear-to-front` - Rear to front * `left-to-right` - Left to right * `right-to-left` - Right to left * `side-to-rear` - Side to rear * `passive` - Passive * `mixed` - Mixed
     *
     * @return self
     */
    public function setAirflow($airflow)
    {
        if (is_null($airflow)) {
            throw new \InvalidArgumentException('non-nullable airflow cannot be null');
        }
        $allowedValues = $this->getAirflowAllowableValues();
        if (!in_array($airflow, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'airflow', must be one of '%s'",
                    $airflow,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['airflow'] = $airflow;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            array_push($this->openAPINullablesSetToNull, 'weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($weight) && ($weight >= 1000000)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling WritableDeviceTypeRequest., must be smaller than 1000000.');
        }
        if (!is_null($weight) && ($weight <= -1000000)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling WritableDeviceTypeRequest., must be bigger than -1000000.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return string|null
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param string|null $weight_unit * `kg` - Kilograms * `g` - Grams * `lb` - Pounds * `oz` - Ounces
     *
     * @return self
     */
    public function setWeightUnit($weight_unit)
    {
        if (is_null($weight_unit)) {
            throw new \InvalidArgumentException('non-nullable weight_unit cannot be null');
        }
        $allowedValues = $this->getWeightUnitAllowableValues();
        if (!in_array($weight_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'weight_unit', must be one of '%s'",
                    $weight_unit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets front_image
     *
     * @return \SplFileObject|null
     */
    public function getFrontImage()
    {
        return $this->container['front_image'];
    }

    /**
     * Sets front_image
     *
     * @param \SplFileObject|null $front_image front_image
     *
     * @return self
     */
    public function setFrontImage($front_image)
    {
        if (is_null($front_image)) {
            array_push($this->openAPINullablesSetToNull, 'front_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('front_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['front_image'] = $front_image;

        return $this;
    }

    /**
     * Gets rear_image
     *
     * @return \SplFileObject|null
     */
    public function getRearImage()
    {
        return $this->container['rear_image'];
    }

    /**
     * Sets rear_image
     *
     * @param \SplFileObject|null $rear_image rear_image
     *
     * @return self
     */
    public function setRearImage($rear_image)
    {
        if (is_null($rear_image)) {
            array_push($this->openAPINullablesSetToNull, 'rear_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rear_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rear_image'] = $rear_image;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 200)) {
            throw new \InvalidArgumentException('invalid length for $description when calling WritableDeviceTypeRequest., must be smaller than or equal to 200.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\NestedTagRequest[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\NestedTagRequest[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return array<string,mixed>|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param array<string,mixed>|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


