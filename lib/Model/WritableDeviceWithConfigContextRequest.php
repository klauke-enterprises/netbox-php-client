<?php
/**
 * WritableDeviceWithConfigContextRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.8 (4.0)
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WritableDeviceWithConfigContextRequest Class Doc Comment
 *
 * @category Class
 * @description Adds support for custom fields and tags.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WritableDeviceWithConfigContextRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WritableDeviceWithConfigContextRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'device_type' => '\OpenAPI\Client\Model\DeviceTypeRequest',
        'role' => '\OpenAPI\Client\Model\DeviceRoleRequest',
        'tenant' => '\OpenAPI\Client\Model\TenantRequest',
        'platform' => '\OpenAPI\Client\Model\PlatformRequest',
        'serial' => 'string',
        'asset_tag' => 'string',
        'site' => '\OpenAPI\Client\Model\SiteRequest',
        'location' => '\OpenAPI\Client\Model\LocationRequest',
        'rack' => '\OpenAPI\Client\Model\RackRequest',
        'position' => 'float',
        'face' => 'string',
        'latitude' => 'float',
        'longitude' => 'float',
        'status' => 'string',
        'airflow' => 'string',
        'primary_ip4' => '\OpenAPI\Client\Model\IPAddressRequest',
        'primary_ip6' => '\OpenAPI\Client\Model\IPAddressRequest',
        'oob_ip' => '\OpenAPI\Client\Model\IPAddressRequest',
        'cluster' => '\OpenAPI\Client\Model\ClusterRequest',
        'virtual_chassis' => '\OpenAPI\Client\Model\VirtualChassisRequest',
        'vc_position' => 'int',
        'vc_priority' => 'int',
        'description' => 'string',
        'comments' => 'string',
        'config_template' => '\OpenAPI\Client\Model\ConfigTemplateRequest',
        'local_context_data' => 'mixed',
        'tags' => '\OpenAPI\Client\Model\NestedTagRequest[]',
        'custom_fields' => 'array<string,mixed>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'device_type' => null,
        'role' => null,
        'tenant' => null,
        'platform' => null,
        'serial' => null,
        'asset_tag' => null,
        'site' => null,
        'location' => null,
        'rack' => null,
        'position' => 'double',
        'face' => null,
        'latitude' => 'double',
        'longitude' => 'double',
        'status' => null,
        'airflow' => null,
        'primary_ip4' => null,
        'primary_ip6' => null,
        'oob_ip' => null,
        'cluster' => null,
        'virtual_chassis' => null,
        'vc_position' => null,
        'vc_priority' => null,
        'description' => null,
        'comments' => null,
        'config_template' => null,
        'local_context_data' => null,
        'tags' => null,
        'custom_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
        'device_type' => false,
        'role' => false,
        'tenant' => true,
        'platform' => true,
        'serial' => false,
        'asset_tag' => true,
        'site' => false,
        'location' => true,
        'rack' => true,
        'position' => true,
        'face' => false,
        'latitude' => true,
        'longitude' => true,
        'status' => false,
        'airflow' => false,
        'primary_ip4' => true,
        'primary_ip6' => true,
        'oob_ip' => true,
        'cluster' => true,
        'virtual_chassis' => true,
        'vc_position' => true,
        'vc_priority' => true,
        'description' => false,
        'comments' => false,
        'config_template' => true,
        'local_context_data' => true,
        'tags' => false,
        'custom_fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'device_type' => 'device_type',
        'role' => 'role',
        'tenant' => 'tenant',
        'platform' => 'platform',
        'serial' => 'serial',
        'asset_tag' => 'asset_tag',
        'site' => 'site',
        'location' => 'location',
        'rack' => 'rack',
        'position' => 'position',
        'face' => 'face',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'status' => 'status',
        'airflow' => 'airflow',
        'primary_ip4' => 'primary_ip4',
        'primary_ip6' => 'primary_ip6',
        'oob_ip' => 'oob_ip',
        'cluster' => 'cluster',
        'virtual_chassis' => 'virtual_chassis',
        'vc_position' => 'vc_position',
        'vc_priority' => 'vc_priority',
        'description' => 'description',
        'comments' => 'comments',
        'config_template' => 'config_template',
        'local_context_data' => 'local_context_data',
        'tags' => 'tags',
        'custom_fields' => 'custom_fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'device_type' => 'setDeviceType',
        'role' => 'setRole',
        'tenant' => 'setTenant',
        'platform' => 'setPlatform',
        'serial' => 'setSerial',
        'asset_tag' => 'setAssetTag',
        'site' => 'setSite',
        'location' => 'setLocation',
        'rack' => 'setRack',
        'position' => 'setPosition',
        'face' => 'setFace',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'status' => 'setStatus',
        'airflow' => 'setAirflow',
        'primary_ip4' => 'setPrimaryIp4',
        'primary_ip6' => 'setPrimaryIp6',
        'oob_ip' => 'setOobIp',
        'cluster' => 'setCluster',
        'virtual_chassis' => 'setVirtualChassis',
        'vc_position' => 'setVcPosition',
        'vc_priority' => 'setVcPriority',
        'description' => 'setDescription',
        'comments' => 'setComments',
        'config_template' => 'setConfigTemplate',
        'local_context_data' => 'setLocalContextData',
        'tags' => 'setTags',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'device_type' => 'getDeviceType',
        'role' => 'getRole',
        'tenant' => 'getTenant',
        'platform' => 'getPlatform',
        'serial' => 'getSerial',
        'asset_tag' => 'getAssetTag',
        'site' => 'getSite',
        'location' => 'getLocation',
        'rack' => 'getRack',
        'position' => 'getPosition',
        'face' => 'getFace',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'status' => 'getStatus',
        'airflow' => 'getAirflow',
        'primary_ip4' => 'getPrimaryIp4',
        'primary_ip6' => 'getPrimaryIp6',
        'oob_ip' => 'getOobIp',
        'cluster' => 'getCluster',
        'virtual_chassis' => 'getVirtualChassis',
        'vc_position' => 'getVcPosition',
        'vc_priority' => 'getVcPriority',
        'description' => 'getDescription',
        'comments' => 'getComments',
        'config_template' => 'getConfigTemplate',
        'local_context_data' => 'getLocalContextData',
        'tags' => 'getTags',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FACE_FRONT = 'front';
    public const FACE_REAR = 'rear';
    public const FACE_EMPTY = '';
    public const STATUS_OFFLINE = 'offline';
    public const STATUS_ACTIVE = 'active';
    public const STATUS_PLANNED = 'planned';
    public const STATUS_STAGED = 'staged';
    public const STATUS_FAILED = 'failed';
    public const STATUS_INVENTORY = 'inventory';
    public const STATUS_DECOMMISSIONING = 'decommissioning';
    public const AIRFLOW_FRONT_TO_REAR = 'front-to-rear';
    public const AIRFLOW_REAR_TO_FRONT = 'rear-to-front';
    public const AIRFLOW_LEFT_TO_RIGHT = 'left-to-right';
    public const AIRFLOW_RIGHT_TO_LEFT = 'right-to-left';
    public const AIRFLOW_SIDE_TO_REAR = 'side-to-rear';
    public const AIRFLOW_PASSIVE = 'passive';
    public const AIRFLOW_MIXED = 'mixed';
    public const AIRFLOW_EMPTY = '';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFaceAllowableValues()
    {
        return [
            self::FACE_FRONT,
            self::FACE_REAR,
            self::FACE_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OFFLINE,
            self::STATUS_ACTIVE,
            self::STATUS_PLANNED,
            self::STATUS_STAGED,
            self::STATUS_FAILED,
            self::STATUS_INVENTORY,
            self::STATUS_DECOMMISSIONING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAirflowAllowableValues()
    {
        return [
            self::AIRFLOW_FRONT_TO_REAR,
            self::AIRFLOW_REAR_TO_FRONT,
            self::AIRFLOW_LEFT_TO_RIGHT,
            self::AIRFLOW_RIGHT_TO_LEFT,
            self::AIRFLOW_SIDE_TO_REAR,
            self::AIRFLOW_PASSIVE,
            self::AIRFLOW_MIXED,
            self::AIRFLOW_EMPTY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('device_type', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('tenant', $data ?? [], null);
        $this->setIfExists('platform', $data ?? [], null);
        $this->setIfExists('serial', $data ?? [], null);
        $this->setIfExists('asset_tag', $data ?? [], null);
        $this->setIfExists('site', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('rack', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('face', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('airflow', $data ?? [], null);
        $this->setIfExists('primary_ip4', $data ?? [], null);
        $this->setIfExists('primary_ip6', $data ?? [], null);
        $this->setIfExists('oob_ip', $data ?? [], null);
        $this->setIfExists('cluster', $data ?? [], null);
        $this->setIfExists('virtual_chassis', $data ?? [], null);
        $this->setIfExists('vc_position', $data ?? [], null);
        $this->setIfExists('vc_priority', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('config_template', $data ?? [], null);
        $this->setIfExists('local_context_data', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 64)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['device_type'] === null) {
            $invalidProperties[] = "'device_type' can't be null";
        }
        if ($this->container['role'] === null) {
            $invalidProperties[] = "'role' can't be null";
        }
        if (!is_null($this->container['serial']) && (mb_strlen($this->container['serial']) > 50)) {
            $invalidProperties[] = "invalid value for 'serial', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['asset_tag']) && (mb_strlen($this->container['asset_tag']) > 50)) {
            $invalidProperties[] = "invalid value for 'asset_tag', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['site'] === null) {
            $invalidProperties[] = "'site' can't be null";
        }
        if (!is_null($this->container['position']) && ($this->container['position'] >= 1000)) {
            $invalidProperties[] = "invalid value for 'position', must be smaller than 1000.";
        }

        if (!is_null($this->container['position']) && ($this->container['position'] < 0.5)) {
            $invalidProperties[] = "invalid value for 'position', must be bigger than or equal to 0.5.";
        }

        if ($this->container['face'] === null) {
            $invalidProperties[] = "'face' can't be null";
        }
        $allowedValues = $this->getFaceAllowableValues();
        if (!is_null($this->container['face']) && !in_array($this->container['face'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'face', must be one of '%s'",
                $this->container['face'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['latitude']) && ($this->container['latitude'] >= 100)) {
            $invalidProperties[] = "invalid value for 'latitude', must be smaller than 100.";
        }

        if (!is_null($this->container['latitude']) && ($this->container['latitude'] <= -100)) {
            $invalidProperties[] = "invalid value for 'latitude', must be bigger than -100.";
        }

        if (!is_null($this->container['longitude']) && ($this->container['longitude'] >= 1000)) {
            $invalidProperties[] = "invalid value for 'longitude', must be smaller than 1000.";
        }

        if (!is_null($this->container['longitude']) && ($this->container['longitude'] <= -1000)) {
            $invalidProperties[] = "invalid value for 'longitude', must be bigger than -1000.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAirflowAllowableValues();
        if (!is_null($this->container['airflow']) && !in_array($this->container['airflow'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'airflow', must be one of '%s'",
                $this->container['airflow'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['vc_position']) && ($this->container['vc_position'] > 255)) {
            $invalidProperties[] = "invalid value for 'vc_position', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['vc_position']) && ($this->container['vc_position'] < 0)) {
            $invalidProperties[] = "invalid value for 'vc_position', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['vc_priority']) && ($this->container['vc_priority'] > 255)) {
            $invalidProperties[] = "invalid value for 'vc_priority', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['vc_priority']) && ($this->container['vc_priority'] < 0)) {
            $invalidProperties[] = "invalid value for 'vc_priority', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 200)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 200.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && (mb_strlen($name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $name when calling WritableDeviceWithConfigContextRequest., must be smaller than or equal to 64.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets device_type
     *
     * @return \OpenAPI\Client\Model\DeviceTypeRequest
     */
    public function getDeviceType()
    {
        return $this->container['device_type'];
    }

    /**
     * Sets device_type
     *
     * @param \OpenAPI\Client\Model\DeviceTypeRequest $device_type device_type
     *
     * @return self
     */
    public function setDeviceType($device_type)
    {
        if (is_null($device_type)) {
            throw new \InvalidArgumentException('non-nullable device_type cannot be null');
        }
        $this->container['device_type'] = $device_type;

        return $this;
    }

    /**
     * Gets role
     *
     * @return \OpenAPI\Client\Model\DeviceRoleRequest
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param \OpenAPI\Client\Model\DeviceRoleRequest $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets tenant
     *
     * @return \OpenAPI\Client\Model\TenantRequest|null
     */
    public function getTenant()
    {
        return $this->container['tenant'];
    }

    /**
     * Sets tenant
     *
     * @param \OpenAPI\Client\Model\TenantRequest|null $tenant tenant
     *
     * @return self
     */
    public function setTenant($tenant)
    {
        if (is_null($tenant)) {
            array_push($this->openAPINullablesSetToNull, 'tenant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tenant'] = $tenant;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return \OpenAPI\Client\Model\PlatformRequest|null
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param \OpenAPI\Client\Model\PlatformRequest|null $platform platform
     *
     * @return self
     */
    public function setPlatform($platform)
    {
        if (is_null($platform)) {
            array_push($this->openAPINullablesSetToNull, 'platform');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('platform', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets serial
     *
     * @return string|null
     */
    public function getSerial()
    {
        return $this->container['serial'];
    }

    /**
     * Sets serial
     *
     * @param string|null $serial Chassis serial number, assigned by the manufacturer
     *
     * @return self
     */
    public function setSerial($serial)
    {
        if (is_null($serial)) {
            throw new \InvalidArgumentException('non-nullable serial cannot be null');
        }
        if ((mb_strlen($serial) > 50)) {
            throw new \InvalidArgumentException('invalid length for $serial when calling WritableDeviceWithConfigContextRequest., must be smaller than or equal to 50.');
        }

        $this->container['serial'] = $serial;

        return $this;
    }

    /**
     * Gets asset_tag
     *
     * @return string|null
     */
    public function getAssetTag()
    {
        return $this->container['asset_tag'];
    }

    /**
     * Sets asset_tag
     *
     * @param string|null $asset_tag A unique tag used to identify this device
     *
     * @return self
     */
    public function setAssetTag($asset_tag)
    {
        if (is_null($asset_tag)) {
            array_push($this->openAPINullablesSetToNull, 'asset_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($asset_tag) && (mb_strlen($asset_tag) > 50)) {
            throw new \InvalidArgumentException('invalid length for $asset_tag when calling WritableDeviceWithConfigContextRequest., must be smaller than or equal to 50.');
        }

        $this->container['asset_tag'] = $asset_tag;

        return $this;
    }

    /**
     * Gets site
     *
     * @return \OpenAPI\Client\Model\SiteRequest
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \OpenAPI\Client\Model\SiteRequest $site site
     *
     * @return self
     */
    public function setSite($site)
    {
        if (is_null($site)) {
            throw new \InvalidArgumentException('non-nullable site cannot be null');
        }
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \OpenAPI\Client\Model\LocationRequest|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \OpenAPI\Client\Model\LocationRequest|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets rack
     *
     * @return \OpenAPI\Client\Model\RackRequest|null
     */
    public function getRack()
    {
        return $this->container['rack'];
    }

    /**
     * Sets rack
     *
     * @param \OpenAPI\Client\Model\RackRequest|null $rack rack
     *
     * @return self
     */
    public function setRack($rack)
    {
        if (is_null($rack)) {
            array_push($this->openAPINullablesSetToNull, 'rack');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rack', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rack'] = $rack;

        return $this;
    }

    /**
     * Gets position
     *
     * @return float|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param float|null $position position
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            array_push($this->openAPINullablesSetToNull, 'position');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('position', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($position) && ($position >= 1000)) {
            throw new \InvalidArgumentException('invalid value for $position when calling WritableDeviceWithConfigContextRequest., must be smaller than 1000.');
        }
        if (!is_null($position) && ($position < 0.5)) {
            throw new \InvalidArgumentException('invalid value for $position when calling WritableDeviceWithConfigContextRequest., must be bigger than or equal to 0.5.');
        }

        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets face
     *
     * @return string
     */
    public function getFace()
    {
        return $this->container['face'];
    }

    /**
     * Sets face
     *
     * @param string $face * `front` - Front * `rear` - Rear
     *
     * @return self
     */
    public function setFace($face)
    {
        if (is_null($face)) {
            throw new \InvalidArgumentException('non-nullable face cannot be null');
        }
        $allowedValues = $this->getFaceAllowableValues();
        if (!in_array($face, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'face', must be one of '%s'",
                    $face,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['face'] = $face;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float|null $latitude GPS coordinate in decimal format (xx.yyyyyy)
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            array_push($this->openAPINullablesSetToNull, 'latitude');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('latitude', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($latitude) && ($latitude >= 100)) {
            throw new \InvalidArgumentException('invalid value for $latitude when calling WritableDeviceWithConfigContextRequest., must be smaller than 100.');
        }
        if (!is_null($latitude) && ($latitude <= -100)) {
            throw new \InvalidArgumentException('invalid value for $latitude when calling WritableDeviceWithConfigContextRequest., must be bigger than -100.');
        }

        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float|null $longitude GPS coordinate in decimal format (xx.yyyyyy)
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            array_push($this->openAPINullablesSetToNull, 'longitude');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('longitude', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($longitude) && ($longitude >= 1000)) {
            throw new \InvalidArgumentException('invalid value for $longitude when calling WritableDeviceWithConfigContextRequest., must be smaller than 1000.');
        }
        if (!is_null($longitude) && ($longitude <= -1000)) {
            throw new \InvalidArgumentException('invalid value for $longitude when calling WritableDeviceWithConfigContextRequest., must be bigger than -1000.');
        }

        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status * `offline` - Offline * `active` - Active * `planned` - Planned * `staged` - Staged * `failed` - Failed * `inventory` - Inventory * `decommissioning` - Decommissioning
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets airflow
     *
     * @return string|null
     */
    public function getAirflow()
    {
        return $this->container['airflow'];
    }

    /**
     * Sets airflow
     *
     * @param string|null $airflow * `front-to-rear` - Front to rear * `rear-to-front` - Rear to front * `left-to-right` - Left to right * `right-to-left` - Right to left * `side-to-rear` - Side to rear * `passive` - Passive * `mixed` - Mixed
     *
     * @return self
     */
    public function setAirflow($airflow)
    {
        if (is_null($airflow)) {
            throw new \InvalidArgumentException('non-nullable airflow cannot be null');
        }
        $allowedValues = $this->getAirflowAllowableValues();
        if (!in_array($airflow, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'airflow', must be one of '%s'",
                    $airflow,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['airflow'] = $airflow;

        return $this;
    }

    /**
     * Gets primary_ip4
     *
     * @return \OpenAPI\Client\Model\IPAddressRequest|null
     */
    public function getPrimaryIp4()
    {
        return $this->container['primary_ip4'];
    }

    /**
     * Sets primary_ip4
     *
     * @param \OpenAPI\Client\Model\IPAddressRequest|null $primary_ip4 primary_ip4
     *
     * @return self
     */
    public function setPrimaryIp4($primary_ip4)
    {
        if (is_null($primary_ip4)) {
            array_push($this->openAPINullablesSetToNull, 'primary_ip4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary_ip4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primary_ip4'] = $primary_ip4;

        return $this;
    }

    /**
     * Gets primary_ip6
     *
     * @return \OpenAPI\Client\Model\IPAddressRequest|null
     */
    public function getPrimaryIp6()
    {
        return $this->container['primary_ip6'];
    }

    /**
     * Sets primary_ip6
     *
     * @param \OpenAPI\Client\Model\IPAddressRequest|null $primary_ip6 primary_ip6
     *
     * @return self
     */
    public function setPrimaryIp6($primary_ip6)
    {
        if (is_null($primary_ip6)) {
            array_push($this->openAPINullablesSetToNull, 'primary_ip6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary_ip6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primary_ip6'] = $primary_ip6;

        return $this;
    }

    /**
     * Gets oob_ip
     *
     * @return \OpenAPI\Client\Model\IPAddressRequest|null
     */
    public function getOobIp()
    {
        return $this->container['oob_ip'];
    }

    /**
     * Sets oob_ip
     *
     * @param \OpenAPI\Client\Model\IPAddressRequest|null $oob_ip oob_ip
     *
     * @return self
     */
    public function setOobIp($oob_ip)
    {
        if (is_null($oob_ip)) {
            array_push($this->openAPINullablesSetToNull, 'oob_ip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('oob_ip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['oob_ip'] = $oob_ip;

        return $this;
    }

    /**
     * Gets cluster
     *
     * @return \OpenAPI\Client\Model\ClusterRequest|null
     */
    public function getCluster()
    {
        return $this->container['cluster'];
    }

    /**
     * Sets cluster
     *
     * @param \OpenAPI\Client\Model\ClusterRequest|null $cluster cluster
     *
     * @return self
     */
    public function setCluster($cluster)
    {
        if (is_null($cluster)) {
            array_push($this->openAPINullablesSetToNull, 'cluster');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cluster', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cluster'] = $cluster;

        return $this;
    }

    /**
     * Gets virtual_chassis
     *
     * @return \OpenAPI\Client\Model\VirtualChassisRequest|null
     */
    public function getVirtualChassis()
    {
        return $this->container['virtual_chassis'];
    }

    /**
     * Sets virtual_chassis
     *
     * @param \OpenAPI\Client\Model\VirtualChassisRequest|null $virtual_chassis virtual_chassis
     *
     * @return self
     */
    public function setVirtualChassis($virtual_chassis)
    {
        if (is_null($virtual_chassis)) {
            array_push($this->openAPINullablesSetToNull, 'virtual_chassis');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('virtual_chassis', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['virtual_chassis'] = $virtual_chassis;

        return $this;
    }

    /**
     * Gets vc_position
     *
     * @return int|null
     */
    public function getVcPosition()
    {
        return $this->container['vc_position'];
    }

    /**
     * Sets vc_position
     *
     * @param int|null $vc_position vc_position
     *
     * @return self
     */
    public function setVcPosition($vc_position)
    {
        if (is_null($vc_position)) {
            array_push($this->openAPINullablesSetToNull, 'vc_position');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vc_position', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($vc_position) && ($vc_position > 255)) {
            throw new \InvalidArgumentException('invalid value for $vc_position when calling WritableDeviceWithConfigContextRequest., must be smaller than or equal to 255.');
        }
        if (!is_null($vc_position) && ($vc_position < 0)) {
            throw new \InvalidArgumentException('invalid value for $vc_position when calling WritableDeviceWithConfigContextRequest., must be bigger than or equal to 0.');
        }

        $this->container['vc_position'] = $vc_position;

        return $this;
    }

    /**
     * Gets vc_priority
     *
     * @return int|null
     */
    public function getVcPriority()
    {
        return $this->container['vc_priority'];
    }

    /**
     * Sets vc_priority
     *
     * @param int|null $vc_priority Virtual chassis master election priority
     *
     * @return self
     */
    public function setVcPriority($vc_priority)
    {
        if (is_null($vc_priority)) {
            array_push($this->openAPINullablesSetToNull, 'vc_priority');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vc_priority', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($vc_priority) && ($vc_priority > 255)) {
            throw new \InvalidArgumentException('invalid value for $vc_priority when calling WritableDeviceWithConfigContextRequest., must be smaller than or equal to 255.');
        }
        if (!is_null($vc_priority) && ($vc_priority < 0)) {
            throw new \InvalidArgumentException('invalid value for $vc_priority when calling WritableDeviceWithConfigContextRequest., must be bigger than or equal to 0.');
        }

        $this->container['vc_priority'] = $vc_priority;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 200)) {
            throw new \InvalidArgumentException('invalid length for $description when calling WritableDeviceWithConfigContextRequest., must be smaller than or equal to 200.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets config_template
     *
     * @return \OpenAPI\Client\Model\ConfigTemplateRequest|null
     */
    public function getConfigTemplate()
    {
        return $this->container['config_template'];
    }

    /**
     * Sets config_template
     *
     * @param \OpenAPI\Client\Model\ConfigTemplateRequest|null $config_template config_template
     *
     * @return self
     */
    public function setConfigTemplate($config_template)
    {
        if (is_null($config_template)) {
            array_push($this->openAPINullablesSetToNull, 'config_template');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('config_template', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['config_template'] = $config_template;

        return $this;
    }

    /**
     * Gets local_context_data
     *
     * @return mixed|null
     */
    public function getLocalContextData()
    {
        return $this->container['local_context_data'];
    }

    /**
     * Sets local_context_data
     *
     * @param mixed|null $local_context_data Local config context data takes precedence over source contexts in the final rendered config context
     *
     * @return self
     */
    public function setLocalContextData($local_context_data)
    {
        if (is_null($local_context_data)) {
            array_push($this->openAPINullablesSetToNull, 'local_context_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('local_context_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['local_context_data'] = $local_context_data;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\NestedTagRequest[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\NestedTagRequest[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return array<string,mixed>|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param array<string,mixed>|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


