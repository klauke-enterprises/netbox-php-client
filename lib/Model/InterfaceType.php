<?php
/**
 * InterfaceType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1.1 (4.1)
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InterfaceType Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InterfaceType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Interface_type';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'value' => 'string',
        'label' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'value' => null,
        'label' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'value' => false,
        'label' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'value' => 'value',
        'label' => 'label'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'value' => 'setValue',
        'label' => 'setLabel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'value' => 'getValue',
        'label' => 'getLabel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const VALUE_VIRTUAL = 'virtual';
    public const VALUE_BRIDGE = 'bridge';
    public const VALUE_LAG = 'lag';
    public const VALUE__100BASE_FX = '100base-fx';
    public const VALUE__100BASE_LFX = '100base-lfx';
    public const VALUE__100BASE_TX = '100base-tx';
    public const VALUE__100BASE_T1 = '100base-t1';
    public const VALUE__1000BASE_T = '1000base-t';
    public const VALUE__1000BASE_TX = '1000base-tx';
    public const VALUE__2_5GBASE_T = '2.5gbase-t';
    public const VALUE__5GBASE_T = '5gbase-t';
    public const VALUE__10GBASE_T = '10gbase-t';
    public const VALUE__10GBASE_CX4 = '10gbase-cx4';
    public const VALUE__1000BASE_X_GBIC = '1000base-x-gbic';
    public const VALUE__1000BASE_X_SFP = '1000base-x-sfp';
    public const VALUE__10GBASE_X_SFPP = '10gbase-x-sfpp';
    public const VALUE__10GBASE_X_XFP = '10gbase-x-xfp';
    public const VALUE__10GBASE_X_XENPAK = '10gbase-x-xenpak';
    public const VALUE__10GBASE_X_X2 = '10gbase-x-x2';
    public const VALUE__25GBASE_X_SFP28 = '25gbase-x-sfp28';
    public const VALUE__50GBASE_X_SFP56 = '50gbase-x-sfp56';
    public const VALUE__40GBASE_X_QSFPP = '40gbase-x-qsfpp';
    public const VALUE__50GBASE_X_SFP28 = '50gbase-x-sfp28';
    public const VALUE__100GBASE_X_CFP = '100gbase-x-cfp';
    public const VALUE__100GBASE_X_CFP2 = '100gbase-x-cfp2';
    public const VALUE__200GBASE_X_CFP2 = '200gbase-x-cfp2';
    public const VALUE__400GBASE_X_CFP2 = '400gbase-x-cfp2';
    public const VALUE__100GBASE_X_CFP4 = '100gbase-x-cfp4';
    public const VALUE__100GBASE_X_CXP = '100gbase-x-cxp';
    public const VALUE__100GBASE_X_CPAK = '100gbase-x-cpak';
    public const VALUE__100GBASE_X_DSFP = '100gbase-x-dsfp';
    public const VALUE__100GBASE_X_SFPDD = '100gbase-x-sfpdd';
    public const VALUE__100GBASE_X_QSFP28 = '100gbase-x-qsfp28';
    public const VALUE__100GBASE_X_QSFPDD = '100gbase-x-qsfpdd';
    public const VALUE__200GBASE_X_QSFP56 = '200gbase-x-qsfp56';
    public const VALUE__200GBASE_X_QSFPDD = '200gbase-x-qsfpdd';
    public const VALUE__400GBASE_X_QSFP112 = '400gbase-x-qsfp112';
    public const VALUE__400GBASE_X_QSFPDD = '400gbase-x-qsfpdd';
    public const VALUE__400GBASE_X_OSFP = '400gbase-x-osfp';
    public const VALUE__400GBASE_X_OSFP_RHS = '400gbase-x-osfp-rhs';
    public const VALUE__400GBASE_X_CDFP = '400gbase-x-cdfp';
    public const VALUE__400GBASE_X_CFP8 = '400gbase-x-cfp8';
    public const VALUE__800GBASE_X_QSFPDD = '800gbase-x-qsfpdd';
    public const VALUE__800GBASE_X_OSFP = '800gbase-x-osfp';
    public const VALUE__1000BASE_KX = '1000base-kx';
    public const VALUE__2_5GBASE_KX = '2.5gbase-kx';
    public const VALUE__5GBASE_KR = '5gbase-kr';
    public const VALUE__10GBASE_KR = '10gbase-kr';
    public const VALUE__10GBASE_KX4 = '10gbase-kx4';
    public const VALUE__25GBASE_KR = '25gbase-kr';
    public const VALUE__40GBASE_KR4 = '40gbase-kr4';
    public const VALUE__50GBASE_KR = '50gbase-kr';
    public const VALUE__100GBASE_KP4 = '100gbase-kp4';
    public const VALUE__100GBASE_KR2 = '100gbase-kr2';
    public const VALUE__100GBASE_KR4 = '100gbase-kr4';
    public const VALUE_IEEE802_11A = 'ieee802.11a';
    public const VALUE_IEEE802_11G = 'ieee802.11g';
    public const VALUE_IEEE802_11N = 'ieee802.11n';
    public const VALUE_IEEE802_11AC = 'ieee802.11ac';
    public const VALUE_IEEE802_11AD = 'ieee802.11ad';
    public const VALUE_IEEE802_11AX = 'ieee802.11ax';
    public const VALUE_IEEE802_11AY = 'ieee802.11ay';
    public const VALUE_IEEE802_11BE = 'ieee802.11be';
    public const VALUE_IEEE802_15_1 = 'ieee802.15.1';
    public const VALUE_OTHER_WIRELESS = 'other-wireless';
    public const VALUE_GSM = 'gsm';
    public const VALUE_CDMA = 'cdma';
    public const VALUE_LTE = 'lte';
    public const VALUE__4G = '4g';
    public const VALUE__5G = '5g';
    public const VALUE_SONET_OC3 = 'sonet-oc3';
    public const VALUE_SONET_OC12 = 'sonet-oc12';
    public const VALUE_SONET_OC48 = 'sonet-oc48';
    public const VALUE_SONET_OC192 = 'sonet-oc192';
    public const VALUE_SONET_OC768 = 'sonet-oc768';
    public const VALUE_SONET_OC1920 = 'sonet-oc1920';
    public const VALUE_SONET_OC3840 = 'sonet-oc3840';
    public const VALUE__1GFC_SFP = '1gfc-sfp';
    public const VALUE__2GFC_SFP = '2gfc-sfp';
    public const VALUE__4GFC_SFP = '4gfc-sfp';
    public const VALUE__8GFC_SFPP = '8gfc-sfpp';
    public const VALUE__16GFC_SFPP = '16gfc-sfpp';
    public const VALUE__32GFC_SFP28 = '32gfc-sfp28';
    public const VALUE__32GFC_SFPP = '32gfc-sfpp';
    public const VALUE__64GFC_QSFPP = '64gfc-qsfpp';
    public const VALUE__64GFC_SFPDD = '64gfc-sfpdd';
    public const VALUE__64GFC_SFPP = '64gfc-sfpp';
    public const VALUE__128GFC_QSFP28 = '128gfc-qsfp28';
    public const VALUE_INFINIBAND_SDR = 'infiniband-sdr';
    public const VALUE_INFINIBAND_DDR = 'infiniband-ddr';
    public const VALUE_INFINIBAND_QDR = 'infiniband-qdr';
    public const VALUE_INFINIBAND_FDR10 = 'infiniband-fdr10';
    public const VALUE_INFINIBAND_FDR = 'infiniband-fdr';
    public const VALUE_INFINIBAND_EDR = 'infiniband-edr';
    public const VALUE_INFINIBAND_HDR = 'infiniband-hdr';
    public const VALUE_INFINIBAND_NDR = 'infiniband-ndr';
    public const VALUE_INFINIBAND_XDR = 'infiniband-xdr';
    public const VALUE_T1 = 't1';
    public const VALUE_E1 = 'e1';
    public const VALUE_T3 = 't3';
    public const VALUE_E3 = 'e3';
    public const VALUE_XDSL = 'xdsl';
    public const VALUE_DOCSIS = 'docsis';
    public const VALUE_BPON = 'bpon';
    public const VALUE_EPON = 'epon';
    public const VALUE__10G_EPON = '10g-epon';
    public const VALUE_GPON = 'gpon';
    public const VALUE_XG_PON = 'xg-pon';
    public const VALUE_XGS_PON = 'xgs-pon';
    public const VALUE_NG_PON2 = 'ng-pon2';
    public const VALUE__25G_PON = '25g-pon';
    public const VALUE__50G_PON = '50g-pon';
    public const VALUE_CISCO_STACKWISE = 'cisco-stackwise';
    public const VALUE_CISCO_STACKWISE_PLUS = 'cisco-stackwise-plus';
    public const VALUE_CISCO_FLEXSTACK = 'cisco-flexstack';
    public const VALUE_CISCO_FLEXSTACK_PLUS = 'cisco-flexstack-plus';
    public const VALUE_CISCO_STACKWISE_80 = 'cisco-stackwise-80';
    public const VALUE_CISCO_STACKWISE_160 = 'cisco-stackwise-160';
    public const VALUE_CISCO_STACKWISE_320 = 'cisco-stackwise-320';
    public const VALUE_CISCO_STACKWISE_480 = 'cisco-stackwise-480';
    public const VALUE_CISCO_STACKWISE_1T = 'cisco-stackwise-1t';
    public const VALUE_JUNIPER_VCP = 'juniper-vcp';
    public const VALUE_EXTREME_SUMMITSTACK = 'extreme-summitstack';
    public const VALUE_EXTREME_SUMMITSTACK_128 = 'extreme-summitstack-128';
    public const VALUE_EXTREME_SUMMITSTACK_256 = 'extreme-summitstack-256';
    public const VALUE_EXTREME_SUMMITSTACK_512 = 'extreme-summitstack-512';
    public const VALUE_OTHER = 'other';
    public const LABEL_VIRTUAL = 'Virtual';
    public const LABEL_BRIDGE = 'Bridge';
    public const LABEL_LINK_AGGREGATION_GROUP__LAG = 'Link Aggregation Group (LAG)';
    public const LABEL__100_BASE_FX__10_100_ME_FIBER = '100BASE-FX (10/100ME FIBER)';
    public const LABEL__100_BASE_LFX__10_100_ME_FIBER = '100BASE-LFX (10/100ME FIBER)';
    public const LABEL__100_BASE_TX__10_100_ME = '100BASE-TX (10/100ME)';
    public const LABEL__100_BASE_T1__10_100_ME_SINGLE_PAIR = '100BASE-T1 (10/100ME Single Pair)';
    public const LABEL__1000_BASE_T__1_GE = '1000BASE-T (1GE)';
    public const LABEL__1000_BASE_TX__1_GE = '1000BASE-TX (1GE)';
    public const LABEL__2_5_GBASE_T__2_5_GE = '2.5GBASE-T (2.5GE)';
    public const LABEL__5_GBASE_T__5_GE = '5GBASE-T (5GE)';
    public const LABEL__10_GBASE_T__10_GE = '10GBASE-T (10GE)';
    public const LABEL__10_GBASE_CX4__10_GE = '10GBASE-CX4 (10GE)';
    public const LABEL_GBIC__1_GE = 'GBIC (1GE)';
    public const LABEL_SFP__1_GE = 'SFP (1GE)';
    public const LABEL_SFP__10_GE = 'SFP+ (10GE)';
    public const LABEL_XFP__10_GE = 'XFP (10GE)';
    public const LABEL_XENPAK__10_GE = 'XENPAK (10GE)';
    public const LABEL_X2__10_GE = 'X2 (10GE)';
    public const LABEL_SFP28__25_GE = 'SFP28 (25GE)';
    public const LABEL_SFP56__50_GE = 'SFP56 (50GE)';
    public const LABEL_QSFP__40_GE = 'QSFP+ (40GE)';
    public const LABEL_QSFP28__50_GE = 'QSFP28 (50GE)';
    public const LABEL_CFP__100_GE = 'CFP (100GE)';
    public const LABEL_CFP2__100_GE = 'CFP2 (100GE)';
    public const LABEL_CFP2__200_GE = 'CFP2 (200GE)';
    public const LABEL_CFP2__400_GE = 'CFP2 (400GE)';
    public const LABEL_CFP4__100_GE = 'CFP4 (100GE)';
    public const LABEL_CXP__100_GE = 'CXP (100GE)';
    public const LABEL_CISCO_CPAK__100_GE = 'Cisco CPAK (100GE)';
    public const LABEL_DSFP__100_GE = 'DSFP (100GE)';
    public const LABEL_SFP_DD__100_GE = 'SFP-DD (100GE)';
    public const LABEL_QSFP28__100_GE = 'QSFP28 (100GE)';
    public const LABEL_QSFP_DD__100_GE = 'QSFP-DD (100GE)';
    public const LABEL_QSFP56__200_GE = 'QSFP56 (200GE)';
    public const LABEL_QSFP_DD__200_GE = 'QSFP-DD (200GE)';
    public const LABEL_QSFP112__400_GE = 'QSFP112 (400GE)';
    public const LABEL_QSFP_DD__400_GE = 'QSFP-DD (400GE)';
    public const LABEL_OSFP__400_GE = 'OSFP (400GE)';
    public const LABEL_OSFP_RHS__400_GE = 'OSFP-RHS (400GE)';
    public const LABEL_CDFP__400_GE = 'CDFP (400GE)';
    public const LABEL_CPF8__400_GE = 'CPF8 (400GE)';
    public const LABEL_QSFP_DD__800_GE = 'QSFP-DD (800GE)';
    public const LABEL_OSFP__800_GE = 'OSFP (800GE)';
    public const LABEL__1000_BASE_KX__1_GE = '1000BASE-KX (1GE)';
    public const LABEL__2_5_GBASE_KX__2_5_GE = '2.5GBASE-KX (2.5GE)';
    public const LABEL__5_GBASE_KR__5_GE = '5GBASE-KR (5GE)';
    public const LABEL__10_GBASE_KR__10_GE = '10GBASE-KR (10GE)';
    public const LABEL__10_GBASE_KX4__10_GE = '10GBASE-KX4 (10GE)';
    public const LABEL__25_GBASE_KR__25_GE = '25GBASE-KR (25GE)';
    public const LABEL__40_GBASE_KR4__40_GE = '40GBASE-KR4 (40GE)';
    public const LABEL__50_GBASE_KR__50_GE = '50GBASE-KR (50GE)';
    public const LABEL__100_GBASE_KP4__100_GE = '100GBASE-KP4 (100GE)';
    public const LABEL__100_GBASE_KR2__100_GE = '100GBASE-KR2 (100GE)';
    public const LABEL__100_GBASE_KR4__100_GE = '100GBASE-KR4 (100GE)';
    public const LABEL_IEEE_802_11A = 'IEEE 802.11a';
    public const LABEL_IEEE_802_11B_G = 'IEEE 802.11b/g';
    public const LABEL_IEEE_802_11N = 'IEEE 802.11n';
    public const LABEL_IEEE_802_11AC = 'IEEE 802.11ac';
    public const LABEL_IEEE_802_11AD = 'IEEE 802.11ad';
    public const LABEL_IEEE_802_11AX = 'IEEE 802.11ax';
    public const LABEL_IEEE_802_11AY = 'IEEE 802.11ay';
    public const LABEL_IEEE_802_11BE = 'IEEE 802.11be';
    public const LABEL_IEEE_802_15_1__BLUETOOTH = 'IEEE 802.15.1 (Bluetooth)';
    public const LABEL_OTHER__WIRELESS = 'Other (Wireless)';
    public const LABEL_GSM = 'GSM';
    public const LABEL_CDMA = 'CDMA';
    public const LABEL_LTE = 'LTE';
    public const LABEL__4_G = '4G';
    public const LABEL__5_G = '5G';
    public const LABEL_OC_3_STM_1 = 'OC-3/STM-1';
    public const LABEL_OC_12_STM_4 = 'OC-12/STM-4';
    public const LABEL_OC_48_STM_16 = 'OC-48/STM-16';
    public const LABEL_OC_192_STM_64 = 'OC-192/STM-64';
    public const LABEL_OC_768_STM_256 = 'OC-768/STM-256';
    public const LABEL_OC_1920_STM_640 = 'OC-1920/STM-640';
    public const LABEL_OC_3840_STM_1234 = 'OC-3840/STM-1234';
    public const LABEL_SFP__1_GFC = 'SFP (1GFC)';
    public const LABEL_SFP__2_GFC = 'SFP (2GFC)';
    public const LABEL_SFP__4_GFC = 'SFP (4GFC)';
    public const LABEL_SFP__8_GFC = 'SFP+ (8GFC)';
    public const LABEL_SFP__16_GFC = 'SFP+ (16GFC)';
    public const LABEL_SFP28__32_GFC = 'SFP28 (32GFC)';
    public const LABEL_SFP__32_GFC = 'SFP+ (32GFC)';
    public const LABEL_QSFP__64_GFC = 'QSFP+ (64GFC)';
    public const LABEL_SFP_DD__64_GFC = 'SFP-DD (64GFC)';
    public const LABEL_SFP__64_GFC = 'SFP+ (64GFC)';
    public const LABEL_QSFP28__128_GFC = 'QSFP28 (128GFC)';
    public const LABEL_SDR__2_GBPS = 'SDR (2 Gbps)';
    public const LABEL_DDR__4_GBPS = 'DDR (4 Gbps)';
    public const LABEL_QDR__8_GBPS = 'QDR (8 Gbps)';
    public const LABEL_FDR10__10_GBPS = 'FDR10 (10 Gbps)';
    public const LABEL_FDR__13_5_GBPS = 'FDR (13.5 Gbps)';
    public const LABEL_EDR__25_GBPS = 'EDR (25 Gbps)';
    public const LABEL_HDR__50_GBPS = 'HDR (50 Gbps)';
    public const LABEL_NDR__100_GBPS = 'NDR (100 Gbps)';
    public const LABEL_XDR__250_GBPS = 'XDR (250 Gbps)';
    public const LABEL_T1__1_544_MBPS = 'T1 (1.544 Mbps)';
    public const LABEL_E1__2_048_MBPS = 'E1 (2.048 Mbps)';
    public const LABEL_T3__45_MBPS = 'T3 (45 Mbps)';
    public const LABEL_E3__34_MBPS = 'E3 (34 Mbps)';
    public const LABEL_X_DSL = 'xDSL';
    public const LABEL_DOCSIS = 'DOCSIS';
    public const LABEL_BPON__622_MBPS___155_MBPS = 'BPON (622 Mbps / 155 Mbps)';
    public const LABEL_EPON__1_GBPS = 'EPON (1 Gbps)';
    public const LABEL__10_G_EPON__10_GBPS = '10G-EPON (10 Gbps)';
    public const LABEL_GPON__2_5_GBPS___1_25_GBPS = 'GPON (2.5 Gbps / 1.25 Gbps)';
    public const LABEL_XG_PON__10_GBPS___2_5_GBPS = 'XG-PON (10 Gbps / 2.5 Gbps)';
    public const LABEL_XGS_PON__10_GBPS = 'XGS-PON (10 Gbps)';
    public const LABEL_NG_PON2__TWDM_PON__4X10_GBPS = 'NG-PON2 (TWDM-PON) (4x10 Gbps)';
    public const LABEL__25_G_PON__25_GBPS = '25G-PON (25 Gbps)';
    public const LABEL__50_G_PON__50_GBPS = '50G-PON (50 Gbps)';
    public const LABEL_CISCO_STACK_WISE = 'Cisco StackWise';
    public const LABEL_CISCO_STACK_WISE_PLUS = 'Cisco StackWise Plus';
    public const LABEL_CISCO_FLEX_STACK = 'Cisco FlexStack';
    public const LABEL_CISCO_FLEX_STACK_PLUS = 'Cisco FlexStack Plus';
    public const LABEL_CISCO_STACK_WISE_80 = 'Cisco StackWise-80';
    public const LABEL_CISCO_STACK_WISE_160 = 'Cisco StackWise-160';
    public const LABEL_CISCO_STACK_WISE_320 = 'Cisco StackWise-320';
    public const LABEL_CISCO_STACK_WISE_480 = 'Cisco StackWise-480';
    public const LABEL_CISCO_STACK_WISE_1_T = 'Cisco StackWise-1T';
    public const LABEL_JUNIPER_VCP = 'Juniper VCP';
    public const LABEL_EXTREME_SUMMIT_STACK = 'Extreme SummitStack';
    public const LABEL_EXTREME_SUMMIT_STACK_128 = 'Extreme SummitStack-128';
    public const LABEL_EXTREME_SUMMIT_STACK_256 = 'Extreme SummitStack-256';
    public const LABEL_EXTREME_SUMMIT_STACK_512 = 'Extreme SummitStack-512';
    public const LABEL_OTHER = 'Other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValueAllowableValues()
    {
        return [
            self::VALUE_VIRTUAL,
            self::VALUE_BRIDGE,
            self::VALUE_LAG,
            self::VALUE__100BASE_FX,
            self::VALUE__100BASE_LFX,
            self::VALUE__100BASE_TX,
            self::VALUE__100BASE_T1,
            self::VALUE__1000BASE_T,
            self::VALUE__1000BASE_TX,
            self::VALUE__2_5GBASE_T,
            self::VALUE__5GBASE_T,
            self::VALUE__10GBASE_T,
            self::VALUE__10GBASE_CX4,
            self::VALUE__1000BASE_X_GBIC,
            self::VALUE__1000BASE_X_SFP,
            self::VALUE__10GBASE_X_SFPP,
            self::VALUE__10GBASE_X_XFP,
            self::VALUE__10GBASE_X_XENPAK,
            self::VALUE__10GBASE_X_X2,
            self::VALUE__25GBASE_X_SFP28,
            self::VALUE__50GBASE_X_SFP56,
            self::VALUE__40GBASE_X_QSFPP,
            self::VALUE__50GBASE_X_SFP28,
            self::VALUE__100GBASE_X_CFP,
            self::VALUE__100GBASE_X_CFP2,
            self::VALUE__200GBASE_X_CFP2,
            self::VALUE__400GBASE_X_CFP2,
            self::VALUE__100GBASE_X_CFP4,
            self::VALUE__100GBASE_X_CXP,
            self::VALUE__100GBASE_X_CPAK,
            self::VALUE__100GBASE_X_DSFP,
            self::VALUE__100GBASE_X_SFPDD,
            self::VALUE__100GBASE_X_QSFP28,
            self::VALUE__100GBASE_X_QSFPDD,
            self::VALUE__200GBASE_X_QSFP56,
            self::VALUE__200GBASE_X_QSFPDD,
            self::VALUE__400GBASE_X_QSFP112,
            self::VALUE__400GBASE_X_QSFPDD,
            self::VALUE__400GBASE_X_OSFP,
            self::VALUE__400GBASE_X_OSFP_RHS,
            self::VALUE__400GBASE_X_CDFP,
            self::VALUE__400GBASE_X_CFP8,
            self::VALUE__800GBASE_X_QSFPDD,
            self::VALUE__800GBASE_X_OSFP,
            self::VALUE__1000BASE_KX,
            self::VALUE__2_5GBASE_KX,
            self::VALUE__5GBASE_KR,
            self::VALUE__10GBASE_KR,
            self::VALUE__10GBASE_KX4,
            self::VALUE__25GBASE_KR,
            self::VALUE__40GBASE_KR4,
            self::VALUE__50GBASE_KR,
            self::VALUE__100GBASE_KP4,
            self::VALUE__100GBASE_KR2,
            self::VALUE__100GBASE_KR4,
            self::VALUE_IEEE802_11A,
            self::VALUE_IEEE802_11G,
            self::VALUE_IEEE802_11N,
            self::VALUE_IEEE802_11AC,
            self::VALUE_IEEE802_11AD,
            self::VALUE_IEEE802_11AX,
            self::VALUE_IEEE802_11AY,
            self::VALUE_IEEE802_11BE,
            self::VALUE_IEEE802_15_1,
            self::VALUE_OTHER_WIRELESS,
            self::VALUE_GSM,
            self::VALUE_CDMA,
            self::VALUE_LTE,
            self::VALUE__4G,
            self::VALUE__5G,
            self::VALUE_SONET_OC3,
            self::VALUE_SONET_OC12,
            self::VALUE_SONET_OC48,
            self::VALUE_SONET_OC192,
            self::VALUE_SONET_OC768,
            self::VALUE_SONET_OC1920,
            self::VALUE_SONET_OC3840,
            self::VALUE__1GFC_SFP,
            self::VALUE__2GFC_SFP,
            self::VALUE__4GFC_SFP,
            self::VALUE__8GFC_SFPP,
            self::VALUE__16GFC_SFPP,
            self::VALUE__32GFC_SFP28,
            self::VALUE__32GFC_SFPP,
            self::VALUE__64GFC_QSFPP,
            self::VALUE__64GFC_SFPDD,
            self::VALUE__64GFC_SFPP,
            self::VALUE__128GFC_QSFP28,
            self::VALUE_INFINIBAND_SDR,
            self::VALUE_INFINIBAND_DDR,
            self::VALUE_INFINIBAND_QDR,
            self::VALUE_INFINIBAND_FDR10,
            self::VALUE_INFINIBAND_FDR,
            self::VALUE_INFINIBAND_EDR,
            self::VALUE_INFINIBAND_HDR,
            self::VALUE_INFINIBAND_NDR,
            self::VALUE_INFINIBAND_XDR,
            self::VALUE_T1,
            self::VALUE_E1,
            self::VALUE_T3,
            self::VALUE_E3,
            self::VALUE_XDSL,
            self::VALUE_DOCSIS,
            self::VALUE_BPON,
            self::VALUE_EPON,
            self::VALUE__10G_EPON,
            self::VALUE_GPON,
            self::VALUE_XG_PON,
            self::VALUE_XGS_PON,
            self::VALUE_NG_PON2,
            self::VALUE__25G_PON,
            self::VALUE__50G_PON,
            self::VALUE_CISCO_STACKWISE,
            self::VALUE_CISCO_STACKWISE_PLUS,
            self::VALUE_CISCO_FLEXSTACK,
            self::VALUE_CISCO_FLEXSTACK_PLUS,
            self::VALUE_CISCO_STACKWISE_80,
            self::VALUE_CISCO_STACKWISE_160,
            self::VALUE_CISCO_STACKWISE_320,
            self::VALUE_CISCO_STACKWISE_480,
            self::VALUE_CISCO_STACKWISE_1T,
            self::VALUE_JUNIPER_VCP,
            self::VALUE_EXTREME_SUMMITSTACK,
            self::VALUE_EXTREME_SUMMITSTACK_128,
            self::VALUE_EXTREME_SUMMITSTACK_256,
            self::VALUE_EXTREME_SUMMITSTACK_512,
            self::VALUE_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelAllowableValues()
    {
        return [
            self::LABEL_VIRTUAL,
            self::LABEL_BRIDGE,
            self::LABEL_LINK_AGGREGATION_GROUP__LAG,
            self::LABEL__100_BASE_FX__10_100_ME_FIBER,
            self::LABEL__100_BASE_LFX__10_100_ME_FIBER,
            self::LABEL__100_BASE_TX__10_100_ME,
            self::LABEL__100_BASE_T1__10_100_ME_SINGLE_PAIR,
            self::LABEL__1000_BASE_T__1_GE,
            self::LABEL__1000_BASE_TX__1_GE,
            self::LABEL__2_5_GBASE_T__2_5_GE,
            self::LABEL__5_GBASE_T__5_GE,
            self::LABEL__10_GBASE_T__10_GE,
            self::LABEL__10_GBASE_CX4__10_GE,
            self::LABEL_GBIC__1_GE,
            self::LABEL_SFP__1_GE,
            self::LABEL_SFP__10_GE,
            self::LABEL_XFP__10_GE,
            self::LABEL_XENPAK__10_GE,
            self::LABEL_X2__10_GE,
            self::LABEL_SFP28__25_GE,
            self::LABEL_SFP56__50_GE,
            self::LABEL_QSFP__40_GE,
            self::LABEL_QSFP28__50_GE,
            self::LABEL_CFP__100_GE,
            self::LABEL_CFP2__100_GE,
            self::LABEL_CFP2__200_GE,
            self::LABEL_CFP2__400_GE,
            self::LABEL_CFP4__100_GE,
            self::LABEL_CXP__100_GE,
            self::LABEL_CISCO_CPAK__100_GE,
            self::LABEL_DSFP__100_GE,
            self::LABEL_SFP_DD__100_GE,
            self::LABEL_QSFP28__100_GE,
            self::LABEL_QSFP_DD__100_GE,
            self::LABEL_QSFP56__200_GE,
            self::LABEL_QSFP_DD__200_GE,
            self::LABEL_QSFP112__400_GE,
            self::LABEL_QSFP_DD__400_GE,
            self::LABEL_OSFP__400_GE,
            self::LABEL_OSFP_RHS__400_GE,
            self::LABEL_CDFP__400_GE,
            self::LABEL_CPF8__400_GE,
            self::LABEL_QSFP_DD__800_GE,
            self::LABEL_OSFP__800_GE,
            self::LABEL__1000_BASE_KX__1_GE,
            self::LABEL__2_5_GBASE_KX__2_5_GE,
            self::LABEL__5_GBASE_KR__5_GE,
            self::LABEL__10_GBASE_KR__10_GE,
            self::LABEL__10_GBASE_KX4__10_GE,
            self::LABEL__25_GBASE_KR__25_GE,
            self::LABEL__40_GBASE_KR4__40_GE,
            self::LABEL__50_GBASE_KR__50_GE,
            self::LABEL__100_GBASE_KP4__100_GE,
            self::LABEL__100_GBASE_KR2__100_GE,
            self::LABEL__100_GBASE_KR4__100_GE,
            self::LABEL_IEEE_802_11A,
            self::LABEL_IEEE_802_11B_G,
            self::LABEL_IEEE_802_11N,
            self::LABEL_IEEE_802_11AC,
            self::LABEL_IEEE_802_11AD,
            self::LABEL_IEEE_802_11AX,
            self::LABEL_IEEE_802_11AY,
            self::LABEL_IEEE_802_11BE,
            self::LABEL_IEEE_802_15_1__BLUETOOTH,
            self::LABEL_OTHER__WIRELESS,
            self::LABEL_GSM,
            self::LABEL_CDMA,
            self::LABEL_LTE,
            self::LABEL__4_G,
            self::LABEL__5_G,
            self::LABEL_OC_3_STM_1,
            self::LABEL_OC_12_STM_4,
            self::LABEL_OC_48_STM_16,
            self::LABEL_OC_192_STM_64,
            self::LABEL_OC_768_STM_256,
            self::LABEL_OC_1920_STM_640,
            self::LABEL_OC_3840_STM_1234,
            self::LABEL_SFP__1_GFC,
            self::LABEL_SFP__2_GFC,
            self::LABEL_SFP__4_GFC,
            self::LABEL_SFP__8_GFC,
            self::LABEL_SFP__16_GFC,
            self::LABEL_SFP28__32_GFC,
            self::LABEL_SFP__32_GFC,
            self::LABEL_QSFP__64_GFC,
            self::LABEL_SFP_DD__64_GFC,
            self::LABEL_SFP__64_GFC,
            self::LABEL_QSFP28__128_GFC,
            self::LABEL_SDR__2_GBPS,
            self::LABEL_DDR__4_GBPS,
            self::LABEL_QDR__8_GBPS,
            self::LABEL_FDR10__10_GBPS,
            self::LABEL_FDR__13_5_GBPS,
            self::LABEL_EDR__25_GBPS,
            self::LABEL_HDR__50_GBPS,
            self::LABEL_NDR__100_GBPS,
            self::LABEL_XDR__250_GBPS,
            self::LABEL_T1__1_544_MBPS,
            self::LABEL_E1__2_048_MBPS,
            self::LABEL_T3__45_MBPS,
            self::LABEL_E3__34_MBPS,
            self::LABEL_X_DSL,
            self::LABEL_DOCSIS,
            self::LABEL_BPON__622_MBPS___155_MBPS,
            self::LABEL_EPON__1_GBPS,
            self::LABEL__10_G_EPON__10_GBPS,
            self::LABEL_GPON__2_5_GBPS___1_25_GBPS,
            self::LABEL_XG_PON__10_GBPS___2_5_GBPS,
            self::LABEL_XGS_PON__10_GBPS,
            self::LABEL_NG_PON2__TWDM_PON__4X10_GBPS,
            self::LABEL__25_G_PON__25_GBPS,
            self::LABEL__50_G_PON__50_GBPS,
            self::LABEL_CISCO_STACK_WISE,
            self::LABEL_CISCO_STACK_WISE_PLUS,
            self::LABEL_CISCO_FLEX_STACK,
            self::LABEL_CISCO_FLEX_STACK_PLUS,
            self::LABEL_CISCO_STACK_WISE_80,
            self::LABEL_CISCO_STACK_WISE_160,
            self::LABEL_CISCO_STACK_WISE_320,
            self::LABEL_CISCO_STACK_WISE_480,
            self::LABEL_CISCO_STACK_WISE_1_T,
            self::LABEL_JUNIPER_VCP,
            self::LABEL_EXTREME_SUMMIT_STACK,
            self::LABEL_EXTREME_SUMMIT_STACK_128,
            self::LABEL_EXTREME_SUMMIT_STACK_256,
            self::LABEL_EXTREME_SUMMIT_STACK_512,
            self::LABEL_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getValueAllowableValues();
        if (!is_null($this->container['value']) && !in_array($this->container['value'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'value', must be one of '%s'",
                $this->container['value'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLabelAllowableValues();
        if (!is_null($this->container['label']) && !in_array($this->container['label'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'label', must be one of '%s'",
                $this->container['label'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value * `virtual` - Virtual * `bridge` - Bridge * `lag` - Link Aggregation Group (LAG) * `100base-fx` - 100BASE-FX (10/100ME FIBER) * `100base-lfx` - 100BASE-LFX (10/100ME FIBER) * `100base-tx` - 100BASE-TX (10/100ME) * `100base-t1` - 100BASE-T1 (10/100ME Single Pair) * `1000base-t` - 1000BASE-T (1GE) * `1000base-tx` - 1000BASE-TX (1GE) * `2.5gbase-t` - 2.5GBASE-T (2.5GE) * `5gbase-t` - 5GBASE-T (5GE) * `10gbase-t` - 10GBASE-T (10GE) * `10gbase-cx4` - 10GBASE-CX4 (10GE) * `1000base-x-gbic` - GBIC (1GE) * `1000base-x-sfp` - SFP (1GE) * `10gbase-x-sfpp` - SFP+ (10GE) * `10gbase-x-xfp` - XFP (10GE) * `10gbase-x-xenpak` - XENPAK (10GE) * `10gbase-x-x2` - X2 (10GE) * `25gbase-x-sfp28` - SFP28 (25GE) * `50gbase-x-sfp56` - SFP56 (50GE) * `40gbase-x-qsfpp` - QSFP+ (40GE) * `50gbase-x-sfp28` - QSFP28 (50GE) * `100gbase-x-cfp` - CFP (100GE) * `100gbase-x-cfp2` - CFP2 (100GE) * `200gbase-x-cfp2` - CFP2 (200GE) * `400gbase-x-cfp2` - CFP2 (400GE) * `100gbase-x-cfp4` - CFP4 (100GE) * `100gbase-x-cxp` - CXP (100GE) * `100gbase-x-cpak` - Cisco CPAK (100GE) * `100gbase-x-dsfp` - DSFP (100GE) * `100gbase-x-sfpdd` - SFP-DD (100GE) * `100gbase-x-qsfp28` - QSFP28 (100GE) * `100gbase-x-qsfpdd` - QSFP-DD (100GE) * `200gbase-x-qsfp56` - QSFP56 (200GE) * `200gbase-x-qsfpdd` - QSFP-DD (200GE) * `400gbase-x-qsfp112` - QSFP112 (400GE) * `400gbase-x-qsfpdd` - QSFP-DD (400GE) * `400gbase-x-osfp` - OSFP (400GE) * `400gbase-x-osfp-rhs` - OSFP-RHS (400GE) * `400gbase-x-cdfp` - CDFP (400GE) * `400gbase-x-cfp8` - CPF8 (400GE) * `800gbase-x-qsfpdd` - QSFP-DD (800GE) * `800gbase-x-osfp` - OSFP (800GE) * `1000base-kx` - 1000BASE-KX (1GE) * `2.5gbase-kx` - 2.5GBASE-KX (2.5GE) * `5gbase-kr` - 5GBASE-KR (5GE) * `10gbase-kr` - 10GBASE-KR (10GE) * `10gbase-kx4` - 10GBASE-KX4 (10GE) * `25gbase-kr` - 25GBASE-KR (25GE) * `40gbase-kr4` - 40GBASE-KR4 (40GE) * `50gbase-kr` - 50GBASE-KR (50GE) * `100gbase-kp4` - 100GBASE-KP4 (100GE) * `100gbase-kr2` - 100GBASE-KR2 (100GE) * `100gbase-kr4` - 100GBASE-KR4 (100GE) * `ieee802.11a` - IEEE 802.11a * `ieee802.11g` - IEEE 802.11b/g * `ieee802.11n` - IEEE 802.11n * `ieee802.11ac` - IEEE 802.11ac * `ieee802.11ad` - IEEE 802.11ad * `ieee802.11ax` - IEEE 802.11ax * `ieee802.11ay` - IEEE 802.11ay * `ieee802.11be` - IEEE 802.11be * `ieee802.15.1` - IEEE 802.15.1 (Bluetooth) * `other-wireless` - Other (Wireless) * `gsm` - GSM * `cdma` - CDMA * `lte` - LTE * `4g` - 4G * `5g` - 5G * `sonet-oc3` - OC-3/STM-1 * `sonet-oc12` - OC-12/STM-4 * `sonet-oc48` - OC-48/STM-16 * `sonet-oc192` - OC-192/STM-64 * `sonet-oc768` - OC-768/STM-256 * `sonet-oc1920` - OC-1920/STM-640 * `sonet-oc3840` - OC-3840/STM-1234 * `1gfc-sfp` - SFP (1GFC) * `2gfc-sfp` - SFP (2GFC) * `4gfc-sfp` - SFP (4GFC) * `8gfc-sfpp` - SFP+ (8GFC) * `16gfc-sfpp` - SFP+ (16GFC) * `32gfc-sfp28` - SFP28 (32GFC) * `32gfc-sfpp` - SFP+ (32GFC) * `64gfc-qsfpp` - QSFP+ (64GFC) * `64gfc-sfpdd` - SFP-DD (64GFC) * `64gfc-sfpp` - SFP+ (64GFC) * `128gfc-qsfp28` - QSFP28 (128GFC) * `infiniband-sdr` - SDR (2 Gbps) * `infiniband-ddr` - DDR (4 Gbps) * `infiniband-qdr` - QDR (8 Gbps) * `infiniband-fdr10` - FDR10 (10 Gbps) * `infiniband-fdr` - FDR (13.5 Gbps) * `infiniband-edr` - EDR (25 Gbps) * `infiniband-hdr` - HDR (50 Gbps) * `infiniband-ndr` - NDR (100 Gbps) * `infiniband-xdr` - XDR (250 Gbps) * `t1` - T1 (1.544 Mbps) * `e1` - E1 (2.048 Mbps) * `t3` - T3 (45 Mbps) * `e3` - E3 (34 Mbps) * `xdsl` - xDSL * `docsis` - DOCSIS * `bpon` - BPON (622 Mbps / 155 Mbps) * `epon` - EPON (1 Gbps) * `10g-epon` - 10G-EPON (10 Gbps) * `gpon` - GPON (2.5 Gbps / 1.25 Gbps) * `xg-pon` - XG-PON (10 Gbps / 2.5 Gbps) * `xgs-pon` - XGS-PON (10 Gbps) * `ng-pon2` - NG-PON2 (TWDM-PON) (4x10 Gbps) * `25g-pon` - 25G-PON (25 Gbps) * `50g-pon` - 50G-PON (50 Gbps) * `cisco-stackwise` - Cisco StackWise * `cisco-stackwise-plus` - Cisco StackWise Plus * `cisco-flexstack` - Cisco FlexStack * `cisco-flexstack-plus` - Cisco FlexStack Plus * `cisco-stackwise-80` - Cisco StackWise-80 * `cisco-stackwise-160` - Cisco StackWise-160 * `cisco-stackwise-320` - Cisco StackWise-320 * `cisco-stackwise-480` - Cisco StackWise-480 * `cisco-stackwise-1t` - Cisco StackWise-1T * `juniper-vcp` - Juniper VCP * `extreme-summitstack` - Extreme SummitStack * `extreme-summitstack-128` - Extreme SummitStack-128 * `extreme-summitstack-256` - Extreme SummitStack-256 * `extreme-summitstack-512` - Extreme SummitStack-512 * `other` - Other
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $allowedValues = $this->getValueAllowableValues();
        if (!in_array($value, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'value', must be one of '%s'",
                    $value,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $allowedValues = $this->getLabelAllowableValues();
        if (!in_array($label, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'label', must be one of '%s'",
                    $label,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['label'] = $label;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


