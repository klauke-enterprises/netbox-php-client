<?php
/**
 * ObjectChange
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1.1 (4.1)
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ObjectChange Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ObjectChange implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ObjectChange';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'url' => 'string',
        'display_url' => 'string',
        'display' => 'string',
        'time' => '\DateTime',
        'user' => '\OpenAPI\Client\Model\BriefUser',
        'user_name' => 'string',
        'request_id' => 'string',
        'action' => '\OpenAPI\Client\Model\ObjectChangeAction',
        'changed_object_type' => 'string',
        'changed_object_id' => 'int',
        'changed_object' => 'mixed',
        'prechange_data' => 'mixed',
        'postchange_data' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'url' => 'uri',
        'display_url' => 'uri',
        'display' => null,
        'time' => 'date-time',
        'user' => null,
        'user_name' => null,
        'request_id' => 'uuid',
        'action' => null,
        'changed_object_type' => null,
        'changed_object_id' => 'int64',
        'changed_object' => null,
        'prechange_data' => null,
        'postchange_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'url' => false,
        'display_url' => false,
        'display' => false,
        'time' => false,
        'user' => false,
        'user_name' => false,
        'request_id' => false,
        'action' => false,
        'changed_object_type' => false,
        'changed_object_id' => false,
        'changed_object' => true,
        'prechange_data' => true,
        'postchange_data' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'url' => 'url',
        'display_url' => 'display_url',
        'display' => 'display',
        'time' => 'time',
        'user' => 'user',
        'user_name' => 'user_name',
        'request_id' => 'request_id',
        'action' => 'action',
        'changed_object_type' => 'changed_object_type',
        'changed_object_id' => 'changed_object_id',
        'changed_object' => 'changed_object',
        'prechange_data' => 'prechange_data',
        'postchange_data' => 'postchange_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'url' => 'setUrl',
        'display_url' => 'setDisplayUrl',
        'display' => 'setDisplay',
        'time' => 'setTime',
        'user' => 'setUser',
        'user_name' => 'setUserName',
        'request_id' => 'setRequestId',
        'action' => 'setAction',
        'changed_object_type' => 'setChangedObjectType',
        'changed_object_id' => 'setChangedObjectId',
        'changed_object' => 'setChangedObject',
        'prechange_data' => 'setPrechangeData',
        'postchange_data' => 'setPostchangeData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'url' => 'getUrl',
        'display_url' => 'getDisplayUrl',
        'display' => 'getDisplay',
        'time' => 'getTime',
        'user' => 'getUser',
        'user_name' => 'getUserName',
        'request_id' => 'getRequestId',
        'action' => 'getAction',
        'changed_object_type' => 'getChangedObjectType',
        'changed_object_id' => 'getChangedObjectId',
        'changed_object' => 'getChangedObject',
        'prechange_data' => 'getPrechangeData',
        'postchange_data' => 'getPostchangeData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('display_url', $data ?? [], null);
        $this->setIfExists('display', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('user_name', $data ?? [], null);
        $this->setIfExists('request_id', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('changed_object_type', $data ?? [], null);
        $this->setIfExists('changed_object_id', $data ?? [], null);
        $this->setIfExists('changed_object', $data ?? [], null);
        $this->setIfExists('prechange_data', $data ?? [], null);
        $this->setIfExists('postchange_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['display_url'] === null) {
            $invalidProperties[] = "'display_url' can't be null";
        }
        if ($this->container['display'] === null) {
            $invalidProperties[] = "'display' can't be null";
        }
        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['user_name'] === null) {
            $invalidProperties[] = "'user_name' can't be null";
        }
        if ($this->container['request_id'] === null) {
            $invalidProperties[] = "'request_id' can't be null";
        }
        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['changed_object_type'] === null) {
            $invalidProperties[] = "'changed_object_type' can't be null";
        }
        if ($this->container['changed_object_id'] === null) {
            $invalidProperties[] = "'changed_object_id' can't be null";
        }
        if (($this->container['changed_object_id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'changed_object_id', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['changed_object_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'changed_object_id', must be bigger than or equal to 0.";
        }

        if ($this->container['changed_object'] === null) {
            $invalidProperties[] = "'changed_object' can't be null";
        }
        if ($this->container['prechange_data'] === null) {
            $invalidProperties[] = "'prechange_data' can't be null";
        }
        if ($this->container['postchange_data'] === null) {
            $invalidProperties[] = "'postchange_data' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets display_url
     *
     * @return string
     */
    public function getDisplayUrl()
    {
        return $this->container['display_url'];
    }

    /**
     * Sets display_url
     *
     * @param string $display_url display_url
     *
     * @return self
     */
    public function setDisplayUrl($display_url)
    {
        if (is_null($display_url)) {
            throw new \InvalidArgumentException('non-nullable display_url cannot be null');
        }
        $this->container['display_url'] = $display_url;

        return $this;
    }

    /**
     * Gets display
     *
     * @return string
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param string $display display
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (is_null($display)) {
            throw new \InvalidArgumentException('non-nullable display cannot be null');
        }
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets time
     *
     * @return \DateTime
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param \DateTime $time time
     *
     * @return self
     */
    public function setTime($time)
    {
        if (is_null($time)) {
            throw new \InvalidArgumentException('non-nullable time cannot be null');
        }
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\BriefUser
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\BriefUser $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        if (is_null($user_name)) {
            throw new \InvalidArgumentException('non-nullable user_name cannot be null');
        }
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id request_id
     *
     * @return self
     */
    public function setRequestId($request_id)
    {
        if (is_null($request_id)) {
            throw new \InvalidArgumentException('non-nullable request_id cannot be null');
        }
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets action
     *
     * @return \OpenAPI\Client\Model\ObjectChangeAction
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param \OpenAPI\Client\Model\ObjectChangeAction $action action
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets changed_object_type
     *
     * @return string
     */
    public function getChangedObjectType()
    {
        return $this->container['changed_object_type'];
    }

    /**
     * Sets changed_object_type
     *
     * @param string $changed_object_type changed_object_type
     *
     * @return self
     */
    public function setChangedObjectType($changed_object_type)
    {
        if (is_null($changed_object_type)) {
            throw new \InvalidArgumentException('non-nullable changed_object_type cannot be null');
        }
        $this->container['changed_object_type'] = $changed_object_type;

        return $this;
    }

    /**
     * Gets changed_object_id
     *
     * @return int
     */
    public function getChangedObjectId()
    {
        return $this->container['changed_object_id'];
    }

    /**
     * Sets changed_object_id
     *
     * @param int $changed_object_id changed_object_id
     *
     * @return self
     */
    public function setChangedObjectId($changed_object_id)
    {
        if (is_null($changed_object_id)) {
            throw new \InvalidArgumentException('non-nullable changed_object_id cannot be null');
        }

        if (($changed_object_id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $changed_object_id when calling ObjectChange., must be smaller than or equal to 9223372036854775807.');
        }
        if (($changed_object_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $changed_object_id when calling ObjectChange., must be bigger than or equal to 0.');
        }

        $this->container['changed_object_id'] = $changed_object_id;

        return $this;
    }

    /**
     * Gets changed_object
     *
     * @return mixed
     */
    public function getChangedObject()
    {
        return $this->container['changed_object'];
    }

    /**
     * Sets changed_object
     *
     * @param mixed $changed_object changed_object
     *
     * @return self
     */
    public function setChangedObject($changed_object)
    {
        if (is_null($changed_object)) {
            array_push($this->openAPINullablesSetToNull, 'changed_object');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('changed_object', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['changed_object'] = $changed_object;

        return $this;
    }

    /**
     * Gets prechange_data
     *
     * @return mixed
     */
    public function getPrechangeData()
    {
        return $this->container['prechange_data'];
    }

    /**
     * Sets prechange_data
     *
     * @param mixed $prechange_data prechange_data
     *
     * @return self
     */
    public function setPrechangeData($prechange_data)
    {
        if (is_null($prechange_data)) {
            array_push($this->openAPINullablesSetToNull, 'prechange_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prechange_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prechange_data'] = $prechange_data;

        return $this;
    }

    /**
     * Gets postchange_data
     *
     * @return mixed
     */
    public function getPostchangeData()
    {
        return $this->container['postchange_data'];
    }

    /**
     * Sets postchange_data
     *
     * @param mixed $postchange_data postchange_data
     *
     * @return self
     */
    public function setPostchangeData($postchange_data)
    {
        if (is_null($postchange_data)) {
            array_push($this->openAPINullablesSetToNull, 'postchange_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postchange_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postchange_data'] = $postchange_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


