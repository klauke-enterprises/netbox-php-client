<?php
/**
 * CircuitTermination
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1.1 (4.1)
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CircuitTermination Class Doc Comment
 *
 * @category Class
 * @description Adds support for custom fields and tags.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CircuitTermination implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CircuitTermination';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'url' => 'string',
        'display_url' => 'string',
        'display' => 'string',
        'circuit' => '\OpenAPI\Client\Model\BriefCircuit',
        'term_side' => 'string',
        'site' => '\OpenAPI\Client\Model\BriefSite',
        'provider_network' => '\OpenAPI\Client\Model\BriefProviderNetwork',
        'port_speed' => 'int',
        'upstream_speed' => 'int',
        'xconnect_id' => 'string',
        'pp_info' => 'string',
        'description' => 'string',
        'mark_connected' => 'bool',
        'cable' => '\OpenAPI\Client\Model\BriefCable',
        'cable_end' => 'string',
        'link_peers' => 'mixed[]',
        'link_peers_type' => 'string',
        'tags' => '\OpenAPI\Client\Model\NestedTag[]',
        'custom_fields' => 'array<string,mixed>',
        'created' => '\DateTime',
        'last_updated' => '\DateTime',
        '_occupied' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'url' => 'uri',
        'display_url' => 'uri',
        'display' => null,
        'circuit' => null,
        'term_side' => null,
        'site' => null,
        'provider_network' => null,
        'port_speed' => null,
        'upstream_speed' => null,
        'xconnect_id' => null,
        'pp_info' => null,
        'description' => null,
        'mark_connected' => null,
        'cable' => null,
        'cable_end' => null,
        'link_peers' => null,
        'link_peers_type' => null,
        'tags' => null,
        'custom_fields' => null,
        'created' => 'date-time',
        'last_updated' => 'date-time',
        '_occupied' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'url' => false,
        'display_url' => false,
        'display' => false,
        'circuit' => false,
        'term_side' => false,
        'site' => true,
        'provider_network' => true,
        'port_speed' => true,
        'upstream_speed' => true,
        'xconnect_id' => false,
        'pp_info' => false,
        'description' => false,
        'mark_connected' => false,
        'cable' => true,
        'cable_end' => false,
        'link_peers' => false,
        'link_peers_type' => true,
        'tags' => false,
        'custom_fields' => false,
        'created' => true,
        'last_updated' => true,
        '_occupied' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'url' => 'url',
        'display_url' => 'display_url',
        'display' => 'display',
        'circuit' => 'circuit',
        'term_side' => 'term_side',
        'site' => 'site',
        'provider_network' => 'provider_network',
        'port_speed' => 'port_speed',
        'upstream_speed' => 'upstream_speed',
        'xconnect_id' => 'xconnect_id',
        'pp_info' => 'pp_info',
        'description' => 'description',
        'mark_connected' => 'mark_connected',
        'cable' => 'cable',
        'cable_end' => 'cable_end',
        'link_peers' => 'link_peers',
        'link_peers_type' => 'link_peers_type',
        'tags' => 'tags',
        'custom_fields' => 'custom_fields',
        'created' => 'created',
        'last_updated' => 'last_updated',
        '_occupied' => '_occupied'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'url' => 'setUrl',
        'display_url' => 'setDisplayUrl',
        'display' => 'setDisplay',
        'circuit' => 'setCircuit',
        'term_side' => 'setTermSide',
        'site' => 'setSite',
        'provider_network' => 'setProviderNetwork',
        'port_speed' => 'setPortSpeed',
        'upstream_speed' => 'setUpstreamSpeed',
        'xconnect_id' => 'setXconnectId',
        'pp_info' => 'setPpInfo',
        'description' => 'setDescription',
        'mark_connected' => 'setMarkConnected',
        'cable' => 'setCable',
        'cable_end' => 'setCableEnd',
        'link_peers' => 'setLinkPeers',
        'link_peers_type' => 'setLinkPeersType',
        'tags' => 'setTags',
        'custom_fields' => 'setCustomFields',
        'created' => 'setCreated',
        'last_updated' => 'setLastUpdated',
        '_occupied' => 'setOccupied'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'url' => 'getUrl',
        'display_url' => 'getDisplayUrl',
        'display' => 'getDisplay',
        'circuit' => 'getCircuit',
        'term_side' => 'getTermSide',
        'site' => 'getSite',
        'provider_network' => 'getProviderNetwork',
        'port_speed' => 'getPortSpeed',
        'upstream_speed' => 'getUpstreamSpeed',
        'xconnect_id' => 'getXconnectId',
        'pp_info' => 'getPpInfo',
        'description' => 'getDescription',
        'mark_connected' => 'getMarkConnected',
        'cable' => 'getCable',
        'cable_end' => 'getCableEnd',
        'link_peers' => 'getLinkPeers',
        'link_peers_type' => 'getLinkPeersType',
        'tags' => 'getTags',
        'custom_fields' => 'getCustomFields',
        'created' => 'getCreated',
        'last_updated' => 'getLastUpdated',
        '_occupied' => 'getOccupied'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TERM_SIDE_A = 'A';
    public const TERM_SIDE_Z = 'Z';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTermSideAllowableValues()
    {
        return [
            self::TERM_SIDE_A,
            self::TERM_SIDE_Z,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('display_url', $data ?? [], null);
        $this->setIfExists('display', $data ?? [], null);
        $this->setIfExists('circuit', $data ?? [], null);
        $this->setIfExists('term_side', $data ?? [], null);
        $this->setIfExists('site', $data ?? [], null);
        $this->setIfExists('provider_network', $data ?? [], null);
        $this->setIfExists('port_speed', $data ?? [], null);
        $this->setIfExists('upstream_speed', $data ?? [], null);
        $this->setIfExists('xconnect_id', $data ?? [], null);
        $this->setIfExists('pp_info', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('mark_connected', $data ?? [], null);
        $this->setIfExists('cable', $data ?? [], null);
        $this->setIfExists('cable_end', $data ?? [], null);
        $this->setIfExists('link_peers', $data ?? [], null);
        $this->setIfExists('link_peers_type', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('_occupied', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['display_url'] === null) {
            $invalidProperties[] = "'display_url' can't be null";
        }
        if ($this->container['display'] === null) {
            $invalidProperties[] = "'display' can't be null";
        }
        if ($this->container['circuit'] === null) {
            $invalidProperties[] = "'circuit' can't be null";
        }
        if ($this->container['term_side'] === null) {
            $invalidProperties[] = "'term_side' can't be null";
        }
        $allowedValues = $this->getTermSideAllowableValues();
        if (!is_null($this->container['term_side']) && !in_array($this->container['term_side'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'term_side', must be one of '%s'",
                $this->container['term_side'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['port_speed']) && ($this->container['port_speed'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'port_speed', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['port_speed']) && ($this->container['port_speed'] < 0)) {
            $invalidProperties[] = "invalid value for 'port_speed', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['upstream_speed']) && ($this->container['upstream_speed'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'upstream_speed', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['upstream_speed']) && ($this->container['upstream_speed'] < 0)) {
            $invalidProperties[] = "invalid value for 'upstream_speed', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['xconnect_id']) && (mb_strlen($this->container['xconnect_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'xconnect_id', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['pp_info']) && (mb_strlen($this->container['pp_info']) > 100)) {
            $invalidProperties[] = "invalid value for 'pp_info', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 200)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 200.";
        }

        if ($this->container['cable'] === null) {
            $invalidProperties[] = "'cable' can't be null";
        }
        if ($this->container['cable_end'] === null) {
            $invalidProperties[] = "'cable_end' can't be null";
        }
        if ($this->container['link_peers'] === null) {
            $invalidProperties[] = "'link_peers' can't be null";
        }
        if ($this->container['link_peers_type'] === null) {
            $invalidProperties[] = "'link_peers_type' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['last_updated'] === null) {
            $invalidProperties[] = "'last_updated' can't be null";
        }
        if ($this->container['_occupied'] === null) {
            $invalidProperties[] = "'_occupied' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets display_url
     *
     * @return string
     */
    public function getDisplayUrl()
    {
        return $this->container['display_url'];
    }

    /**
     * Sets display_url
     *
     * @param string $display_url display_url
     *
     * @return self
     */
    public function setDisplayUrl($display_url)
    {
        if (is_null($display_url)) {
            throw new \InvalidArgumentException('non-nullable display_url cannot be null');
        }
        $this->container['display_url'] = $display_url;

        return $this;
    }

    /**
     * Gets display
     *
     * @return string
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param string $display display
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (is_null($display)) {
            throw new \InvalidArgumentException('non-nullable display cannot be null');
        }
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets circuit
     *
     * @return \OpenAPI\Client\Model\BriefCircuit
     */
    public function getCircuit()
    {
        return $this->container['circuit'];
    }

    /**
     * Sets circuit
     *
     * @param \OpenAPI\Client\Model\BriefCircuit $circuit circuit
     *
     * @return self
     */
    public function setCircuit($circuit)
    {
        if (is_null($circuit)) {
            throw new \InvalidArgumentException('non-nullable circuit cannot be null');
        }
        $this->container['circuit'] = $circuit;

        return $this;
    }

    /**
     * Gets term_side
     *
     * @return string
     */
    public function getTermSide()
    {
        return $this->container['term_side'];
    }

    /**
     * Sets term_side
     *
     * @param string $term_side * `A` - A * `Z` - Z
     *
     * @return self
     */
    public function setTermSide($term_side)
    {
        if (is_null($term_side)) {
            throw new \InvalidArgumentException('non-nullable term_side cannot be null');
        }
        $allowedValues = $this->getTermSideAllowableValues();
        if (!in_array($term_side, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'term_side', must be one of '%s'",
                    $term_side,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['term_side'] = $term_side;

        return $this;
    }

    /**
     * Gets site
     *
     * @return \OpenAPI\Client\Model\BriefSite|null
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \OpenAPI\Client\Model\BriefSite|null $site site
     *
     * @return self
     */
    public function setSite($site)
    {
        if (is_null($site)) {
            array_push($this->openAPINullablesSetToNull, 'site');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('site', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets provider_network
     *
     * @return \OpenAPI\Client\Model\BriefProviderNetwork|null
     */
    public function getProviderNetwork()
    {
        return $this->container['provider_network'];
    }

    /**
     * Sets provider_network
     *
     * @param \OpenAPI\Client\Model\BriefProviderNetwork|null $provider_network provider_network
     *
     * @return self
     */
    public function setProviderNetwork($provider_network)
    {
        if (is_null($provider_network)) {
            array_push($this->openAPINullablesSetToNull, 'provider_network');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_network', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_network'] = $provider_network;

        return $this;
    }

    /**
     * Gets port_speed
     *
     * @return int|null
     */
    public function getPortSpeed()
    {
        return $this->container['port_speed'];
    }

    /**
     * Sets port_speed
     *
     * @param int|null $port_speed Physical circuit speed
     *
     * @return self
     */
    public function setPortSpeed($port_speed)
    {
        if (is_null($port_speed)) {
            array_push($this->openAPINullablesSetToNull, 'port_speed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('port_speed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($port_speed) && ($port_speed > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $port_speed when calling CircuitTermination., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($port_speed) && ($port_speed < 0)) {
            throw new \InvalidArgumentException('invalid value for $port_speed when calling CircuitTermination., must be bigger than or equal to 0.');
        }

        $this->container['port_speed'] = $port_speed;

        return $this;
    }

    /**
     * Gets upstream_speed
     *
     * @return int|null
     */
    public function getUpstreamSpeed()
    {
        return $this->container['upstream_speed'];
    }

    /**
     * Sets upstream_speed
     *
     * @param int|null $upstream_speed Upstream speed, if different from port speed
     *
     * @return self
     */
    public function setUpstreamSpeed($upstream_speed)
    {
        if (is_null($upstream_speed)) {
            array_push($this->openAPINullablesSetToNull, 'upstream_speed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upstream_speed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($upstream_speed) && ($upstream_speed > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $upstream_speed when calling CircuitTermination., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($upstream_speed) && ($upstream_speed < 0)) {
            throw new \InvalidArgumentException('invalid value for $upstream_speed when calling CircuitTermination., must be bigger than or equal to 0.');
        }

        $this->container['upstream_speed'] = $upstream_speed;

        return $this;
    }

    /**
     * Gets xconnect_id
     *
     * @return string|null
     */
    public function getXconnectId()
    {
        return $this->container['xconnect_id'];
    }

    /**
     * Sets xconnect_id
     *
     * @param string|null $xconnect_id ID of the local cross-connect
     *
     * @return self
     */
    public function setXconnectId($xconnect_id)
    {
        if (is_null($xconnect_id)) {
            throw new \InvalidArgumentException('non-nullable xconnect_id cannot be null');
        }
        if ((mb_strlen($xconnect_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $xconnect_id when calling CircuitTermination., must be smaller than or equal to 50.');
        }

        $this->container['xconnect_id'] = $xconnect_id;

        return $this;
    }

    /**
     * Gets pp_info
     *
     * @return string|null
     */
    public function getPpInfo()
    {
        return $this->container['pp_info'];
    }

    /**
     * Sets pp_info
     *
     * @param string|null $pp_info Patch panel ID and port number(s)
     *
     * @return self
     */
    public function setPpInfo($pp_info)
    {
        if (is_null($pp_info)) {
            throw new \InvalidArgumentException('non-nullable pp_info cannot be null');
        }
        if ((mb_strlen($pp_info) > 100)) {
            throw new \InvalidArgumentException('invalid length for $pp_info when calling CircuitTermination., must be smaller than or equal to 100.');
        }

        $this->container['pp_info'] = $pp_info;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 200)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CircuitTermination., must be smaller than or equal to 200.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets mark_connected
     *
     * @return bool|null
     */
    public function getMarkConnected()
    {
        return $this->container['mark_connected'];
    }

    /**
     * Sets mark_connected
     *
     * @param bool|null $mark_connected Treat as if a cable is connected
     *
     * @return self
     */
    public function setMarkConnected($mark_connected)
    {
        if (is_null($mark_connected)) {
            throw new \InvalidArgumentException('non-nullable mark_connected cannot be null');
        }
        $this->container['mark_connected'] = $mark_connected;

        return $this;
    }

    /**
     * Gets cable
     *
     * @return \OpenAPI\Client\Model\BriefCable
     */
    public function getCable()
    {
        return $this->container['cable'];
    }

    /**
     * Sets cable
     *
     * @param \OpenAPI\Client\Model\BriefCable $cable cable
     *
     * @return self
     */
    public function setCable($cable)
    {
        if (is_null($cable)) {
            array_push($this->openAPINullablesSetToNull, 'cable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cable'] = $cable;

        return $this;
    }

    /**
     * Gets cable_end
     *
     * @return string
     */
    public function getCableEnd()
    {
        return $this->container['cable_end'];
    }

    /**
     * Sets cable_end
     *
     * @param string $cable_end cable_end
     *
     * @return self
     */
    public function setCableEnd($cable_end)
    {
        if (is_null($cable_end)) {
            throw new \InvalidArgumentException('non-nullable cable_end cannot be null');
        }
        $this->container['cable_end'] = $cable_end;

        return $this;
    }

    /**
     * Gets link_peers
     *
     * @return mixed[]
     */
    public function getLinkPeers()
    {
        return $this->container['link_peers'];
    }

    /**
     * Sets link_peers
     *
     * @param mixed[] $link_peers link_peers
     *
     * @return self
     */
    public function setLinkPeers($link_peers)
    {
        if (is_null($link_peers)) {
            throw new \InvalidArgumentException('non-nullable link_peers cannot be null');
        }
        $this->container['link_peers'] = $link_peers;

        return $this;
    }

    /**
     * Gets link_peers_type
     *
     * @return string
     */
    public function getLinkPeersType()
    {
        return $this->container['link_peers_type'];
    }

    /**
     * Sets link_peers_type
     *
     * @param string $link_peers_type Return the type of the peer link terminations, or None.
     *
     * @return self
     */
    public function setLinkPeersType($link_peers_type)
    {
        if (is_null($link_peers_type)) {
            array_push($this->openAPINullablesSetToNull, 'link_peers_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('link_peers_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['link_peers_type'] = $link_peers_type;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\NestedTag[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\NestedTag[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return array<string,mixed>|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param array<string,mixed>|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            array_push($this->openAPINullablesSetToNull, 'created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            array_push($this->openAPINullablesSetToNull, 'last_updated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_updated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets _occupied
     *
     * @return bool
     */
    public function getOccupied()
    {
        return $this->container['_occupied'];
    }

    /**
     * Sets _occupied
     *
     * @param bool $_occupied _occupied
     *
     * @return self
     */
    public function setOccupied($_occupied)
    {
        if (is_null($_occupied)) {
            throw new \InvalidArgumentException('non-nullable _occupied cannot be null');
        }
        $this->container['_occupied'] = $_occupied;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


