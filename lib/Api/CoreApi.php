<?php
/**
 * CoreApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1.1 (4.1)
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CoreApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CoreApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'coreDataFilesList' => [
            'application/json',
        ],
        'coreDataFilesRetrieve' => [
            'application/json',
        ],
        'coreDataSourcesBulkDestroy' => [
            'application/json',
            'multipart/form-data',
        ],
        'coreDataSourcesBulkPartialUpdate' => [
            'application/json',
            'multipart/form-data',
        ],
        'coreDataSourcesBulkUpdate' => [
            'application/json',
            'multipart/form-data',
        ],
        'coreDataSourcesCreate' => [
            'application/json',
            'multipart/form-data',
        ],
        'coreDataSourcesDestroy' => [
            'application/json',
        ],
        'coreDataSourcesList' => [
            'application/json',
        ],
        'coreDataSourcesPartialUpdate' => [
            'application/json',
            'multipart/form-data',
        ],
        'coreDataSourcesRetrieve' => [
            'application/json',
        ],
        'coreDataSourcesSyncCreate' => [
            'application/json',
            'multipart/form-data',
        ],
        'coreDataSourcesUpdate' => [
            'application/json',
            'multipart/form-data',
        ],
        'coreJobsList' => [
            'application/json',
        ],
        'coreJobsRetrieve' => [
            'application/json',
        ],
        'coreObjectChangesList' => [
            'application/json',
        ],
        'coreObjectChangesRetrieve' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation coreDataFilesList
     *
     * @param  \DateTime[] $created created (optional)
     * @param  \DateTime[] $created__empty created__empty (optional)
     * @param  \DateTime[] $created__gt created__gt (optional)
     * @param  \DateTime[] $created__gte created__gte (optional)
     * @param  \DateTime[] $created__lt created__lt (optional)
     * @param  \DateTime[] $created__lte created__lte (optional)
     * @param  \DateTime[] $created__n created__n (optional)
     * @param  string $created_by_request created_by_request (optional)
     * @param  string[] $hash hash (optional)
     * @param  bool $hash__empty hash__empty (optional)
     * @param  string[] $hash__ic hash__ic (optional)
     * @param  string[] $hash__ie hash__ie (optional)
     * @param  string[] $hash__iew hash__iew (optional)
     * @param  string[] $hash__isw hash__isw (optional)
     * @param  string[] $hash__n hash__n (optional)
     * @param  string[] $hash__nic hash__nic (optional)
     * @param  string[] $hash__nie hash__nie (optional)
     * @param  string[] $hash__niew hash__niew (optional)
     * @param  string[] $hash__nisw hash__nisw (optional)
     * @param  int[] $id id (optional)
     * @param  bool $id__empty id__empty (optional)
     * @param  int[] $id__gt id__gt (optional)
     * @param  int[] $id__gte id__gte (optional)
     * @param  int[] $id__lt id__lt (optional)
     * @param  int[] $id__lte id__lte (optional)
     * @param  int[] $id__n id__n (optional)
     * @param  \DateTime[] $last_updated last_updated (optional)
     * @param  \DateTime[] $last_updated__empty last_updated__empty (optional)
     * @param  \DateTime[] $last_updated__gt last_updated__gt (optional)
     * @param  \DateTime[] $last_updated__gte last_updated__gte (optional)
     * @param  \DateTime[] $last_updated__lt last_updated__lt (optional)
     * @param  \DateTime[] $last_updated__lte last_updated__lte (optional)
     * @param  \DateTime[] $last_updated__n last_updated__n (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string $modified_by_request modified_by_request (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string[] $path path (optional)
     * @param  bool $path__empty path__empty (optional)
     * @param  string[] $path__ic path__ic (optional)
     * @param  string[] $path__ie path__ie (optional)
     * @param  string[] $path__iew path__iew (optional)
     * @param  string[] $path__isw path__isw (optional)
     * @param  string[] $path__n path__n (optional)
     * @param  string[] $path__nic path__nic (optional)
     * @param  string[] $path__nie path__nie (optional)
     * @param  string[] $path__niew path__niew (optional)
     * @param  string[] $path__nisw path__nisw (optional)
     * @param  string $q q (optional)
     * @param  int[] $size size (optional)
     * @param  bool $size__empty size__empty (optional)
     * @param  int[] $size__gt size__gt (optional)
     * @param  int[] $size__gte size__gte (optional)
     * @param  int[] $size__lt size__lt (optional)
     * @param  int[] $size__lte size__lte (optional)
     * @param  int[] $size__n size__n (optional)
     * @param  string[] $source Data source (name) (optional)
     * @param  string[] $source__n Data source (name) (optional)
     * @param  int[] $source_id Data source (ID) (optional)
     * @param  int[] $source_id__n Data source (ID) (optional)
     * @param  string $updated_by_request updated_by_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataFilesList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PaginatedDataFileList
     */
    public function coreDataFilesList($created = null, $created__empty = null, $created__gt = null, $created__gte = null, $created__lt = null, $created__lte = null, $created__n = null, $created_by_request = null, $hash = null, $hash__empty = null, $hash__ic = null, $hash__ie = null, $hash__iew = null, $hash__isw = null, $hash__n = null, $hash__nic = null, $hash__nie = null, $hash__niew = null, $hash__nisw = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $last_updated = null, $last_updated__empty = null, $last_updated__gt = null, $last_updated__gte = null, $last_updated__lt = null, $last_updated__lte = null, $last_updated__n = null, $limit = null, $modified_by_request = null, $offset = null, $ordering = null, $path = null, $path__empty = null, $path__ic = null, $path__ie = null, $path__iew = null, $path__isw = null, $path__n = null, $path__nic = null, $path__nie = null, $path__niew = null, $path__nisw = null, $q = null, $size = null, $size__empty = null, $size__gt = null, $size__gte = null, $size__lt = null, $size__lte = null, $size__n = null, $source = null, $source__n = null, $source_id = null, $source_id__n = null, $updated_by_request = null, string $contentType = self::contentTypes['coreDataFilesList'][0])
    {
        list($response) = $this->coreDataFilesListWithHttpInfo($created, $created__empty, $created__gt, $created__gte, $created__lt, $created__lte, $created__n, $created_by_request, $hash, $hash__empty, $hash__ic, $hash__ie, $hash__iew, $hash__isw, $hash__n, $hash__nic, $hash__nie, $hash__niew, $hash__nisw, $id, $id__empty, $id__gt, $id__gte, $id__lt, $id__lte, $id__n, $last_updated, $last_updated__empty, $last_updated__gt, $last_updated__gte, $last_updated__lt, $last_updated__lte, $last_updated__n, $limit, $modified_by_request, $offset, $ordering, $path, $path__empty, $path__ic, $path__ie, $path__iew, $path__isw, $path__n, $path__nic, $path__nie, $path__niew, $path__nisw, $q, $size, $size__empty, $size__gt, $size__gte, $size__lt, $size__lte, $size__n, $source, $source__n, $source_id, $source_id__n, $updated_by_request, $contentType);
        return $response;
    }

    /**
     * Operation coreDataFilesListWithHttpInfo
     *
     * @param  \DateTime[] $created (optional)
     * @param  \DateTime[] $created__empty (optional)
     * @param  \DateTime[] $created__gt (optional)
     * @param  \DateTime[] $created__gte (optional)
     * @param  \DateTime[] $created__lt (optional)
     * @param  \DateTime[] $created__lte (optional)
     * @param  \DateTime[] $created__n (optional)
     * @param  string $created_by_request (optional)
     * @param  string[] $hash (optional)
     * @param  bool $hash__empty (optional)
     * @param  string[] $hash__ic (optional)
     * @param  string[] $hash__ie (optional)
     * @param  string[] $hash__iew (optional)
     * @param  string[] $hash__isw (optional)
     * @param  string[] $hash__n (optional)
     * @param  string[] $hash__nic (optional)
     * @param  string[] $hash__nie (optional)
     * @param  string[] $hash__niew (optional)
     * @param  string[] $hash__nisw (optional)
     * @param  int[] $id (optional)
     * @param  bool $id__empty (optional)
     * @param  int[] $id__gt (optional)
     * @param  int[] $id__gte (optional)
     * @param  int[] $id__lt (optional)
     * @param  int[] $id__lte (optional)
     * @param  int[] $id__n (optional)
     * @param  \DateTime[] $last_updated (optional)
     * @param  \DateTime[] $last_updated__empty (optional)
     * @param  \DateTime[] $last_updated__gt (optional)
     * @param  \DateTime[] $last_updated__gte (optional)
     * @param  \DateTime[] $last_updated__lt (optional)
     * @param  \DateTime[] $last_updated__lte (optional)
     * @param  \DateTime[] $last_updated__n (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string $modified_by_request (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string[] $path (optional)
     * @param  bool $path__empty (optional)
     * @param  string[] $path__ic (optional)
     * @param  string[] $path__ie (optional)
     * @param  string[] $path__iew (optional)
     * @param  string[] $path__isw (optional)
     * @param  string[] $path__n (optional)
     * @param  string[] $path__nic (optional)
     * @param  string[] $path__nie (optional)
     * @param  string[] $path__niew (optional)
     * @param  string[] $path__nisw (optional)
     * @param  string $q (optional)
     * @param  int[] $size (optional)
     * @param  bool $size__empty (optional)
     * @param  int[] $size__gt (optional)
     * @param  int[] $size__gte (optional)
     * @param  int[] $size__lt (optional)
     * @param  int[] $size__lte (optional)
     * @param  int[] $size__n (optional)
     * @param  string[] $source Data source (name) (optional)
     * @param  string[] $source__n Data source (name) (optional)
     * @param  int[] $source_id Data source (ID) (optional)
     * @param  int[] $source_id__n Data source (ID) (optional)
     * @param  string $updated_by_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataFilesList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PaginatedDataFileList, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDataFilesListWithHttpInfo($created = null, $created__empty = null, $created__gt = null, $created__gte = null, $created__lt = null, $created__lte = null, $created__n = null, $created_by_request = null, $hash = null, $hash__empty = null, $hash__ic = null, $hash__ie = null, $hash__iew = null, $hash__isw = null, $hash__n = null, $hash__nic = null, $hash__nie = null, $hash__niew = null, $hash__nisw = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $last_updated = null, $last_updated__empty = null, $last_updated__gt = null, $last_updated__gte = null, $last_updated__lt = null, $last_updated__lte = null, $last_updated__n = null, $limit = null, $modified_by_request = null, $offset = null, $ordering = null, $path = null, $path__empty = null, $path__ic = null, $path__ie = null, $path__iew = null, $path__isw = null, $path__n = null, $path__nic = null, $path__nie = null, $path__niew = null, $path__nisw = null, $q = null, $size = null, $size__empty = null, $size__gt = null, $size__gte = null, $size__lt = null, $size__lte = null, $size__n = null, $source = null, $source__n = null, $source_id = null, $source_id__n = null, $updated_by_request = null, string $contentType = self::contentTypes['coreDataFilesList'][0])
    {
        $request = $this->coreDataFilesListRequest($created, $created__empty, $created__gt, $created__gte, $created__lt, $created__lte, $created__n, $created_by_request, $hash, $hash__empty, $hash__ic, $hash__ie, $hash__iew, $hash__isw, $hash__n, $hash__nic, $hash__nie, $hash__niew, $hash__nisw, $id, $id__empty, $id__gt, $id__gte, $id__lt, $id__lte, $id__n, $last_updated, $last_updated__empty, $last_updated__gt, $last_updated__gte, $last_updated__lt, $last_updated__lte, $last_updated__n, $limit, $modified_by_request, $offset, $ordering, $path, $path__empty, $path__ic, $path__ie, $path__iew, $path__isw, $path__n, $path__nic, $path__nie, $path__niew, $path__nisw, $q, $size, $size__empty, $size__gt, $size__gte, $size__lt, $size__lte, $size__n, $source, $source__n, $source_id, $source_id__n, $updated_by_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PaginatedDataFileList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PaginatedDataFileList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PaginatedDataFileList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PaginatedDataFileList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaginatedDataFileList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation coreDataFilesListAsync
     *
     * @param  \DateTime[] $created (optional)
     * @param  \DateTime[] $created__empty (optional)
     * @param  \DateTime[] $created__gt (optional)
     * @param  \DateTime[] $created__gte (optional)
     * @param  \DateTime[] $created__lt (optional)
     * @param  \DateTime[] $created__lte (optional)
     * @param  \DateTime[] $created__n (optional)
     * @param  string $created_by_request (optional)
     * @param  string[] $hash (optional)
     * @param  bool $hash__empty (optional)
     * @param  string[] $hash__ic (optional)
     * @param  string[] $hash__ie (optional)
     * @param  string[] $hash__iew (optional)
     * @param  string[] $hash__isw (optional)
     * @param  string[] $hash__n (optional)
     * @param  string[] $hash__nic (optional)
     * @param  string[] $hash__nie (optional)
     * @param  string[] $hash__niew (optional)
     * @param  string[] $hash__nisw (optional)
     * @param  int[] $id (optional)
     * @param  bool $id__empty (optional)
     * @param  int[] $id__gt (optional)
     * @param  int[] $id__gte (optional)
     * @param  int[] $id__lt (optional)
     * @param  int[] $id__lte (optional)
     * @param  int[] $id__n (optional)
     * @param  \DateTime[] $last_updated (optional)
     * @param  \DateTime[] $last_updated__empty (optional)
     * @param  \DateTime[] $last_updated__gt (optional)
     * @param  \DateTime[] $last_updated__gte (optional)
     * @param  \DateTime[] $last_updated__lt (optional)
     * @param  \DateTime[] $last_updated__lte (optional)
     * @param  \DateTime[] $last_updated__n (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string $modified_by_request (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string[] $path (optional)
     * @param  bool $path__empty (optional)
     * @param  string[] $path__ic (optional)
     * @param  string[] $path__ie (optional)
     * @param  string[] $path__iew (optional)
     * @param  string[] $path__isw (optional)
     * @param  string[] $path__n (optional)
     * @param  string[] $path__nic (optional)
     * @param  string[] $path__nie (optional)
     * @param  string[] $path__niew (optional)
     * @param  string[] $path__nisw (optional)
     * @param  string $q (optional)
     * @param  int[] $size (optional)
     * @param  bool $size__empty (optional)
     * @param  int[] $size__gt (optional)
     * @param  int[] $size__gte (optional)
     * @param  int[] $size__lt (optional)
     * @param  int[] $size__lte (optional)
     * @param  int[] $size__n (optional)
     * @param  string[] $source Data source (name) (optional)
     * @param  string[] $source__n Data source (name) (optional)
     * @param  int[] $source_id Data source (ID) (optional)
     * @param  int[] $source_id__n Data source (ID) (optional)
     * @param  string $updated_by_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataFilesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataFilesListAsync($created = null, $created__empty = null, $created__gt = null, $created__gte = null, $created__lt = null, $created__lte = null, $created__n = null, $created_by_request = null, $hash = null, $hash__empty = null, $hash__ic = null, $hash__ie = null, $hash__iew = null, $hash__isw = null, $hash__n = null, $hash__nic = null, $hash__nie = null, $hash__niew = null, $hash__nisw = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $last_updated = null, $last_updated__empty = null, $last_updated__gt = null, $last_updated__gte = null, $last_updated__lt = null, $last_updated__lte = null, $last_updated__n = null, $limit = null, $modified_by_request = null, $offset = null, $ordering = null, $path = null, $path__empty = null, $path__ic = null, $path__ie = null, $path__iew = null, $path__isw = null, $path__n = null, $path__nic = null, $path__nie = null, $path__niew = null, $path__nisw = null, $q = null, $size = null, $size__empty = null, $size__gt = null, $size__gte = null, $size__lt = null, $size__lte = null, $size__n = null, $source = null, $source__n = null, $source_id = null, $source_id__n = null, $updated_by_request = null, string $contentType = self::contentTypes['coreDataFilesList'][0])
    {
        return $this->coreDataFilesListAsyncWithHttpInfo($created, $created__empty, $created__gt, $created__gte, $created__lt, $created__lte, $created__n, $created_by_request, $hash, $hash__empty, $hash__ic, $hash__ie, $hash__iew, $hash__isw, $hash__n, $hash__nic, $hash__nie, $hash__niew, $hash__nisw, $id, $id__empty, $id__gt, $id__gte, $id__lt, $id__lte, $id__n, $last_updated, $last_updated__empty, $last_updated__gt, $last_updated__gte, $last_updated__lt, $last_updated__lte, $last_updated__n, $limit, $modified_by_request, $offset, $ordering, $path, $path__empty, $path__ic, $path__ie, $path__iew, $path__isw, $path__n, $path__nic, $path__nie, $path__niew, $path__nisw, $q, $size, $size__empty, $size__gt, $size__gte, $size__lt, $size__lte, $size__n, $source, $source__n, $source_id, $source_id__n, $updated_by_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation coreDataFilesListAsyncWithHttpInfo
     *
     * @param  \DateTime[] $created (optional)
     * @param  \DateTime[] $created__empty (optional)
     * @param  \DateTime[] $created__gt (optional)
     * @param  \DateTime[] $created__gte (optional)
     * @param  \DateTime[] $created__lt (optional)
     * @param  \DateTime[] $created__lte (optional)
     * @param  \DateTime[] $created__n (optional)
     * @param  string $created_by_request (optional)
     * @param  string[] $hash (optional)
     * @param  bool $hash__empty (optional)
     * @param  string[] $hash__ic (optional)
     * @param  string[] $hash__ie (optional)
     * @param  string[] $hash__iew (optional)
     * @param  string[] $hash__isw (optional)
     * @param  string[] $hash__n (optional)
     * @param  string[] $hash__nic (optional)
     * @param  string[] $hash__nie (optional)
     * @param  string[] $hash__niew (optional)
     * @param  string[] $hash__nisw (optional)
     * @param  int[] $id (optional)
     * @param  bool $id__empty (optional)
     * @param  int[] $id__gt (optional)
     * @param  int[] $id__gte (optional)
     * @param  int[] $id__lt (optional)
     * @param  int[] $id__lte (optional)
     * @param  int[] $id__n (optional)
     * @param  \DateTime[] $last_updated (optional)
     * @param  \DateTime[] $last_updated__empty (optional)
     * @param  \DateTime[] $last_updated__gt (optional)
     * @param  \DateTime[] $last_updated__gte (optional)
     * @param  \DateTime[] $last_updated__lt (optional)
     * @param  \DateTime[] $last_updated__lte (optional)
     * @param  \DateTime[] $last_updated__n (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string $modified_by_request (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string[] $path (optional)
     * @param  bool $path__empty (optional)
     * @param  string[] $path__ic (optional)
     * @param  string[] $path__ie (optional)
     * @param  string[] $path__iew (optional)
     * @param  string[] $path__isw (optional)
     * @param  string[] $path__n (optional)
     * @param  string[] $path__nic (optional)
     * @param  string[] $path__nie (optional)
     * @param  string[] $path__niew (optional)
     * @param  string[] $path__nisw (optional)
     * @param  string $q (optional)
     * @param  int[] $size (optional)
     * @param  bool $size__empty (optional)
     * @param  int[] $size__gt (optional)
     * @param  int[] $size__gte (optional)
     * @param  int[] $size__lt (optional)
     * @param  int[] $size__lte (optional)
     * @param  int[] $size__n (optional)
     * @param  string[] $source Data source (name) (optional)
     * @param  string[] $source__n Data source (name) (optional)
     * @param  int[] $source_id Data source (ID) (optional)
     * @param  int[] $source_id__n Data source (ID) (optional)
     * @param  string $updated_by_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataFilesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataFilesListAsyncWithHttpInfo($created = null, $created__empty = null, $created__gt = null, $created__gte = null, $created__lt = null, $created__lte = null, $created__n = null, $created_by_request = null, $hash = null, $hash__empty = null, $hash__ic = null, $hash__ie = null, $hash__iew = null, $hash__isw = null, $hash__n = null, $hash__nic = null, $hash__nie = null, $hash__niew = null, $hash__nisw = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $last_updated = null, $last_updated__empty = null, $last_updated__gt = null, $last_updated__gte = null, $last_updated__lt = null, $last_updated__lte = null, $last_updated__n = null, $limit = null, $modified_by_request = null, $offset = null, $ordering = null, $path = null, $path__empty = null, $path__ic = null, $path__ie = null, $path__iew = null, $path__isw = null, $path__n = null, $path__nic = null, $path__nie = null, $path__niew = null, $path__nisw = null, $q = null, $size = null, $size__empty = null, $size__gt = null, $size__gte = null, $size__lt = null, $size__lte = null, $size__n = null, $source = null, $source__n = null, $source_id = null, $source_id__n = null, $updated_by_request = null, string $contentType = self::contentTypes['coreDataFilesList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PaginatedDataFileList';
        $request = $this->coreDataFilesListRequest($created, $created__empty, $created__gt, $created__gte, $created__lt, $created__lte, $created__n, $created_by_request, $hash, $hash__empty, $hash__ic, $hash__ie, $hash__iew, $hash__isw, $hash__n, $hash__nic, $hash__nie, $hash__niew, $hash__nisw, $id, $id__empty, $id__gt, $id__gte, $id__lt, $id__lte, $id__n, $last_updated, $last_updated__empty, $last_updated__gt, $last_updated__gte, $last_updated__lt, $last_updated__lte, $last_updated__n, $limit, $modified_by_request, $offset, $ordering, $path, $path__empty, $path__ic, $path__ie, $path__iew, $path__isw, $path__n, $path__nic, $path__nie, $path__niew, $path__nisw, $q, $size, $size__empty, $size__gt, $size__gte, $size__lt, $size__lte, $size__n, $source, $source__n, $source_id, $source_id__n, $updated_by_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'coreDataFilesList'
     *
     * @param  \DateTime[] $created (optional)
     * @param  \DateTime[] $created__empty (optional)
     * @param  \DateTime[] $created__gt (optional)
     * @param  \DateTime[] $created__gte (optional)
     * @param  \DateTime[] $created__lt (optional)
     * @param  \DateTime[] $created__lte (optional)
     * @param  \DateTime[] $created__n (optional)
     * @param  string $created_by_request (optional)
     * @param  string[] $hash (optional)
     * @param  bool $hash__empty (optional)
     * @param  string[] $hash__ic (optional)
     * @param  string[] $hash__ie (optional)
     * @param  string[] $hash__iew (optional)
     * @param  string[] $hash__isw (optional)
     * @param  string[] $hash__n (optional)
     * @param  string[] $hash__nic (optional)
     * @param  string[] $hash__nie (optional)
     * @param  string[] $hash__niew (optional)
     * @param  string[] $hash__nisw (optional)
     * @param  int[] $id (optional)
     * @param  bool $id__empty (optional)
     * @param  int[] $id__gt (optional)
     * @param  int[] $id__gte (optional)
     * @param  int[] $id__lt (optional)
     * @param  int[] $id__lte (optional)
     * @param  int[] $id__n (optional)
     * @param  \DateTime[] $last_updated (optional)
     * @param  \DateTime[] $last_updated__empty (optional)
     * @param  \DateTime[] $last_updated__gt (optional)
     * @param  \DateTime[] $last_updated__gte (optional)
     * @param  \DateTime[] $last_updated__lt (optional)
     * @param  \DateTime[] $last_updated__lte (optional)
     * @param  \DateTime[] $last_updated__n (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string $modified_by_request (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string[] $path (optional)
     * @param  bool $path__empty (optional)
     * @param  string[] $path__ic (optional)
     * @param  string[] $path__ie (optional)
     * @param  string[] $path__iew (optional)
     * @param  string[] $path__isw (optional)
     * @param  string[] $path__n (optional)
     * @param  string[] $path__nic (optional)
     * @param  string[] $path__nie (optional)
     * @param  string[] $path__niew (optional)
     * @param  string[] $path__nisw (optional)
     * @param  string $q (optional)
     * @param  int[] $size (optional)
     * @param  bool $size__empty (optional)
     * @param  int[] $size__gt (optional)
     * @param  int[] $size__gte (optional)
     * @param  int[] $size__lt (optional)
     * @param  int[] $size__lte (optional)
     * @param  int[] $size__n (optional)
     * @param  string[] $source Data source (name) (optional)
     * @param  string[] $source__n Data source (name) (optional)
     * @param  int[] $source_id Data source (ID) (optional)
     * @param  int[] $source_id__n Data source (ID) (optional)
     * @param  string $updated_by_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataFilesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function coreDataFilesListRequest($created = null, $created__empty = null, $created__gt = null, $created__gte = null, $created__lt = null, $created__lte = null, $created__n = null, $created_by_request = null, $hash = null, $hash__empty = null, $hash__ic = null, $hash__ie = null, $hash__iew = null, $hash__isw = null, $hash__n = null, $hash__nic = null, $hash__nie = null, $hash__niew = null, $hash__nisw = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $last_updated = null, $last_updated__empty = null, $last_updated__gt = null, $last_updated__gte = null, $last_updated__lt = null, $last_updated__lte = null, $last_updated__n = null, $limit = null, $modified_by_request = null, $offset = null, $ordering = null, $path = null, $path__empty = null, $path__ic = null, $path__ie = null, $path__iew = null, $path__isw = null, $path__n = null, $path__nic = null, $path__nie = null, $path__niew = null, $path__nisw = null, $q = null, $size = null, $size__empty = null, $size__gt = null, $size__gte = null, $size__lt = null, $size__lte = null, $size__n = null, $source = null, $source__n = null, $source_id = null, $source_id__n = null, $updated_by_request = null, string $contentType = self::contentTypes['coreDataFilesList'][0])
    {































































        $resourcePath = '/api/core/data-files/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created,
            'created', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created__empty,
            'created__empty', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created__gt,
            'created__gt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created__gte,
            'created__gte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created__lt,
            'created__lt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created__lte,
            'created__lte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created__n,
            'created__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_by_request,
            'created_by_request', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hash,
            'hash', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hash__empty,
            'hash__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hash__ic,
            'hash__ic', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hash__ie,
            'hash__ie', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hash__iew,
            'hash__iew', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hash__isw,
            'hash__isw', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hash__n,
            'hash__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hash__nic,
            'hash__nic', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hash__nie,
            'hash__nie', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hash__niew,
            'hash__niew', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hash__nisw,
            'hash__nisw', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__empty,
            'id__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__gt,
            'id__gt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__gte,
            'id__gte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__lt,
            'id__lt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__lte,
            'id__lte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__n,
            'id__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated,
            'last_updated', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated__empty,
            'last_updated__empty', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated__gt,
            'last_updated__gt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated__gte,
            'last_updated__gte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated__lt,
            'last_updated__lt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated__lte,
            'last_updated__lte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated__n,
            'last_updated__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_by_request,
            'modified_by_request', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordering,
            'ordering', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path,
            'path', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path__empty,
            'path__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path__ic,
            'path__ic', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path__ie,
            'path__ie', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path__iew,
            'path__iew', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path__isw,
            'path__isw', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path__n,
            'path__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path__nic,
            'path__nic', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path__nie,
            'path__nie', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path__niew,
            'path__niew', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path__nisw,
            'path__nisw', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size__empty,
            'size__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size__gt,
            'size__gt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size__gte,
            'size__gte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size__lt,
            'size__lt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size__lte,
            'size__lte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size__n,
            'size__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source,
            'source', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source__n,
            'source__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_id,
            'source_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_id__n,
            'source_id__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updated_by_request,
            'updated_by_request', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation coreDataFilesRetrieve
     *
     * @param  int $id A unique integer value identifying this data file. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataFilesRetrieve'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DataFile
     */
    public function coreDataFilesRetrieve($id, string $contentType = self::contentTypes['coreDataFilesRetrieve'][0])
    {
        list($response) = $this->coreDataFilesRetrieveWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation coreDataFilesRetrieveWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this data file. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataFilesRetrieve'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DataFile, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDataFilesRetrieveWithHttpInfo($id, string $contentType = self::contentTypes['coreDataFilesRetrieve'][0])
    {
        $request = $this->coreDataFilesRetrieveRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DataFile' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DataFile' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DataFile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DataFile';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DataFile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation coreDataFilesRetrieveAsync
     *
     * @param  int $id A unique integer value identifying this data file. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataFilesRetrieve'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataFilesRetrieveAsync($id, string $contentType = self::contentTypes['coreDataFilesRetrieve'][0])
    {
        return $this->coreDataFilesRetrieveAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation coreDataFilesRetrieveAsyncWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this data file. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataFilesRetrieve'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataFilesRetrieveAsyncWithHttpInfo($id, string $contentType = self::contentTypes['coreDataFilesRetrieve'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DataFile';
        $request = $this->coreDataFilesRetrieveRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'coreDataFilesRetrieve'
     *
     * @param  int $id A unique integer value identifying this data file. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataFilesRetrieve'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function coreDataFilesRetrieveRequest($id, string $contentType = self::contentTypes['coreDataFilesRetrieve'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling coreDataFilesRetrieve'
            );
        }


        $resourcePath = '/api/core/data-files/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation coreDataSourcesBulkDestroy
     *
     * @param  \OpenAPI\Client\Model\DataSourceRequest[] $data_source_request data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesBulkDestroy'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function coreDataSourcesBulkDestroy($data_source_request, string $contentType = self::contentTypes['coreDataSourcesBulkDestroy'][0])
    {
        $this->coreDataSourcesBulkDestroyWithHttpInfo($data_source_request, $contentType);
    }

    /**
     * Operation coreDataSourcesBulkDestroyWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\DataSourceRequest[] $data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesBulkDestroy'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDataSourcesBulkDestroyWithHttpInfo($data_source_request, string $contentType = self::contentTypes['coreDataSourcesBulkDestroy'][0])
    {
        $request = $this->coreDataSourcesBulkDestroyRequest($data_source_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation coreDataSourcesBulkDestroyAsync
     *
     * @param  \OpenAPI\Client\Model\DataSourceRequest[] $data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesBulkDestroy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesBulkDestroyAsync($data_source_request, string $contentType = self::contentTypes['coreDataSourcesBulkDestroy'][0])
    {
        return $this->coreDataSourcesBulkDestroyAsyncWithHttpInfo($data_source_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation coreDataSourcesBulkDestroyAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\DataSourceRequest[] $data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesBulkDestroy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesBulkDestroyAsyncWithHttpInfo($data_source_request, string $contentType = self::contentTypes['coreDataSourcesBulkDestroy'][0])
    {
        $returnType = '';
        $request = $this->coreDataSourcesBulkDestroyRequest($data_source_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'coreDataSourcesBulkDestroy'
     *
     * @param  \OpenAPI\Client\Model\DataSourceRequest[] $data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesBulkDestroy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function coreDataSourcesBulkDestroyRequest($data_source_request, string $contentType = self::contentTypes['coreDataSourcesBulkDestroy'][0])
    {

        // verify the required parameter 'data_source_request' is set
        if ($data_source_request === null || (is_array($data_source_request) && count($data_source_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_source_request when calling coreDataSourcesBulkDestroy'
            );
        }


        $resourcePath = '/api/core/data-sources/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data_source_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data_source_request));
            } else {
                $httpBody = $data_source_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation coreDataSourcesBulkPartialUpdate
     *
     * @param  \OpenAPI\Client\Model\DataSourceRequest[] $data_source_request data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesBulkPartialUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DataSource[]
     */
    public function coreDataSourcesBulkPartialUpdate($data_source_request, string $contentType = self::contentTypes['coreDataSourcesBulkPartialUpdate'][0])
    {
        list($response) = $this->coreDataSourcesBulkPartialUpdateWithHttpInfo($data_source_request, $contentType);
        return $response;
    }

    /**
     * Operation coreDataSourcesBulkPartialUpdateWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\DataSourceRequest[] $data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesBulkPartialUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DataSource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDataSourcesBulkPartialUpdateWithHttpInfo($data_source_request, string $contentType = self::contentTypes['coreDataSourcesBulkPartialUpdate'][0])
    {
        $request = $this->coreDataSourcesBulkPartialUpdateRequest($data_source_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DataSource[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DataSource[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DataSource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DataSource[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DataSource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation coreDataSourcesBulkPartialUpdateAsync
     *
     * @param  \OpenAPI\Client\Model\DataSourceRequest[] $data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesBulkPartialUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesBulkPartialUpdateAsync($data_source_request, string $contentType = self::contentTypes['coreDataSourcesBulkPartialUpdate'][0])
    {
        return $this->coreDataSourcesBulkPartialUpdateAsyncWithHttpInfo($data_source_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation coreDataSourcesBulkPartialUpdateAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\DataSourceRequest[] $data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesBulkPartialUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesBulkPartialUpdateAsyncWithHttpInfo($data_source_request, string $contentType = self::contentTypes['coreDataSourcesBulkPartialUpdate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DataSource[]';
        $request = $this->coreDataSourcesBulkPartialUpdateRequest($data_source_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'coreDataSourcesBulkPartialUpdate'
     *
     * @param  \OpenAPI\Client\Model\DataSourceRequest[] $data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesBulkPartialUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function coreDataSourcesBulkPartialUpdateRequest($data_source_request, string $contentType = self::contentTypes['coreDataSourcesBulkPartialUpdate'][0])
    {

        // verify the required parameter 'data_source_request' is set
        if ($data_source_request === null || (is_array($data_source_request) && count($data_source_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_source_request when calling coreDataSourcesBulkPartialUpdate'
            );
        }


        $resourcePath = '/api/core/data-sources/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data_source_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data_source_request));
            } else {
                $httpBody = $data_source_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation coreDataSourcesBulkUpdate
     *
     * @param  \OpenAPI\Client\Model\DataSourceRequest[] $data_source_request data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesBulkUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DataSource[]
     */
    public function coreDataSourcesBulkUpdate($data_source_request, string $contentType = self::contentTypes['coreDataSourcesBulkUpdate'][0])
    {
        list($response) = $this->coreDataSourcesBulkUpdateWithHttpInfo($data_source_request, $contentType);
        return $response;
    }

    /**
     * Operation coreDataSourcesBulkUpdateWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\DataSourceRequest[] $data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesBulkUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DataSource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDataSourcesBulkUpdateWithHttpInfo($data_source_request, string $contentType = self::contentTypes['coreDataSourcesBulkUpdate'][0])
    {
        $request = $this->coreDataSourcesBulkUpdateRequest($data_source_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DataSource[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DataSource[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DataSource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DataSource[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DataSource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation coreDataSourcesBulkUpdateAsync
     *
     * @param  \OpenAPI\Client\Model\DataSourceRequest[] $data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesBulkUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesBulkUpdateAsync($data_source_request, string $contentType = self::contentTypes['coreDataSourcesBulkUpdate'][0])
    {
        return $this->coreDataSourcesBulkUpdateAsyncWithHttpInfo($data_source_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation coreDataSourcesBulkUpdateAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\DataSourceRequest[] $data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesBulkUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesBulkUpdateAsyncWithHttpInfo($data_source_request, string $contentType = self::contentTypes['coreDataSourcesBulkUpdate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DataSource[]';
        $request = $this->coreDataSourcesBulkUpdateRequest($data_source_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'coreDataSourcesBulkUpdate'
     *
     * @param  \OpenAPI\Client\Model\DataSourceRequest[] $data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesBulkUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function coreDataSourcesBulkUpdateRequest($data_source_request, string $contentType = self::contentTypes['coreDataSourcesBulkUpdate'][0])
    {

        // verify the required parameter 'data_source_request' is set
        if ($data_source_request === null || (is_array($data_source_request) && count($data_source_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_source_request when calling coreDataSourcesBulkUpdate'
            );
        }


        $resourcePath = '/api/core/data-sources/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data_source_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data_source_request));
            } else {
                $httpBody = $data_source_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation coreDataSourcesCreate
     *
     * @param  \OpenAPI\Client\Model\WritableDataSourceRequest $writable_data_source_request writable_data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DataSource
     */
    public function coreDataSourcesCreate($writable_data_source_request, string $contentType = self::contentTypes['coreDataSourcesCreate'][0])
    {
        list($response) = $this->coreDataSourcesCreateWithHttpInfo($writable_data_source_request, $contentType);
        return $response;
    }

    /**
     * Operation coreDataSourcesCreateWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\WritableDataSourceRequest $writable_data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DataSource, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDataSourcesCreateWithHttpInfo($writable_data_source_request, string $contentType = self::contentTypes['coreDataSourcesCreate'][0])
    {
        $request = $this->coreDataSourcesCreateRequest($writable_data_source_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\DataSource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DataSource' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DataSource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DataSource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DataSource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation coreDataSourcesCreateAsync
     *
     * @param  \OpenAPI\Client\Model\WritableDataSourceRequest $writable_data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesCreateAsync($writable_data_source_request, string $contentType = self::contentTypes['coreDataSourcesCreate'][0])
    {
        return $this->coreDataSourcesCreateAsyncWithHttpInfo($writable_data_source_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation coreDataSourcesCreateAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\WritableDataSourceRequest $writable_data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesCreateAsyncWithHttpInfo($writable_data_source_request, string $contentType = self::contentTypes['coreDataSourcesCreate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DataSource';
        $request = $this->coreDataSourcesCreateRequest($writable_data_source_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'coreDataSourcesCreate'
     *
     * @param  \OpenAPI\Client\Model\WritableDataSourceRequest $writable_data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function coreDataSourcesCreateRequest($writable_data_source_request, string $contentType = self::contentTypes['coreDataSourcesCreate'][0])
    {

        // verify the required parameter 'writable_data_source_request' is set
        if ($writable_data_source_request === null || (is_array($writable_data_source_request) && count($writable_data_source_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $writable_data_source_request when calling coreDataSourcesCreate'
            );
        }


        $resourcePath = '/api/core/data-sources/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($writable_data_source_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($writable_data_source_request));
            } else {
                $httpBody = $writable_data_source_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation coreDataSourcesDestroy
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesDestroy'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function coreDataSourcesDestroy($id, string $contentType = self::contentTypes['coreDataSourcesDestroy'][0])
    {
        $this->coreDataSourcesDestroyWithHttpInfo($id, $contentType);
    }

    /**
     * Operation coreDataSourcesDestroyWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesDestroy'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDataSourcesDestroyWithHttpInfo($id, string $contentType = self::contentTypes['coreDataSourcesDestroy'][0])
    {
        $request = $this->coreDataSourcesDestroyRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation coreDataSourcesDestroyAsync
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesDestroy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesDestroyAsync($id, string $contentType = self::contentTypes['coreDataSourcesDestroy'][0])
    {
        return $this->coreDataSourcesDestroyAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation coreDataSourcesDestroyAsyncWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesDestroy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesDestroyAsyncWithHttpInfo($id, string $contentType = self::contentTypes['coreDataSourcesDestroy'][0])
    {
        $returnType = '';
        $request = $this->coreDataSourcesDestroyRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'coreDataSourcesDestroy'
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesDestroy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function coreDataSourcesDestroyRequest($id, string $contentType = self::contentTypes['coreDataSourcesDestroy'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling coreDataSourcesDestroy'
            );
        }


        $resourcePath = '/api/core/data-sources/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation coreDataSourcesList
     *
     * @param  \DateTime[] $created created (optional)
     * @param  \DateTime[] $created__empty created__empty (optional)
     * @param  \DateTime[] $created__gt created__gt (optional)
     * @param  \DateTime[] $created__gte created__gte (optional)
     * @param  \DateTime[] $created__lt created__lt (optional)
     * @param  \DateTime[] $created__lte created__lte (optional)
     * @param  \DateTime[] $created__n created__n (optional)
     * @param  string $created_by_request created_by_request (optional)
     * @param  string[] $description description (optional)
     * @param  bool $description__empty description__empty (optional)
     * @param  string[] $description__ic description__ic (optional)
     * @param  string[] $description__ie description__ie (optional)
     * @param  string[] $description__iew description__iew (optional)
     * @param  string[] $description__isw description__isw (optional)
     * @param  string[] $description__n description__n (optional)
     * @param  string[] $description__nic description__nic (optional)
     * @param  string[] $description__nie description__nie (optional)
     * @param  string[] $description__niew description__niew (optional)
     * @param  string[] $description__nisw description__nisw (optional)
     * @param  bool $enabled enabled (optional)
     * @param  int[] $id id (optional)
     * @param  bool $id__empty id__empty (optional)
     * @param  int[] $id__gt id__gt (optional)
     * @param  int[] $id__gte id__gte (optional)
     * @param  int[] $id__lt id__lt (optional)
     * @param  int[] $id__lte id__lte (optional)
     * @param  int[] $id__n id__n (optional)
     * @param  \DateTime[] $last_synced last_synced (optional)
     * @param  bool $last_synced__empty last_synced__empty (optional)
     * @param  \DateTime[] $last_synced__gt last_synced__gt (optional)
     * @param  \DateTime[] $last_synced__gte last_synced__gte (optional)
     * @param  \DateTime[] $last_synced__lt last_synced__lt (optional)
     * @param  \DateTime[] $last_synced__lte last_synced__lte (optional)
     * @param  \DateTime[] $last_synced__n last_synced__n (optional)
     * @param  \DateTime[] $last_updated last_updated (optional)
     * @param  \DateTime[] $last_updated__empty last_updated__empty (optional)
     * @param  \DateTime[] $last_updated__gt last_updated__gt (optional)
     * @param  \DateTime[] $last_updated__gte last_updated__gte (optional)
     * @param  \DateTime[] $last_updated__lt last_updated__lt (optional)
     * @param  \DateTime[] $last_updated__lte last_updated__lte (optional)
     * @param  \DateTime[] $last_updated__n last_updated__n (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string $modified_by_request modified_by_request (optional)
     * @param  string[] $name name (optional)
     * @param  bool $name__empty name__empty (optional)
     * @param  string[] $name__ic name__ic (optional)
     * @param  string[] $name__ie name__ie (optional)
     * @param  string[] $name__iew name__iew (optional)
     * @param  string[] $name__isw name__isw (optional)
     * @param  string[] $name__n name__n (optional)
     * @param  string[] $name__nic name__nic (optional)
     * @param  string[] $name__nie name__nie (optional)
     * @param  string[] $name__niew name__niew (optional)
     * @param  string[] $name__nisw name__nisw (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string $q Search (optional)
     * @param  string[] $source_url source_url (optional)
     * @param  bool $source_url__empty source_url__empty (optional)
     * @param  string[] $source_url__ic source_url__ic (optional)
     * @param  string[] $source_url__ie source_url__ie (optional)
     * @param  string[] $source_url__iew source_url__iew (optional)
     * @param  string[] $source_url__isw source_url__isw (optional)
     * @param  string[] $source_url__n source_url__n (optional)
     * @param  string[] $source_url__nic source_url__nic (optional)
     * @param  string[] $source_url__nie source_url__nie (optional)
     * @param  string[] $source_url__niew source_url__niew (optional)
     * @param  string[] $source_url__nisw source_url__nisw (optional)
     * @param  string[] $status status (optional)
     * @param  string[] $status__n status__n (optional)
     * @param  string[] $tag tag (optional)
     * @param  string[] $tag__n tag__n (optional)
     * @param  string[] $type type (optional)
     * @param  string[] $type__n type__n (optional)
     * @param  string $updated_by_request updated_by_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PaginatedDataSourceList
     */
    public function coreDataSourcesList($created = null, $created__empty = null, $created__gt = null, $created__gte = null, $created__lt = null, $created__lte = null, $created__n = null, $created_by_request = null, $description = null, $description__empty = null, $description__ic = null, $description__ie = null, $description__iew = null, $description__isw = null, $description__n = null, $description__nic = null, $description__nie = null, $description__niew = null, $description__nisw = null, $enabled = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $last_synced = null, $last_synced__empty = null, $last_synced__gt = null, $last_synced__gte = null, $last_synced__lt = null, $last_synced__lte = null, $last_synced__n = null, $last_updated = null, $last_updated__empty = null, $last_updated__gt = null, $last_updated__gte = null, $last_updated__lt = null, $last_updated__lte = null, $last_updated__n = null, $limit = null, $modified_by_request = null, $name = null, $name__empty = null, $name__ic = null, $name__ie = null, $name__iew = null, $name__isw = null, $name__n = null, $name__nic = null, $name__nie = null, $name__niew = null, $name__nisw = null, $offset = null, $ordering = null, $q = null, $source_url = null, $source_url__empty = null, $source_url__ic = null, $source_url__ie = null, $source_url__iew = null, $source_url__isw = null, $source_url__n = null, $source_url__nic = null, $source_url__nie = null, $source_url__niew = null, $source_url__nisw = null, $status = null, $status__n = null, $tag = null, $tag__n = null, $type = null, $type__n = null, $updated_by_request = null, string $contentType = self::contentTypes['coreDataSourcesList'][0])
    {
        list($response) = $this->coreDataSourcesListWithHttpInfo($created, $created__empty, $created__gt, $created__gte, $created__lt, $created__lte, $created__n, $created_by_request, $description, $description__empty, $description__ic, $description__ie, $description__iew, $description__isw, $description__n, $description__nic, $description__nie, $description__niew, $description__nisw, $enabled, $id, $id__empty, $id__gt, $id__gte, $id__lt, $id__lte, $id__n, $last_synced, $last_synced__empty, $last_synced__gt, $last_synced__gte, $last_synced__lt, $last_synced__lte, $last_synced__n, $last_updated, $last_updated__empty, $last_updated__gt, $last_updated__gte, $last_updated__lt, $last_updated__lte, $last_updated__n, $limit, $modified_by_request, $name, $name__empty, $name__ic, $name__ie, $name__iew, $name__isw, $name__n, $name__nic, $name__nie, $name__niew, $name__nisw, $offset, $ordering, $q, $source_url, $source_url__empty, $source_url__ic, $source_url__ie, $source_url__iew, $source_url__isw, $source_url__n, $source_url__nic, $source_url__nie, $source_url__niew, $source_url__nisw, $status, $status__n, $tag, $tag__n, $type, $type__n, $updated_by_request, $contentType);
        return $response;
    }

    /**
     * Operation coreDataSourcesListWithHttpInfo
     *
     * @param  \DateTime[] $created (optional)
     * @param  \DateTime[] $created__empty (optional)
     * @param  \DateTime[] $created__gt (optional)
     * @param  \DateTime[] $created__gte (optional)
     * @param  \DateTime[] $created__lt (optional)
     * @param  \DateTime[] $created__lte (optional)
     * @param  \DateTime[] $created__n (optional)
     * @param  string $created_by_request (optional)
     * @param  string[] $description (optional)
     * @param  bool $description__empty (optional)
     * @param  string[] $description__ic (optional)
     * @param  string[] $description__ie (optional)
     * @param  string[] $description__iew (optional)
     * @param  string[] $description__isw (optional)
     * @param  string[] $description__n (optional)
     * @param  string[] $description__nic (optional)
     * @param  string[] $description__nie (optional)
     * @param  string[] $description__niew (optional)
     * @param  string[] $description__nisw (optional)
     * @param  bool $enabled (optional)
     * @param  int[] $id (optional)
     * @param  bool $id__empty (optional)
     * @param  int[] $id__gt (optional)
     * @param  int[] $id__gte (optional)
     * @param  int[] $id__lt (optional)
     * @param  int[] $id__lte (optional)
     * @param  int[] $id__n (optional)
     * @param  \DateTime[] $last_synced (optional)
     * @param  bool $last_synced__empty (optional)
     * @param  \DateTime[] $last_synced__gt (optional)
     * @param  \DateTime[] $last_synced__gte (optional)
     * @param  \DateTime[] $last_synced__lt (optional)
     * @param  \DateTime[] $last_synced__lte (optional)
     * @param  \DateTime[] $last_synced__n (optional)
     * @param  \DateTime[] $last_updated (optional)
     * @param  \DateTime[] $last_updated__empty (optional)
     * @param  \DateTime[] $last_updated__gt (optional)
     * @param  \DateTime[] $last_updated__gte (optional)
     * @param  \DateTime[] $last_updated__lt (optional)
     * @param  \DateTime[] $last_updated__lte (optional)
     * @param  \DateTime[] $last_updated__n (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string $modified_by_request (optional)
     * @param  string[] $name (optional)
     * @param  bool $name__empty (optional)
     * @param  string[] $name__ic (optional)
     * @param  string[] $name__ie (optional)
     * @param  string[] $name__iew (optional)
     * @param  string[] $name__isw (optional)
     * @param  string[] $name__n (optional)
     * @param  string[] $name__nic (optional)
     * @param  string[] $name__nie (optional)
     * @param  string[] $name__niew (optional)
     * @param  string[] $name__nisw (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string $q Search (optional)
     * @param  string[] $source_url (optional)
     * @param  bool $source_url__empty (optional)
     * @param  string[] $source_url__ic (optional)
     * @param  string[] $source_url__ie (optional)
     * @param  string[] $source_url__iew (optional)
     * @param  string[] $source_url__isw (optional)
     * @param  string[] $source_url__n (optional)
     * @param  string[] $source_url__nic (optional)
     * @param  string[] $source_url__nie (optional)
     * @param  string[] $source_url__niew (optional)
     * @param  string[] $source_url__nisw (optional)
     * @param  string[] $status (optional)
     * @param  string[] $status__n (optional)
     * @param  string[] $tag (optional)
     * @param  string[] $tag__n (optional)
     * @param  string[] $type (optional)
     * @param  string[] $type__n (optional)
     * @param  string $updated_by_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PaginatedDataSourceList, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDataSourcesListWithHttpInfo($created = null, $created__empty = null, $created__gt = null, $created__gte = null, $created__lt = null, $created__lte = null, $created__n = null, $created_by_request = null, $description = null, $description__empty = null, $description__ic = null, $description__ie = null, $description__iew = null, $description__isw = null, $description__n = null, $description__nic = null, $description__nie = null, $description__niew = null, $description__nisw = null, $enabled = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $last_synced = null, $last_synced__empty = null, $last_synced__gt = null, $last_synced__gte = null, $last_synced__lt = null, $last_synced__lte = null, $last_synced__n = null, $last_updated = null, $last_updated__empty = null, $last_updated__gt = null, $last_updated__gte = null, $last_updated__lt = null, $last_updated__lte = null, $last_updated__n = null, $limit = null, $modified_by_request = null, $name = null, $name__empty = null, $name__ic = null, $name__ie = null, $name__iew = null, $name__isw = null, $name__n = null, $name__nic = null, $name__nie = null, $name__niew = null, $name__nisw = null, $offset = null, $ordering = null, $q = null, $source_url = null, $source_url__empty = null, $source_url__ic = null, $source_url__ie = null, $source_url__iew = null, $source_url__isw = null, $source_url__n = null, $source_url__nic = null, $source_url__nie = null, $source_url__niew = null, $source_url__nisw = null, $status = null, $status__n = null, $tag = null, $tag__n = null, $type = null, $type__n = null, $updated_by_request = null, string $contentType = self::contentTypes['coreDataSourcesList'][0])
    {
        $request = $this->coreDataSourcesListRequest($created, $created__empty, $created__gt, $created__gte, $created__lt, $created__lte, $created__n, $created_by_request, $description, $description__empty, $description__ic, $description__ie, $description__iew, $description__isw, $description__n, $description__nic, $description__nie, $description__niew, $description__nisw, $enabled, $id, $id__empty, $id__gt, $id__gte, $id__lt, $id__lte, $id__n, $last_synced, $last_synced__empty, $last_synced__gt, $last_synced__gte, $last_synced__lt, $last_synced__lte, $last_synced__n, $last_updated, $last_updated__empty, $last_updated__gt, $last_updated__gte, $last_updated__lt, $last_updated__lte, $last_updated__n, $limit, $modified_by_request, $name, $name__empty, $name__ic, $name__ie, $name__iew, $name__isw, $name__n, $name__nic, $name__nie, $name__niew, $name__nisw, $offset, $ordering, $q, $source_url, $source_url__empty, $source_url__ic, $source_url__ie, $source_url__iew, $source_url__isw, $source_url__n, $source_url__nic, $source_url__nie, $source_url__niew, $source_url__nisw, $status, $status__n, $tag, $tag__n, $type, $type__n, $updated_by_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PaginatedDataSourceList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PaginatedDataSourceList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PaginatedDataSourceList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PaginatedDataSourceList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaginatedDataSourceList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation coreDataSourcesListAsync
     *
     * @param  \DateTime[] $created (optional)
     * @param  \DateTime[] $created__empty (optional)
     * @param  \DateTime[] $created__gt (optional)
     * @param  \DateTime[] $created__gte (optional)
     * @param  \DateTime[] $created__lt (optional)
     * @param  \DateTime[] $created__lte (optional)
     * @param  \DateTime[] $created__n (optional)
     * @param  string $created_by_request (optional)
     * @param  string[] $description (optional)
     * @param  bool $description__empty (optional)
     * @param  string[] $description__ic (optional)
     * @param  string[] $description__ie (optional)
     * @param  string[] $description__iew (optional)
     * @param  string[] $description__isw (optional)
     * @param  string[] $description__n (optional)
     * @param  string[] $description__nic (optional)
     * @param  string[] $description__nie (optional)
     * @param  string[] $description__niew (optional)
     * @param  string[] $description__nisw (optional)
     * @param  bool $enabled (optional)
     * @param  int[] $id (optional)
     * @param  bool $id__empty (optional)
     * @param  int[] $id__gt (optional)
     * @param  int[] $id__gte (optional)
     * @param  int[] $id__lt (optional)
     * @param  int[] $id__lte (optional)
     * @param  int[] $id__n (optional)
     * @param  \DateTime[] $last_synced (optional)
     * @param  bool $last_synced__empty (optional)
     * @param  \DateTime[] $last_synced__gt (optional)
     * @param  \DateTime[] $last_synced__gte (optional)
     * @param  \DateTime[] $last_synced__lt (optional)
     * @param  \DateTime[] $last_synced__lte (optional)
     * @param  \DateTime[] $last_synced__n (optional)
     * @param  \DateTime[] $last_updated (optional)
     * @param  \DateTime[] $last_updated__empty (optional)
     * @param  \DateTime[] $last_updated__gt (optional)
     * @param  \DateTime[] $last_updated__gte (optional)
     * @param  \DateTime[] $last_updated__lt (optional)
     * @param  \DateTime[] $last_updated__lte (optional)
     * @param  \DateTime[] $last_updated__n (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string $modified_by_request (optional)
     * @param  string[] $name (optional)
     * @param  bool $name__empty (optional)
     * @param  string[] $name__ic (optional)
     * @param  string[] $name__ie (optional)
     * @param  string[] $name__iew (optional)
     * @param  string[] $name__isw (optional)
     * @param  string[] $name__n (optional)
     * @param  string[] $name__nic (optional)
     * @param  string[] $name__nie (optional)
     * @param  string[] $name__niew (optional)
     * @param  string[] $name__nisw (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string $q Search (optional)
     * @param  string[] $source_url (optional)
     * @param  bool $source_url__empty (optional)
     * @param  string[] $source_url__ic (optional)
     * @param  string[] $source_url__ie (optional)
     * @param  string[] $source_url__iew (optional)
     * @param  string[] $source_url__isw (optional)
     * @param  string[] $source_url__n (optional)
     * @param  string[] $source_url__nic (optional)
     * @param  string[] $source_url__nie (optional)
     * @param  string[] $source_url__niew (optional)
     * @param  string[] $source_url__nisw (optional)
     * @param  string[] $status (optional)
     * @param  string[] $status__n (optional)
     * @param  string[] $tag (optional)
     * @param  string[] $tag__n (optional)
     * @param  string[] $type (optional)
     * @param  string[] $type__n (optional)
     * @param  string $updated_by_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesListAsync($created = null, $created__empty = null, $created__gt = null, $created__gte = null, $created__lt = null, $created__lte = null, $created__n = null, $created_by_request = null, $description = null, $description__empty = null, $description__ic = null, $description__ie = null, $description__iew = null, $description__isw = null, $description__n = null, $description__nic = null, $description__nie = null, $description__niew = null, $description__nisw = null, $enabled = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $last_synced = null, $last_synced__empty = null, $last_synced__gt = null, $last_synced__gte = null, $last_synced__lt = null, $last_synced__lte = null, $last_synced__n = null, $last_updated = null, $last_updated__empty = null, $last_updated__gt = null, $last_updated__gte = null, $last_updated__lt = null, $last_updated__lte = null, $last_updated__n = null, $limit = null, $modified_by_request = null, $name = null, $name__empty = null, $name__ic = null, $name__ie = null, $name__iew = null, $name__isw = null, $name__n = null, $name__nic = null, $name__nie = null, $name__niew = null, $name__nisw = null, $offset = null, $ordering = null, $q = null, $source_url = null, $source_url__empty = null, $source_url__ic = null, $source_url__ie = null, $source_url__iew = null, $source_url__isw = null, $source_url__n = null, $source_url__nic = null, $source_url__nie = null, $source_url__niew = null, $source_url__nisw = null, $status = null, $status__n = null, $tag = null, $tag__n = null, $type = null, $type__n = null, $updated_by_request = null, string $contentType = self::contentTypes['coreDataSourcesList'][0])
    {
        return $this->coreDataSourcesListAsyncWithHttpInfo($created, $created__empty, $created__gt, $created__gte, $created__lt, $created__lte, $created__n, $created_by_request, $description, $description__empty, $description__ic, $description__ie, $description__iew, $description__isw, $description__n, $description__nic, $description__nie, $description__niew, $description__nisw, $enabled, $id, $id__empty, $id__gt, $id__gte, $id__lt, $id__lte, $id__n, $last_synced, $last_synced__empty, $last_synced__gt, $last_synced__gte, $last_synced__lt, $last_synced__lte, $last_synced__n, $last_updated, $last_updated__empty, $last_updated__gt, $last_updated__gte, $last_updated__lt, $last_updated__lte, $last_updated__n, $limit, $modified_by_request, $name, $name__empty, $name__ic, $name__ie, $name__iew, $name__isw, $name__n, $name__nic, $name__nie, $name__niew, $name__nisw, $offset, $ordering, $q, $source_url, $source_url__empty, $source_url__ic, $source_url__ie, $source_url__iew, $source_url__isw, $source_url__n, $source_url__nic, $source_url__nie, $source_url__niew, $source_url__nisw, $status, $status__n, $tag, $tag__n, $type, $type__n, $updated_by_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation coreDataSourcesListAsyncWithHttpInfo
     *
     * @param  \DateTime[] $created (optional)
     * @param  \DateTime[] $created__empty (optional)
     * @param  \DateTime[] $created__gt (optional)
     * @param  \DateTime[] $created__gte (optional)
     * @param  \DateTime[] $created__lt (optional)
     * @param  \DateTime[] $created__lte (optional)
     * @param  \DateTime[] $created__n (optional)
     * @param  string $created_by_request (optional)
     * @param  string[] $description (optional)
     * @param  bool $description__empty (optional)
     * @param  string[] $description__ic (optional)
     * @param  string[] $description__ie (optional)
     * @param  string[] $description__iew (optional)
     * @param  string[] $description__isw (optional)
     * @param  string[] $description__n (optional)
     * @param  string[] $description__nic (optional)
     * @param  string[] $description__nie (optional)
     * @param  string[] $description__niew (optional)
     * @param  string[] $description__nisw (optional)
     * @param  bool $enabled (optional)
     * @param  int[] $id (optional)
     * @param  bool $id__empty (optional)
     * @param  int[] $id__gt (optional)
     * @param  int[] $id__gte (optional)
     * @param  int[] $id__lt (optional)
     * @param  int[] $id__lte (optional)
     * @param  int[] $id__n (optional)
     * @param  \DateTime[] $last_synced (optional)
     * @param  bool $last_synced__empty (optional)
     * @param  \DateTime[] $last_synced__gt (optional)
     * @param  \DateTime[] $last_synced__gte (optional)
     * @param  \DateTime[] $last_synced__lt (optional)
     * @param  \DateTime[] $last_synced__lte (optional)
     * @param  \DateTime[] $last_synced__n (optional)
     * @param  \DateTime[] $last_updated (optional)
     * @param  \DateTime[] $last_updated__empty (optional)
     * @param  \DateTime[] $last_updated__gt (optional)
     * @param  \DateTime[] $last_updated__gte (optional)
     * @param  \DateTime[] $last_updated__lt (optional)
     * @param  \DateTime[] $last_updated__lte (optional)
     * @param  \DateTime[] $last_updated__n (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string $modified_by_request (optional)
     * @param  string[] $name (optional)
     * @param  bool $name__empty (optional)
     * @param  string[] $name__ic (optional)
     * @param  string[] $name__ie (optional)
     * @param  string[] $name__iew (optional)
     * @param  string[] $name__isw (optional)
     * @param  string[] $name__n (optional)
     * @param  string[] $name__nic (optional)
     * @param  string[] $name__nie (optional)
     * @param  string[] $name__niew (optional)
     * @param  string[] $name__nisw (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string $q Search (optional)
     * @param  string[] $source_url (optional)
     * @param  bool $source_url__empty (optional)
     * @param  string[] $source_url__ic (optional)
     * @param  string[] $source_url__ie (optional)
     * @param  string[] $source_url__iew (optional)
     * @param  string[] $source_url__isw (optional)
     * @param  string[] $source_url__n (optional)
     * @param  string[] $source_url__nic (optional)
     * @param  string[] $source_url__nie (optional)
     * @param  string[] $source_url__niew (optional)
     * @param  string[] $source_url__nisw (optional)
     * @param  string[] $status (optional)
     * @param  string[] $status__n (optional)
     * @param  string[] $tag (optional)
     * @param  string[] $tag__n (optional)
     * @param  string[] $type (optional)
     * @param  string[] $type__n (optional)
     * @param  string $updated_by_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesListAsyncWithHttpInfo($created = null, $created__empty = null, $created__gt = null, $created__gte = null, $created__lt = null, $created__lte = null, $created__n = null, $created_by_request = null, $description = null, $description__empty = null, $description__ic = null, $description__ie = null, $description__iew = null, $description__isw = null, $description__n = null, $description__nic = null, $description__nie = null, $description__niew = null, $description__nisw = null, $enabled = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $last_synced = null, $last_synced__empty = null, $last_synced__gt = null, $last_synced__gte = null, $last_synced__lt = null, $last_synced__lte = null, $last_synced__n = null, $last_updated = null, $last_updated__empty = null, $last_updated__gt = null, $last_updated__gte = null, $last_updated__lt = null, $last_updated__lte = null, $last_updated__n = null, $limit = null, $modified_by_request = null, $name = null, $name__empty = null, $name__ic = null, $name__ie = null, $name__iew = null, $name__isw = null, $name__n = null, $name__nic = null, $name__nie = null, $name__niew = null, $name__nisw = null, $offset = null, $ordering = null, $q = null, $source_url = null, $source_url__empty = null, $source_url__ic = null, $source_url__ie = null, $source_url__iew = null, $source_url__isw = null, $source_url__n = null, $source_url__nic = null, $source_url__nie = null, $source_url__niew = null, $source_url__nisw = null, $status = null, $status__n = null, $tag = null, $tag__n = null, $type = null, $type__n = null, $updated_by_request = null, string $contentType = self::contentTypes['coreDataSourcesList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PaginatedDataSourceList';
        $request = $this->coreDataSourcesListRequest($created, $created__empty, $created__gt, $created__gte, $created__lt, $created__lte, $created__n, $created_by_request, $description, $description__empty, $description__ic, $description__ie, $description__iew, $description__isw, $description__n, $description__nic, $description__nie, $description__niew, $description__nisw, $enabled, $id, $id__empty, $id__gt, $id__gte, $id__lt, $id__lte, $id__n, $last_synced, $last_synced__empty, $last_synced__gt, $last_synced__gte, $last_synced__lt, $last_synced__lte, $last_synced__n, $last_updated, $last_updated__empty, $last_updated__gt, $last_updated__gte, $last_updated__lt, $last_updated__lte, $last_updated__n, $limit, $modified_by_request, $name, $name__empty, $name__ic, $name__ie, $name__iew, $name__isw, $name__n, $name__nic, $name__nie, $name__niew, $name__nisw, $offset, $ordering, $q, $source_url, $source_url__empty, $source_url__ic, $source_url__ie, $source_url__iew, $source_url__isw, $source_url__n, $source_url__nic, $source_url__nie, $source_url__niew, $source_url__nisw, $status, $status__n, $tag, $tag__n, $type, $type__n, $updated_by_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'coreDataSourcesList'
     *
     * @param  \DateTime[] $created (optional)
     * @param  \DateTime[] $created__empty (optional)
     * @param  \DateTime[] $created__gt (optional)
     * @param  \DateTime[] $created__gte (optional)
     * @param  \DateTime[] $created__lt (optional)
     * @param  \DateTime[] $created__lte (optional)
     * @param  \DateTime[] $created__n (optional)
     * @param  string $created_by_request (optional)
     * @param  string[] $description (optional)
     * @param  bool $description__empty (optional)
     * @param  string[] $description__ic (optional)
     * @param  string[] $description__ie (optional)
     * @param  string[] $description__iew (optional)
     * @param  string[] $description__isw (optional)
     * @param  string[] $description__n (optional)
     * @param  string[] $description__nic (optional)
     * @param  string[] $description__nie (optional)
     * @param  string[] $description__niew (optional)
     * @param  string[] $description__nisw (optional)
     * @param  bool $enabled (optional)
     * @param  int[] $id (optional)
     * @param  bool $id__empty (optional)
     * @param  int[] $id__gt (optional)
     * @param  int[] $id__gte (optional)
     * @param  int[] $id__lt (optional)
     * @param  int[] $id__lte (optional)
     * @param  int[] $id__n (optional)
     * @param  \DateTime[] $last_synced (optional)
     * @param  bool $last_synced__empty (optional)
     * @param  \DateTime[] $last_synced__gt (optional)
     * @param  \DateTime[] $last_synced__gte (optional)
     * @param  \DateTime[] $last_synced__lt (optional)
     * @param  \DateTime[] $last_synced__lte (optional)
     * @param  \DateTime[] $last_synced__n (optional)
     * @param  \DateTime[] $last_updated (optional)
     * @param  \DateTime[] $last_updated__empty (optional)
     * @param  \DateTime[] $last_updated__gt (optional)
     * @param  \DateTime[] $last_updated__gte (optional)
     * @param  \DateTime[] $last_updated__lt (optional)
     * @param  \DateTime[] $last_updated__lte (optional)
     * @param  \DateTime[] $last_updated__n (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string $modified_by_request (optional)
     * @param  string[] $name (optional)
     * @param  bool $name__empty (optional)
     * @param  string[] $name__ic (optional)
     * @param  string[] $name__ie (optional)
     * @param  string[] $name__iew (optional)
     * @param  string[] $name__isw (optional)
     * @param  string[] $name__n (optional)
     * @param  string[] $name__nic (optional)
     * @param  string[] $name__nie (optional)
     * @param  string[] $name__niew (optional)
     * @param  string[] $name__nisw (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string $q Search (optional)
     * @param  string[] $source_url (optional)
     * @param  bool $source_url__empty (optional)
     * @param  string[] $source_url__ic (optional)
     * @param  string[] $source_url__ie (optional)
     * @param  string[] $source_url__iew (optional)
     * @param  string[] $source_url__isw (optional)
     * @param  string[] $source_url__n (optional)
     * @param  string[] $source_url__nic (optional)
     * @param  string[] $source_url__nie (optional)
     * @param  string[] $source_url__niew (optional)
     * @param  string[] $source_url__nisw (optional)
     * @param  string[] $status (optional)
     * @param  string[] $status__n (optional)
     * @param  string[] $tag (optional)
     * @param  string[] $tag__n (optional)
     * @param  string[] $type (optional)
     * @param  string[] $type__n (optional)
     * @param  string $updated_by_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function coreDataSourcesListRequest($created = null, $created__empty = null, $created__gt = null, $created__gte = null, $created__lt = null, $created__lte = null, $created__n = null, $created_by_request = null, $description = null, $description__empty = null, $description__ic = null, $description__ie = null, $description__iew = null, $description__isw = null, $description__n = null, $description__nic = null, $description__nie = null, $description__niew = null, $description__nisw = null, $enabled = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $last_synced = null, $last_synced__empty = null, $last_synced__gt = null, $last_synced__gte = null, $last_synced__lt = null, $last_synced__lte = null, $last_synced__n = null, $last_updated = null, $last_updated__empty = null, $last_updated__gt = null, $last_updated__gte = null, $last_updated__lt = null, $last_updated__lte = null, $last_updated__n = null, $limit = null, $modified_by_request = null, $name = null, $name__empty = null, $name__ic = null, $name__ie = null, $name__iew = null, $name__isw = null, $name__n = null, $name__nic = null, $name__nie = null, $name__niew = null, $name__nisw = null, $offset = null, $ordering = null, $q = null, $source_url = null, $source_url__empty = null, $source_url__ic = null, $source_url__ie = null, $source_url__iew = null, $source_url__isw = null, $source_url__n = null, $source_url__nic = null, $source_url__nie = null, $source_url__niew = null, $source_url__nisw = null, $status = null, $status__n = null, $tag = null, $tag__n = null, $type = null, $type__n = null, $updated_by_request = null, string $contentType = self::contentTypes['coreDataSourcesList'][0])
    {













































































        $resourcePath = '/api/core/data-sources/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created,
            'created', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created__empty,
            'created__empty', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created__gt,
            'created__gt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created__gte,
            'created__gte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created__lt,
            'created__lt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created__lte,
            'created__lte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created__n,
            'created__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_by_request,
            'created_by_request', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description,
            'description', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description__empty,
            'description__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description__ic,
            'description__ic', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description__ie,
            'description__ie', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description__iew,
            'description__iew', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description__isw,
            'description__isw', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description__n,
            'description__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description__nic,
            'description__nic', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description__nie,
            'description__nie', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description__niew,
            'description__niew', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description__nisw,
            'description__nisw', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enabled,
            'enabled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__empty,
            'id__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__gt,
            'id__gt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__gte,
            'id__gte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__lt,
            'id__lt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__lte,
            'id__lte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__n,
            'id__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_synced,
            'last_synced', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_synced__empty,
            'last_synced__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_synced__gt,
            'last_synced__gt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_synced__gte,
            'last_synced__gte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_synced__lt,
            'last_synced__lt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_synced__lte,
            'last_synced__lte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_synced__n,
            'last_synced__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated,
            'last_updated', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated__empty,
            'last_updated__empty', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated__gt,
            'last_updated__gt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated__gte,
            'last_updated__gte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated__lt,
            'last_updated__lt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated__lte,
            'last_updated__lte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated__n,
            'last_updated__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_by_request,
            'modified_by_request', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__empty,
            'name__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__ic,
            'name__ic', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__ie,
            'name__ie', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__iew,
            'name__iew', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__isw,
            'name__isw', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__n,
            'name__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__nic,
            'name__nic', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__nie,
            'name__nie', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__niew,
            'name__niew', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__nisw,
            'name__nisw', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordering,
            'ordering', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_url,
            'source_url', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_url__empty,
            'source_url__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_url__ic,
            'source_url__ic', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_url__ie,
            'source_url__ie', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_url__iew,
            'source_url__iew', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_url__isw,
            'source_url__isw', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_url__n,
            'source_url__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_url__nic,
            'source_url__nic', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_url__nie,
            'source_url__nie', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_url__niew,
            'source_url__niew', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_url__nisw,
            'source_url__nisw', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status__n,
            'status__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag__n,
            'tag__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type__n,
            'type__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updated_by_request,
            'updated_by_request', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation coreDataSourcesPartialUpdate
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  \OpenAPI\Client\Model\PatchedWritableDataSourceRequest $patched_writable_data_source_request patched_writable_data_source_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesPartialUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DataSource
     */
    public function coreDataSourcesPartialUpdate($id, $patched_writable_data_source_request = null, string $contentType = self::contentTypes['coreDataSourcesPartialUpdate'][0])
    {
        list($response) = $this->coreDataSourcesPartialUpdateWithHttpInfo($id, $patched_writable_data_source_request, $contentType);
        return $response;
    }

    /**
     * Operation coreDataSourcesPartialUpdateWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  \OpenAPI\Client\Model\PatchedWritableDataSourceRequest $patched_writable_data_source_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesPartialUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DataSource, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDataSourcesPartialUpdateWithHttpInfo($id, $patched_writable_data_source_request = null, string $contentType = self::contentTypes['coreDataSourcesPartialUpdate'][0])
    {
        $request = $this->coreDataSourcesPartialUpdateRequest($id, $patched_writable_data_source_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DataSource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DataSource' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DataSource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DataSource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DataSource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation coreDataSourcesPartialUpdateAsync
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  \OpenAPI\Client\Model\PatchedWritableDataSourceRequest $patched_writable_data_source_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesPartialUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesPartialUpdateAsync($id, $patched_writable_data_source_request = null, string $contentType = self::contentTypes['coreDataSourcesPartialUpdate'][0])
    {
        return $this->coreDataSourcesPartialUpdateAsyncWithHttpInfo($id, $patched_writable_data_source_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation coreDataSourcesPartialUpdateAsyncWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  \OpenAPI\Client\Model\PatchedWritableDataSourceRequest $patched_writable_data_source_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesPartialUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesPartialUpdateAsyncWithHttpInfo($id, $patched_writable_data_source_request = null, string $contentType = self::contentTypes['coreDataSourcesPartialUpdate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DataSource';
        $request = $this->coreDataSourcesPartialUpdateRequest($id, $patched_writable_data_source_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'coreDataSourcesPartialUpdate'
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  \OpenAPI\Client\Model\PatchedWritableDataSourceRequest $patched_writable_data_source_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesPartialUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function coreDataSourcesPartialUpdateRequest($id, $patched_writable_data_source_request = null, string $contentType = self::contentTypes['coreDataSourcesPartialUpdate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling coreDataSourcesPartialUpdate'
            );
        }



        $resourcePath = '/api/core/data-sources/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_writable_data_source_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patched_writable_data_source_request));
            } else {
                $httpBody = $patched_writable_data_source_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation coreDataSourcesRetrieve
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesRetrieve'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DataSource
     */
    public function coreDataSourcesRetrieve($id, string $contentType = self::contentTypes['coreDataSourcesRetrieve'][0])
    {
        list($response) = $this->coreDataSourcesRetrieveWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation coreDataSourcesRetrieveWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesRetrieve'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DataSource, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDataSourcesRetrieveWithHttpInfo($id, string $contentType = self::contentTypes['coreDataSourcesRetrieve'][0])
    {
        $request = $this->coreDataSourcesRetrieveRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DataSource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DataSource' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DataSource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DataSource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DataSource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation coreDataSourcesRetrieveAsync
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesRetrieve'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesRetrieveAsync($id, string $contentType = self::contentTypes['coreDataSourcesRetrieve'][0])
    {
        return $this->coreDataSourcesRetrieveAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation coreDataSourcesRetrieveAsyncWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesRetrieve'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesRetrieveAsyncWithHttpInfo($id, string $contentType = self::contentTypes['coreDataSourcesRetrieve'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DataSource';
        $request = $this->coreDataSourcesRetrieveRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'coreDataSourcesRetrieve'
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesRetrieve'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function coreDataSourcesRetrieveRequest($id, string $contentType = self::contentTypes['coreDataSourcesRetrieve'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling coreDataSourcesRetrieve'
            );
        }


        $resourcePath = '/api/core/data-sources/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation coreDataSourcesSyncCreate
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  \OpenAPI\Client\Model\WritableDataSourceRequest $writable_data_source_request writable_data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesSyncCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DataSource
     */
    public function coreDataSourcesSyncCreate($id, $writable_data_source_request, string $contentType = self::contentTypes['coreDataSourcesSyncCreate'][0])
    {
        list($response) = $this->coreDataSourcesSyncCreateWithHttpInfo($id, $writable_data_source_request, $contentType);
        return $response;
    }

    /**
     * Operation coreDataSourcesSyncCreateWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  \OpenAPI\Client\Model\WritableDataSourceRequest $writable_data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesSyncCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DataSource, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDataSourcesSyncCreateWithHttpInfo($id, $writable_data_source_request, string $contentType = self::contentTypes['coreDataSourcesSyncCreate'][0])
    {
        $request = $this->coreDataSourcesSyncCreateRequest($id, $writable_data_source_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DataSource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DataSource' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DataSource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DataSource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DataSource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation coreDataSourcesSyncCreateAsync
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  \OpenAPI\Client\Model\WritableDataSourceRequest $writable_data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesSyncCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesSyncCreateAsync($id, $writable_data_source_request, string $contentType = self::contentTypes['coreDataSourcesSyncCreate'][0])
    {
        return $this->coreDataSourcesSyncCreateAsyncWithHttpInfo($id, $writable_data_source_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation coreDataSourcesSyncCreateAsyncWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  \OpenAPI\Client\Model\WritableDataSourceRequest $writable_data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesSyncCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesSyncCreateAsyncWithHttpInfo($id, $writable_data_source_request, string $contentType = self::contentTypes['coreDataSourcesSyncCreate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DataSource';
        $request = $this->coreDataSourcesSyncCreateRequest($id, $writable_data_source_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'coreDataSourcesSyncCreate'
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  \OpenAPI\Client\Model\WritableDataSourceRequest $writable_data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesSyncCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function coreDataSourcesSyncCreateRequest($id, $writable_data_source_request, string $contentType = self::contentTypes['coreDataSourcesSyncCreate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling coreDataSourcesSyncCreate'
            );
        }

        // verify the required parameter 'writable_data_source_request' is set
        if ($writable_data_source_request === null || (is_array($writable_data_source_request) && count($writable_data_source_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $writable_data_source_request when calling coreDataSourcesSyncCreate'
            );
        }


        $resourcePath = '/api/core/data-sources/{id}/sync/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($writable_data_source_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($writable_data_source_request));
            } else {
                $httpBody = $writable_data_source_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation coreDataSourcesUpdate
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  \OpenAPI\Client\Model\WritableDataSourceRequest $writable_data_source_request writable_data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DataSource
     */
    public function coreDataSourcesUpdate($id, $writable_data_source_request, string $contentType = self::contentTypes['coreDataSourcesUpdate'][0])
    {
        list($response) = $this->coreDataSourcesUpdateWithHttpInfo($id, $writable_data_source_request, $contentType);
        return $response;
    }

    /**
     * Operation coreDataSourcesUpdateWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  \OpenAPI\Client\Model\WritableDataSourceRequest $writable_data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DataSource, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDataSourcesUpdateWithHttpInfo($id, $writable_data_source_request, string $contentType = self::contentTypes['coreDataSourcesUpdate'][0])
    {
        $request = $this->coreDataSourcesUpdateRequest($id, $writable_data_source_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DataSource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DataSource' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DataSource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DataSource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DataSource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation coreDataSourcesUpdateAsync
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  \OpenAPI\Client\Model\WritableDataSourceRequest $writable_data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesUpdateAsync($id, $writable_data_source_request, string $contentType = self::contentTypes['coreDataSourcesUpdate'][0])
    {
        return $this->coreDataSourcesUpdateAsyncWithHttpInfo($id, $writable_data_source_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation coreDataSourcesUpdateAsyncWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  \OpenAPI\Client\Model\WritableDataSourceRequest $writable_data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreDataSourcesUpdateAsyncWithHttpInfo($id, $writable_data_source_request, string $contentType = self::contentTypes['coreDataSourcesUpdate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DataSource';
        $request = $this->coreDataSourcesUpdateRequest($id, $writable_data_source_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'coreDataSourcesUpdate'
     *
     * @param  int $id A unique integer value identifying this data source. (required)
     * @param  \OpenAPI\Client\Model\WritableDataSourceRequest $writable_data_source_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreDataSourcesUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function coreDataSourcesUpdateRequest($id, $writable_data_source_request, string $contentType = self::contentTypes['coreDataSourcesUpdate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling coreDataSourcesUpdate'
            );
        }

        // verify the required parameter 'writable_data_source_request' is set
        if ($writable_data_source_request === null || (is_array($writable_data_source_request) && count($writable_data_source_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $writable_data_source_request when calling coreDataSourcesUpdate'
            );
        }


        $resourcePath = '/api/core/data-sources/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($writable_data_source_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($writable_data_source_request));
            } else {
                $httpBody = $writable_data_source_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation coreJobsList
     *
     * @param  \DateTime $completed completed (optional)
     * @param  \DateTime $completed__after completed__after (optional)
     * @param  \DateTime $completed__before completed__before (optional)
     * @param  \DateTime $created created (optional)
     * @param  \DateTime $created__after created__after (optional)
     * @param  \DateTime $created__before created__before (optional)
     * @param  int[] $id id (optional)
     * @param  bool $id__empty id__empty (optional)
     * @param  int[] $id__gt id__gt (optional)
     * @param  int[] $id__gte id__gte (optional)
     * @param  int[] $id__lt id__lt (optional)
     * @param  int[] $id__lte id__lte (optional)
     * @param  int[] $id__n id__n (optional)
     * @param  int[] $interval interval (optional)
     * @param  bool $interval__empty interval__empty (optional)
     * @param  int[] $interval__gt interval__gt (optional)
     * @param  int[] $interval__gte interval__gte (optional)
     * @param  int[] $interval__lt interval__lt (optional)
     * @param  int[] $interval__lte interval__lte (optional)
     * @param  int[] $interval__n interval__n (optional)
     * @param  string $job_id job_id (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string[] $name name (optional)
     * @param  bool $name__empty name__empty (optional)
     * @param  string[] $name__ic name__ic (optional)
     * @param  string[] $name__ie name__ie (optional)
     * @param  string[] $name__iew name__iew (optional)
     * @param  string[] $name__isw name__isw (optional)
     * @param  string[] $name__n name__n (optional)
     * @param  string[] $name__nic name__nic (optional)
     * @param  string[] $name__nie name__nie (optional)
     * @param  string[] $name__niew name__niew (optional)
     * @param  string[] $name__nisw name__nisw (optional)
     * @param  int[] $object_id object_id (optional)
     * @param  bool $object_id__empty object_id__empty (optional)
     * @param  int[] $object_id__gt object_id__gt (optional)
     * @param  int[] $object_id__gte object_id__gte (optional)
     * @param  int[] $object_id__lt object_id__lt (optional)
     * @param  int[] $object_id__lte object_id__lte (optional)
     * @param  int[] $object_id__n object_id__n (optional)
     * @param  int $object_type object_type (optional)
     * @param  int $object_type__n object_type__n (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string $q Search (optional)
     * @param  \DateTime $scheduled scheduled (optional)
     * @param  \DateTime $scheduled__after scheduled__after (optional)
     * @param  \DateTime $scheduled__before scheduled__before (optional)
     * @param  \DateTime $started started (optional)
     * @param  \DateTime $started__after started__after (optional)
     * @param  \DateTime $started__before started__before (optional)
     * @param  string[] $status status (optional)
     * @param  string[] $status__n status__n (optional)
     * @param  int $user user (optional)
     * @param  int $user__n user__n (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreJobsList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PaginatedJobList
     */
    public function coreJobsList($completed = null, $completed__after = null, $completed__before = null, $created = null, $created__after = null, $created__before = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $interval = null, $interval__empty = null, $interval__gt = null, $interval__gte = null, $interval__lt = null, $interval__lte = null, $interval__n = null, $job_id = null, $limit = null, $name = null, $name__empty = null, $name__ic = null, $name__ie = null, $name__iew = null, $name__isw = null, $name__n = null, $name__nic = null, $name__nie = null, $name__niew = null, $name__nisw = null, $object_id = null, $object_id__empty = null, $object_id__gt = null, $object_id__gte = null, $object_id__lt = null, $object_id__lte = null, $object_id__n = null, $object_type = null, $object_type__n = null, $offset = null, $ordering = null, $q = null, $scheduled = null, $scheduled__after = null, $scheduled__before = null, $started = null, $started__after = null, $started__before = null, $status = null, $status__n = null, $user = null, $user__n = null, string $contentType = self::contentTypes['coreJobsList'][0])
    {
        list($response) = $this->coreJobsListWithHttpInfo($completed, $completed__after, $completed__before, $created, $created__after, $created__before, $id, $id__empty, $id__gt, $id__gte, $id__lt, $id__lte, $id__n, $interval, $interval__empty, $interval__gt, $interval__gte, $interval__lt, $interval__lte, $interval__n, $job_id, $limit, $name, $name__empty, $name__ic, $name__ie, $name__iew, $name__isw, $name__n, $name__nic, $name__nie, $name__niew, $name__nisw, $object_id, $object_id__empty, $object_id__gt, $object_id__gte, $object_id__lt, $object_id__lte, $object_id__n, $object_type, $object_type__n, $offset, $ordering, $q, $scheduled, $scheduled__after, $scheduled__before, $started, $started__after, $started__before, $status, $status__n, $user, $user__n, $contentType);
        return $response;
    }

    /**
     * Operation coreJobsListWithHttpInfo
     *
     * @param  \DateTime $completed (optional)
     * @param  \DateTime $completed__after (optional)
     * @param  \DateTime $completed__before (optional)
     * @param  \DateTime $created (optional)
     * @param  \DateTime $created__after (optional)
     * @param  \DateTime $created__before (optional)
     * @param  int[] $id (optional)
     * @param  bool $id__empty (optional)
     * @param  int[] $id__gt (optional)
     * @param  int[] $id__gte (optional)
     * @param  int[] $id__lt (optional)
     * @param  int[] $id__lte (optional)
     * @param  int[] $id__n (optional)
     * @param  int[] $interval (optional)
     * @param  bool $interval__empty (optional)
     * @param  int[] $interval__gt (optional)
     * @param  int[] $interval__gte (optional)
     * @param  int[] $interval__lt (optional)
     * @param  int[] $interval__lte (optional)
     * @param  int[] $interval__n (optional)
     * @param  string $job_id (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string[] $name (optional)
     * @param  bool $name__empty (optional)
     * @param  string[] $name__ic (optional)
     * @param  string[] $name__ie (optional)
     * @param  string[] $name__iew (optional)
     * @param  string[] $name__isw (optional)
     * @param  string[] $name__n (optional)
     * @param  string[] $name__nic (optional)
     * @param  string[] $name__nie (optional)
     * @param  string[] $name__niew (optional)
     * @param  string[] $name__nisw (optional)
     * @param  int[] $object_id (optional)
     * @param  bool $object_id__empty (optional)
     * @param  int[] $object_id__gt (optional)
     * @param  int[] $object_id__gte (optional)
     * @param  int[] $object_id__lt (optional)
     * @param  int[] $object_id__lte (optional)
     * @param  int[] $object_id__n (optional)
     * @param  int $object_type (optional)
     * @param  int $object_type__n (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string $q Search (optional)
     * @param  \DateTime $scheduled (optional)
     * @param  \DateTime $scheduled__after (optional)
     * @param  \DateTime $scheduled__before (optional)
     * @param  \DateTime $started (optional)
     * @param  \DateTime $started__after (optional)
     * @param  \DateTime $started__before (optional)
     * @param  string[] $status (optional)
     * @param  string[] $status__n (optional)
     * @param  int $user (optional)
     * @param  int $user__n (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreJobsList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PaginatedJobList, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreJobsListWithHttpInfo($completed = null, $completed__after = null, $completed__before = null, $created = null, $created__after = null, $created__before = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $interval = null, $interval__empty = null, $interval__gt = null, $interval__gte = null, $interval__lt = null, $interval__lte = null, $interval__n = null, $job_id = null, $limit = null, $name = null, $name__empty = null, $name__ic = null, $name__ie = null, $name__iew = null, $name__isw = null, $name__n = null, $name__nic = null, $name__nie = null, $name__niew = null, $name__nisw = null, $object_id = null, $object_id__empty = null, $object_id__gt = null, $object_id__gte = null, $object_id__lt = null, $object_id__lte = null, $object_id__n = null, $object_type = null, $object_type__n = null, $offset = null, $ordering = null, $q = null, $scheduled = null, $scheduled__after = null, $scheduled__before = null, $started = null, $started__after = null, $started__before = null, $status = null, $status__n = null, $user = null, $user__n = null, string $contentType = self::contentTypes['coreJobsList'][0])
    {
        $request = $this->coreJobsListRequest($completed, $completed__after, $completed__before, $created, $created__after, $created__before, $id, $id__empty, $id__gt, $id__gte, $id__lt, $id__lte, $id__n, $interval, $interval__empty, $interval__gt, $interval__gte, $interval__lt, $interval__lte, $interval__n, $job_id, $limit, $name, $name__empty, $name__ic, $name__ie, $name__iew, $name__isw, $name__n, $name__nic, $name__nie, $name__niew, $name__nisw, $object_id, $object_id__empty, $object_id__gt, $object_id__gte, $object_id__lt, $object_id__lte, $object_id__n, $object_type, $object_type__n, $offset, $ordering, $q, $scheduled, $scheduled__after, $scheduled__before, $started, $started__after, $started__before, $status, $status__n, $user, $user__n, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PaginatedJobList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PaginatedJobList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PaginatedJobList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PaginatedJobList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaginatedJobList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation coreJobsListAsync
     *
     * @param  \DateTime $completed (optional)
     * @param  \DateTime $completed__after (optional)
     * @param  \DateTime $completed__before (optional)
     * @param  \DateTime $created (optional)
     * @param  \DateTime $created__after (optional)
     * @param  \DateTime $created__before (optional)
     * @param  int[] $id (optional)
     * @param  bool $id__empty (optional)
     * @param  int[] $id__gt (optional)
     * @param  int[] $id__gte (optional)
     * @param  int[] $id__lt (optional)
     * @param  int[] $id__lte (optional)
     * @param  int[] $id__n (optional)
     * @param  int[] $interval (optional)
     * @param  bool $interval__empty (optional)
     * @param  int[] $interval__gt (optional)
     * @param  int[] $interval__gte (optional)
     * @param  int[] $interval__lt (optional)
     * @param  int[] $interval__lte (optional)
     * @param  int[] $interval__n (optional)
     * @param  string $job_id (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string[] $name (optional)
     * @param  bool $name__empty (optional)
     * @param  string[] $name__ic (optional)
     * @param  string[] $name__ie (optional)
     * @param  string[] $name__iew (optional)
     * @param  string[] $name__isw (optional)
     * @param  string[] $name__n (optional)
     * @param  string[] $name__nic (optional)
     * @param  string[] $name__nie (optional)
     * @param  string[] $name__niew (optional)
     * @param  string[] $name__nisw (optional)
     * @param  int[] $object_id (optional)
     * @param  bool $object_id__empty (optional)
     * @param  int[] $object_id__gt (optional)
     * @param  int[] $object_id__gte (optional)
     * @param  int[] $object_id__lt (optional)
     * @param  int[] $object_id__lte (optional)
     * @param  int[] $object_id__n (optional)
     * @param  int $object_type (optional)
     * @param  int $object_type__n (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string $q Search (optional)
     * @param  \DateTime $scheduled (optional)
     * @param  \DateTime $scheduled__after (optional)
     * @param  \DateTime $scheduled__before (optional)
     * @param  \DateTime $started (optional)
     * @param  \DateTime $started__after (optional)
     * @param  \DateTime $started__before (optional)
     * @param  string[] $status (optional)
     * @param  string[] $status__n (optional)
     * @param  int $user (optional)
     * @param  int $user__n (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreJobsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreJobsListAsync($completed = null, $completed__after = null, $completed__before = null, $created = null, $created__after = null, $created__before = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $interval = null, $interval__empty = null, $interval__gt = null, $interval__gte = null, $interval__lt = null, $interval__lte = null, $interval__n = null, $job_id = null, $limit = null, $name = null, $name__empty = null, $name__ic = null, $name__ie = null, $name__iew = null, $name__isw = null, $name__n = null, $name__nic = null, $name__nie = null, $name__niew = null, $name__nisw = null, $object_id = null, $object_id__empty = null, $object_id__gt = null, $object_id__gte = null, $object_id__lt = null, $object_id__lte = null, $object_id__n = null, $object_type = null, $object_type__n = null, $offset = null, $ordering = null, $q = null, $scheduled = null, $scheduled__after = null, $scheduled__before = null, $started = null, $started__after = null, $started__before = null, $status = null, $status__n = null, $user = null, $user__n = null, string $contentType = self::contentTypes['coreJobsList'][0])
    {
        return $this->coreJobsListAsyncWithHttpInfo($completed, $completed__after, $completed__before, $created, $created__after, $created__before, $id, $id__empty, $id__gt, $id__gte, $id__lt, $id__lte, $id__n, $interval, $interval__empty, $interval__gt, $interval__gte, $interval__lt, $interval__lte, $interval__n, $job_id, $limit, $name, $name__empty, $name__ic, $name__ie, $name__iew, $name__isw, $name__n, $name__nic, $name__nie, $name__niew, $name__nisw, $object_id, $object_id__empty, $object_id__gt, $object_id__gte, $object_id__lt, $object_id__lte, $object_id__n, $object_type, $object_type__n, $offset, $ordering, $q, $scheduled, $scheduled__after, $scheduled__before, $started, $started__after, $started__before, $status, $status__n, $user, $user__n, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation coreJobsListAsyncWithHttpInfo
     *
     * @param  \DateTime $completed (optional)
     * @param  \DateTime $completed__after (optional)
     * @param  \DateTime $completed__before (optional)
     * @param  \DateTime $created (optional)
     * @param  \DateTime $created__after (optional)
     * @param  \DateTime $created__before (optional)
     * @param  int[] $id (optional)
     * @param  bool $id__empty (optional)
     * @param  int[] $id__gt (optional)
     * @param  int[] $id__gte (optional)
     * @param  int[] $id__lt (optional)
     * @param  int[] $id__lte (optional)
     * @param  int[] $id__n (optional)
     * @param  int[] $interval (optional)
     * @param  bool $interval__empty (optional)
     * @param  int[] $interval__gt (optional)
     * @param  int[] $interval__gte (optional)
     * @param  int[] $interval__lt (optional)
     * @param  int[] $interval__lte (optional)
     * @param  int[] $interval__n (optional)
     * @param  string $job_id (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string[] $name (optional)
     * @param  bool $name__empty (optional)
     * @param  string[] $name__ic (optional)
     * @param  string[] $name__ie (optional)
     * @param  string[] $name__iew (optional)
     * @param  string[] $name__isw (optional)
     * @param  string[] $name__n (optional)
     * @param  string[] $name__nic (optional)
     * @param  string[] $name__nie (optional)
     * @param  string[] $name__niew (optional)
     * @param  string[] $name__nisw (optional)
     * @param  int[] $object_id (optional)
     * @param  bool $object_id__empty (optional)
     * @param  int[] $object_id__gt (optional)
     * @param  int[] $object_id__gte (optional)
     * @param  int[] $object_id__lt (optional)
     * @param  int[] $object_id__lte (optional)
     * @param  int[] $object_id__n (optional)
     * @param  int $object_type (optional)
     * @param  int $object_type__n (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string $q Search (optional)
     * @param  \DateTime $scheduled (optional)
     * @param  \DateTime $scheduled__after (optional)
     * @param  \DateTime $scheduled__before (optional)
     * @param  \DateTime $started (optional)
     * @param  \DateTime $started__after (optional)
     * @param  \DateTime $started__before (optional)
     * @param  string[] $status (optional)
     * @param  string[] $status__n (optional)
     * @param  int $user (optional)
     * @param  int $user__n (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreJobsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreJobsListAsyncWithHttpInfo($completed = null, $completed__after = null, $completed__before = null, $created = null, $created__after = null, $created__before = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $interval = null, $interval__empty = null, $interval__gt = null, $interval__gte = null, $interval__lt = null, $interval__lte = null, $interval__n = null, $job_id = null, $limit = null, $name = null, $name__empty = null, $name__ic = null, $name__ie = null, $name__iew = null, $name__isw = null, $name__n = null, $name__nic = null, $name__nie = null, $name__niew = null, $name__nisw = null, $object_id = null, $object_id__empty = null, $object_id__gt = null, $object_id__gte = null, $object_id__lt = null, $object_id__lte = null, $object_id__n = null, $object_type = null, $object_type__n = null, $offset = null, $ordering = null, $q = null, $scheduled = null, $scheduled__after = null, $scheduled__before = null, $started = null, $started__after = null, $started__before = null, $status = null, $status__n = null, $user = null, $user__n = null, string $contentType = self::contentTypes['coreJobsList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PaginatedJobList';
        $request = $this->coreJobsListRequest($completed, $completed__after, $completed__before, $created, $created__after, $created__before, $id, $id__empty, $id__gt, $id__gte, $id__lt, $id__lte, $id__n, $interval, $interval__empty, $interval__gt, $interval__gte, $interval__lt, $interval__lte, $interval__n, $job_id, $limit, $name, $name__empty, $name__ic, $name__ie, $name__iew, $name__isw, $name__n, $name__nic, $name__nie, $name__niew, $name__nisw, $object_id, $object_id__empty, $object_id__gt, $object_id__gte, $object_id__lt, $object_id__lte, $object_id__n, $object_type, $object_type__n, $offset, $ordering, $q, $scheduled, $scheduled__after, $scheduled__before, $started, $started__after, $started__before, $status, $status__n, $user, $user__n, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'coreJobsList'
     *
     * @param  \DateTime $completed (optional)
     * @param  \DateTime $completed__after (optional)
     * @param  \DateTime $completed__before (optional)
     * @param  \DateTime $created (optional)
     * @param  \DateTime $created__after (optional)
     * @param  \DateTime $created__before (optional)
     * @param  int[] $id (optional)
     * @param  bool $id__empty (optional)
     * @param  int[] $id__gt (optional)
     * @param  int[] $id__gte (optional)
     * @param  int[] $id__lt (optional)
     * @param  int[] $id__lte (optional)
     * @param  int[] $id__n (optional)
     * @param  int[] $interval (optional)
     * @param  bool $interval__empty (optional)
     * @param  int[] $interval__gt (optional)
     * @param  int[] $interval__gte (optional)
     * @param  int[] $interval__lt (optional)
     * @param  int[] $interval__lte (optional)
     * @param  int[] $interval__n (optional)
     * @param  string $job_id (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string[] $name (optional)
     * @param  bool $name__empty (optional)
     * @param  string[] $name__ic (optional)
     * @param  string[] $name__ie (optional)
     * @param  string[] $name__iew (optional)
     * @param  string[] $name__isw (optional)
     * @param  string[] $name__n (optional)
     * @param  string[] $name__nic (optional)
     * @param  string[] $name__nie (optional)
     * @param  string[] $name__niew (optional)
     * @param  string[] $name__nisw (optional)
     * @param  int[] $object_id (optional)
     * @param  bool $object_id__empty (optional)
     * @param  int[] $object_id__gt (optional)
     * @param  int[] $object_id__gte (optional)
     * @param  int[] $object_id__lt (optional)
     * @param  int[] $object_id__lte (optional)
     * @param  int[] $object_id__n (optional)
     * @param  int $object_type (optional)
     * @param  int $object_type__n (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string $q Search (optional)
     * @param  \DateTime $scheduled (optional)
     * @param  \DateTime $scheduled__after (optional)
     * @param  \DateTime $scheduled__before (optional)
     * @param  \DateTime $started (optional)
     * @param  \DateTime $started__after (optional)
     * @param  \DateTime $started__before (optional)
     * @param  string[] $status (optional)
     * @param  string[] $status__n (optional)
     * @param  int $user (optional)
     * @param  int $user__n (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreJobsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function coreJobsListRequest($completed = null, $completed__after = null, $completed__before = null, $created = null, $created__after = null, $created__before = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $interval = null, $interval__empty = null, $interval__gt = null, $interval__gte = null, $interval__lt = null, $interval__lte = null, $interval__n = null, $job_id = null, $limit = null, $name = null, $name__empty = null, $name__ic = null, $name__ie = null, $name__iew = null, $name__isw = null, $name__n = null, $name__nic = null, $name__nie = null, $name__niew = null, $name__nisw = null, $object_id = null, $object_id__empty = null, $object_id__gt = null, $object_id__gte = null, $object_id__lt = null, $object_id__lte = null, $object_id__n = null, $object_type = null, $object_type__n = null, $offset = null, $ordering = null, $q = null, $scheduled = null, $scheduled__after = null, $scheduled__before = null, $started = null, $started__after = null, $started__before = null, $status = null, $status__n = null, $user = null, $user__n = null, string $contentType = self::contentTypes['coreJobsList'][0])
    {

























































        $resourcePath = '/api/core/jobs/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $completed,
            'completed', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $completed__after,
            'completed__after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $completed__before,
            'completed__before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created,
            'created', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created__after,
            'created__after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created__before,
            'created__before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__empty,
            'id__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__gt,
            'id__gt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__gte,
            'id__gte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__lt,
            'id__lt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__lte,
            'id__lte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__n,
            'id__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval__empty,
            'interval__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval__gt,
            'interval__gt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval__gte,
            'interval__gte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval__lt,
            'interval__lt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval__lte,
            'interval__lte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval__n,
            'interval__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $job_id,
            'job_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__empty,
            'name__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__ic,
            'name__ic', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__ie,
            'name__ie', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__iew,
            'name__iew', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__isw,
            'name__isw', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__n,
            'name__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__nic,
            'name__nic', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__nie,
            'name__nie', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__niew,
            'name__niew', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name__nisw,
            'name__nisw', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_id,
            'object_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_id__empty,
            'object_id__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_id__gt,
            'object_id__gt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_id__gte,
            'object_id__gte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_id__lt,
            'object_id__lt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_id__lte,
            'object_id__lte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_id__n,
            'object_id__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_type,
            'object_type', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_type__n,
            'object_type__n', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordering,
            'ordering', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scheduled,
            'scheduled', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scheduled__after,
            'scheduled__after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scheduled__before,
            'scheduled__before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $started,
            'started', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $started__after,
            'started__after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $started__before,
            'started__before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status__n,
            'status__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user,
            'user', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user__n,
            'user__n', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation coreJobsRetrieve
     *
     * @param  int $id A unique integer value identifying this job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreJobsRetrieve'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Job
     */
    public function coreJobsRetrieve($id, string $contentType = self::contentTypes['coreJobsRetrieve'][0])
    {
        list($response) = $this->coreJobsRetrieveWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation coreJobsRetrieveWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreJobsRetrieve'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Job, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreJobsRetrieveWithHttpInfo($id, string $contentType = self::contentTypes['coreJobsRetrieve'][0])
    {
        $request = $this->coreJobsRetrieveRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Job' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Job' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Job', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Job';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Job',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation coreJobsRetrieveAsync
     *
     * @param  int $id A unique integer value identifying this job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreJobsRetrieve'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreJobsRetrieveAsync($id, string $contentType = self::contentTypes['coreJobsRetrieve'][0])
    {
        return $this->coreJobsRetrieveAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation coreJobsRetrieveAsyncWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreJobsRetrieve'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreJobsRetrieveAsyncWithHttpInfo($id, string $contentType = self::contentTypes['coreJobsRetrieve'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Job';
        $request = $this->coreJobsRetrieveRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'coreJobsRetrieve'
     *
     * @param  int $id A unique integer value identifying this job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreJobsRetrieve'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function coreJobsRetrieveRequest($id, string $contentType = self::contentTypes['coreJobsRetrieve'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling coreJobsRetrieve'
            );
        }


        $resourcePath = '/api/core/jobs/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation coreObjectChangesList
     *
     * @param  string $action * &#x60;create&#x60; - Created * &#x60;update&#x60; - Updated * &#x60;delete&#x60; - Deleted (optional)
     * @param  string $action__n * &#x60;create&#x60; - Created * &#x60;update&#x60; - Updated * &#x60;delete&#x60; - Deleted (optional)
     * @param  int[] $changed_object_id changed_object_id (optional)
     * @param  bool $changed_object_id__empty changed_object_id__empty (optional)
     * @param  int[] $changed_object_id__gt changed_object_id__gt (optional)
     * @param  int[] $changed_object_id__gte changed_object_id__gte (optional)
     * @param  int[] $changed_object_id__lt changed_object_id__lt (optional)
     * @param  int[] $changed_object_id__lte changed_object_id__lte (optional)
     * @param  int[] $changed_object_id__n changed_object_id__n (optional)
     * @param  string $changed_object_type changed_object_type (optional)
     * @param  string $changed_object_type__n changed_object_type__n (optional)
     * @param  int[] $changed_object_type_id changed_object_type_id (optional)
     * @param  int[] $changed_object_type_id__n changed_object_type_id__n (optional)
     * @param  int[] $id id (optional)
     * @param  bool $id__empty id__empty (optional)
     * @param  int[] $id__gt id__gt (optional)
     * @param  int[] $id__gte id__gte (optional)
     * @param  int[] $id__lt id__lt (optional)
     * @param  int[] $id__lte id__lte (optional)
     * @param  int[] $id__n id__n (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string[] $object_repr object_repr (optional)
     * @param  bool $object_repr__empty object_repr__empty (optional)
     * @param  string[] $object_repr__ic object_repr__ic (optional)
     * @param  string[] $object_repr__ie object_repr__ie (optional)
     * @param  string[] $object_repr__iew object_repr__iew (optional)
     * @param  string[] $object_repr__isw object_repr__isw (optional)
     * @param  string[] $object_repr__n object_repr__n (optional)
     * @param  string[] $object_repr__nic object_repr__nic (optional)
     * @param  string[] $object_repr__nie object_repr__nie (optional)
     * @param  string[] $object_repr__niew object_repr__niew (optional)
     * @param  string[] $object_repr__nisw object_repr__nisw (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string $q Search (optional)
     * @param  int[] $related_object_id related_object_id (optional)
     * @param  bool $related_object_id__empty related_object_id__empty (optional)
     * @param  int[] $related_object_id__gt related_object_id__gt (optional)
     * @param  int[] $related_object_id__gte related_object_id__gte (optional)
     * @param  int[] $related_object_id__lt related_object_id__lt (optional)
     * @param  int[] $related_object_id__lte related_object_id__lte (optional)
     * @param  int[] $related_object_id__n related_object_id__n (optional)
     * @param  int $related_object_type related_object_type (optional)
     * @param  int $related_object_type__n related_object_type__n (optional)
     * @param  string $request_id request_id (optional)
     * @param  \DateTime $time_after time_after (optional)
     * @param  \DateTime $time_before time_before (optional)
     * @param  string[] $user User name (optional)
     * @param  string[] $user__n User name (optional)
     * @param  int[] $user_id User (ID) (optional)
     * @param  int[] $user_id__n User (ID) (optional)
     * @param  string[] $user_name user_name (optional)
     * @param  bool $user_name__empty user_name__empty (optional)
     * @param  string[] $user_name__ic user_name__ic (optional)
     * @param  string[] $user_name__ie user_name__ie (optional)
     * @param  string[] $user_name__iew user_name__iew (optional)
     * @param  string[] $user_name__isw user_name__isw (optional)
     * @param  string[] $user_name__n user_name__n (optional)
     * @param  string[] $user_name__nic user_name__nic (optional)
     * @param  string[] $user_name__nie user_name__nie (optional)
     * @param  string[] $user_name__niew user_name__niew (optional)
     * @param  string[] $user_name__nisw user_name__nisw (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreObjectChangesList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PaginatedObjectChangeList
     */
    public function coreObjectChangesList($action = null, $action__n = null, $changed_object_id = null, $changed_object_id__empty = null, $changed_object_id__gt = null, $changed_object_id__gte = null, $changed_object_id__lt = null, $changed_object_id__lte = null, $changed_object_id__n = null, $changed_object_type = null, $changed_object_type__n = null, $changed_object_type_id = null, $changed_object_type_id__n = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $limit = null, $object_repr = null, $object_repr__empty = null, $object_repr__ic = null, $object_repr__ie = null, $object_repr__iew = null, $object_repr__isw = null, $object_repr__n = null, $object_repr__nic = null, $object_repr__nie = null, $object_repr__niew = null, $object_repr__nisw = null, $offset = null, $ordering = null, $q = null, $related_object_id = null, $related_object_id__empty = null, $related_object_id__gt = null, $related_object_id__gte = null, $related_object_id__lt = null, $related_object_id__lte = null, $related_object_id__n = null, $related_object_type = null, $related_object_type__n = null, $request_id = null, $time_after = null, $time_before = null, $user = null, $user__n = null, $user_id = null, $user_id__n = null, $user_name = null, $user_name__empty = null, $user_name__ic = null, $user_name__ie = null, $user_name__iew = null, $user_name__isw = null, $user_name__n = null, $user_name__nic = null, $user_name__nie = null, $user_name__niew = null, $user_name__nisw = null, string $contentType = self::contentTypes['coreObjectChangesList'][0])
    {
        list($response) = $this->coreObjectChangesListWithHttpInfo($action, $action__n, $changed_object_id, $changed_object_id__empty, $changed_object_id__gt, $changed_object_id__gte, $changed_object_id__lt, $changed_object_id__lte, $changed_object_id__n, $changed_object_type, $changed_object_type__n, $changed_object_type_id, $changed_object_type_id__n, $id, $id__empty, $id__gt, $id__gte, $id__lt, $id__lte, $id__n, $limit, $object_repr, $object_repr__empty, $object_repr__ic, $object_repr__ie, $object_repr__iew, $object_repr__isw, $object_repr__n, $object_repr__nic, $object_repr__nie, $object_repr__niew, $object_repr__nisw, $offset, $ordering, $q, $related_object_id, $related_object_id__empty, $related_object_id__gt, $related_object_id__gte, $related_object_id__lt, $related_object_id__lte, $related_object_id__n, $related_object_type, $related_object_type__n, $request_id, $time_after, $time_before, $user, $user__n, $user_id, $user_id__n, $user_name, $user_name__empty, $user_name__ic, $user_name__ie, $user_name__iew, $user_name__isw, $user_name__n, $user_name__nic, $user_name__nie, $user_name__niew, $user_name__nisw, $contentType);
        return $response;
    }

    /**
     * Operation coreObjectChangesListWithHttpInfo
     *
     * @param  string $action * &#x60;create&#x60; - Created * &#x60;update&#x60; - Updated * &#x60;delete&#x60; - Deleted (optional)
     * @param  string $action__n * &#x60;create&#x60; - Created * &#x60;update&#x60; - Updated * &#x60;delete&#x60; - Deleted (optional)
     * @param  int[] $changed_object_id (optional)
     * @param  bool $changed_object_id__empty (optional)
     * @param  int[] $changed_object_id__gt (optional)
     * @param  int[] $changed_object_id__gte (optional)
     * @param  int[] $changed_object_id__lt (optional)
     * @param  int[] $changed_object_id__lte (optional)
     * @param  int[] $changed_object_id__n (optional)
     * @param  string $changed_object_type (optional)
     * @param  string $changed_object_type__n (optional)
     * @param  int[] $changed_object_type_id (optional)
     * @param  int[] $changed_object_type_id__n (optional)
     * @param  int[] $id (optional)
     * @param  bool $id__empty (optional)
     * @param  int[] $id__gt (optional)
     * @param  int[] $id__gte (optional)
     * @param  int[] $id__lt (optional)
     * @param  int[] $id__lte (optional)
     * @param  int[] $id__n (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string[] $object_repr (optional)
     * @param  bool $object_repr__empty (optional)
     * @param  string[] $object_repr__ic (optional)
     * @param  string[] $object_repr__ie (optional)
     * @param  string[] $object_repr__iew (optional)
     * @param  string[] $object_repr__isw (optional)
     * @param  string[] $object_repr__n (optional)
     * @param  string[] $object_repr__nic (optional)
     * @param  string[] $object_repr__nie (optional)
     * @param  string[] $object_repr__niew (optional)
     * @param  string[] $object_repr__nisw (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string $q Search (optional)
     * @param  int[] $related_object_id (optional)
     * @param  bool $related_object_id__empty (optional)
     * @param  int[] $related_object_id__gt (optional)
     * @param  int[] $related_object_id__gte (optional)
     * @param  int[] $related_object_id__lt (optional)
     * @param  int[] $related_object_id__lte (optional)
     * @param  int[] $related_object_id__n (optional)
     * @param  int $related_object_type (optional)
     * @param  int $related_object_type__n (optional)
     * @param  string $request_id (optional)
     * @param  \DateTime $time_after (optional)
     * @param  \DateTime $time_before (optional)
     * @param  string[] $user User name (optional)
     * @param  string[] $user__n User name (optional)
     * @param  int[] $user_id User (ID) (optional)
     * @param  int[] $user_id__n User (ID) (optional)
     * @param  string[] $user_name (optional)
     * @param  bool $user_name__empty (optional)
     * @param  string[] $user_name__ic (optional)
     * @param  string[] $user_name__ie (optional)
     * @param  string[] $user_name__iew (optional)
     * @param  string[] $user_name__isw (optional)
     * @param  string[] $user_name__n (optional)
     * @param  string[] $user_name__nic (optional)
     * @param  string[] $user_name__nie (optional)
     * @param  string[] $user_name__niew (optional)
     * @param  string[] $user_name__nisw (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreObjectChangesList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PaginatedObjectChangeList, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreObjectChangesListWithHttpInfo($action = null, $action__n = null, $changed_object_id = null, $changed_object_id__empty = null, $changed_object_id__gt = null, $changed_object_id__gte = null, $changed_object_id__lt = null, $changed_object_id__lte = null, $changed_object_id__n = null, $changed_object_type = null, $changed_object_type__n = null, $changed_object_type_id = null, $changed_object_type_id__n = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $limit = null, $object_repr = null, $object_repr__empty = null, $object_repr__ic = null, $object_repr__ie = null, $object_repr__iew = null, $object_repr__isw = null, $object_repr__n = null, $object_repr__nic = null, $object_repr__nie = null, $object_repr__niew = null, $object_repr__nisw = null, $offset = null, $ordering = null, $q = null, $related_object_id = null, $related_object_id__empty = null, $related_object_id__gt = null, $related_object_id__gte = null, $related_object_id__lt = null, $related_object_id__lte = null, $related_object_id__n = null, $related_object_type = null, $related_object_type__n = null, $request_id = null, $time_after = null, $time_before = null, $user = null, $user__n = null, $user_id = null, $user_id__n = null, $user_name = null, $user_name__empty = null, $user_name__ic = null, $user_name__ie = null, $user_name__iew = null, $user_name__isw = null, $user_name__n = null, $user_name__nic = null, $user_name__nie = null, $user_name__niew = null, $user_name__nisw = null, string $contentType = self::contentTypes['coreObjectChangesList'][0])
    {
        $request = $this->coreObjectChangesListRequest($action, $action__n, $changed_object_id, $changed_object_id__empty, $changed_object_id__gt, $changed_object_id__gte, $changed_object_id__lt, $changed_object_id__lte, $changed_object_id__n, $changed_object_type, $changed_object_type__n, $changed_object_type_id, $changed_object_type_id__n, $id, $id__empty, $id__gt, $id__gte, $id__lt, $id__lte, $id__n, $limit, $object_repr, $object_repr__empty, $object_repr__ic, $object_repr__ie, $object_repr__iew, $object_repr__isw, $object_repr__n, $object_repr__nic, $object_repr__nie, $object_repr__niew, $object_repr__nisw, $offset, $ordering, $q, $related_object_id, $related_object_id__empty, $related_object_id__gt, $related_object_id__gte, $related_object_id__lt, $related_object_id__lte, $related_object_id__n, $related_object_type, $related_object_type__n, $request_id, $time_after, $time_before, $user, $user__n, $user_id, $user_id__n, $user_name, $user_name__empty, $user_name__ic, $user_name__ie, $user_name__iew, $user_name__isw, $user_name__n, $user_name__nic, $user_name__nie, $user_name__niew, $user_name__nisw, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PaginatedObjectChangeList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PaginatedObjectChangeList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PaginatedObjectChangeList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PaginatedObjectChangeList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaginatedObjectChangeList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation coreObjectChangesListAsync
     *
     * @param  string $action * &#x60;create&#x60; - Created * &#x60;update&#x60; - Updated * &#x60;delete&#x60; - Deleted (optional)
     * @param  string $action__n * &#x60;create&#x60; - Created * &#x60;update&#x60; - Updated * &#x60;delete&#x60; - Deleted (optional)
     * @param  int[] $changed_object_id (optional)
     * @param  bool $changed_object_id__empty (optional)
     * @param  int[] $changed_object_id__gt (optional)
     * @param  int[] $changed_object_id__gte (optional)
     * @param  int[] $changed_object_id__lt (optional)
     * @param  int[] $changed_object_id__lte (optional)
     * @param  int[] $changed_object_id__n (optional)
     * @param  string $changed_object_type (optional)
     * @param  string $changed_object_type__n (optional)
     * @param  int[] $changed_object_type_id (optional)
     * @param  int[] $changed_object_type_id__n (optional)
     * @param  int[] $id (optional)
     * @param  bool $id__empty (optional)
     * @param  int[] $id__gt (optional)
     * @param  int[] $id__gte (optional)
     * @param  int[] $id__lt (optional)
     * @param  int[] $id__lte (optional)
     * @param  int[] $id__n (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string[] $object_repr (optional)
     * @param  bool $object_repr__empty (optional)
     * @param  string[] $object_repr__ic (optional)
     * @param  string[] $object_repr__ie (optional)
     * @param  string[] $object_repr__iew (optional)
     * @param  string[] $object_repr__isw (optional)
     * @param  string[] $object_repr__n (optional)
     * @param  string[] $object_repr__nic (optional)
     * @param  string[] $object_repr__nie (optional)
     * @param  string[] $object_repr__niew (optional)
     * @param  string[] $object_repr__nisw (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string $q Search (optional)
     * @param  int[] $related_object_id (optional)
     * @param  bool $related_object_id__empty (optional)
     * @param  int[] $related_object_id__gt (optional)
     * @param  int[] $related_object_id__gte (optional)
     * @param  int[] $related_object_id__lt (optional)
     * @param  int[] $related_object_id__lte (optional)
     * @param  int[] $related_object_id__n (optional)
     * @param  int $related_object_type (optional)
     * @param  int $related_object_type__n (optional)
     * @param  string $request_id (optional)
     * @param  \DateTime $time_after (optional)
     * @param  \DateTime $time_before (optional)
     * @param  string[] $user User name (optional)
     * @param  string[] $user__n User name (optional)
     * @param  int[] $user_id User (ID) (optional)
     * @param  int[] $user_id__n User (ID) (optional)
     * @param  string[] $user_name (optional)
     * @param  bool $user_name__empty (optional)
     * @param  string[] $user_name__ic (optional)
     * @param  string[] $user_name__ie (optional)
     * @param  string[] $user_name__iew (optional)
     * @param  string[] $user_name__isw (optional)
     * @param  string[] $user_name__n (optional)
     * @param  string[] $user_name__nic (optional)
     * @param  string[] $user_name__nie (optional)
     * @param  string[] $user_name__niew (optional)
     * @param  string[] $user_name__nisw (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreObjectChangesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreObjectChangesListAsync($action = null, $action__n = null, $changed_object_id = null, $changed_object_id__empty = null, $changed_object_id__gt = null, $changed_object_id__gte = null, $changed_object_id__lt = null, $changed_object_id__lte = null, $changed_object_id__n = null, $changed_object_type = null, $changed_object_type__n = null, $changed_object_type_id = null, $changed_object_type_id__n = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $limit = null, $object_repr = null, $object_repr__empty = null, $object_repr__ic = null, $object_repr__ie = null, $object_repr__iew = null, $object_repr__isw = null, $object_repr__n = null, $object_repr__nic = null, $object_repr__nie = null, $object_repr__niew = null, $object_repr__nisw = null, $offset = null, $ordering = null, $q = null, $related_object_id = null, $related_object_id__empty = null, $related_object_id__gt = null, $related_object_id__gte = null, $related_object_id__lt = null, $related_object_id__lte = null, $related_object_id__n = null, $related_object_type = null, $related_object_type__n = null, $request_id = null, $time_after = null, $time_before = null, $user = null, $user__n = null, $user_id = null, $user_id__n = null, $user_name = null, $user_name__empty = null, $user_name__ic = null, $user_name__ie = null, $user_name__iew = null, $user_name__isw = null, $user_name__n = null, $user_name__nic = null, $user_name__nie = null, $user_name__niew = null, $user_name__nisw = null, string $contentType = self::contentTypes['coreObjectChangesList'][0])
    {
        return $this->coreObjectChangesListAsyncWithHttpInfo($action, $action__n, $changed_object_id, $changed_object_id__empty, $changed_object_id__gt, $changed_object_id__gte, $changed_object_id__lt, $changed_object_id__lte, $changed_object_id__n, $changed_object_type, $changed_object_type__n, $changed_object_type_id, $changed_object_type_id__n, $id, $id__empty, $id__gt, $id__gte, $id__lt, $id__lte, $id__n, $limit, $object_repr, $object_repr__empty, $object_repr__ic, $object_repr__ie, $object_repr__iew, $object_repr__isw, $object_repr__n, $object_repr__nic, $object_repr__nie, $object_repr__niew, $object_repr__nisw, $offset, $ordering, $q, $related_object_id, $related_object_id__empty, $related_object_id__gt, $related_object_id__gte, $related_object_id__lt, $related_object_id__lte, $related_object_id__n, $related_object_type, $related_object_type__n, $request_id, $time_after, $time_before, $user, $user__n, $user_id, $user_id__n, $user_name, $user_name__empty, $user_name__ic, $user_name__ie, $user_name__iew, $user_name__isw, $user_name__n, $user_name__nic, $user_name__nie, $user_name__niew, $user_name__nisw, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation coreObjectChangesListAsyncWithHttpInfo
     *
     * @param  string $action * &#x60;create&#x60; - Created * &#x60;update&#x60; - Updated * &#x60;delete&#x60; - Deleted (optional)
     * @param  string $action__n * &#x60;create&#x60; - Created * &#x60;update&#x60; - Updated * &#x60;delete&#x60; - Deleted (optional)
     * @param  int[] $changed_object_id (optional)
     * @param  bool $changed_object_id__empty (optional)
     * @param  int[] $changed_object_id__gt (optional)
     * @param  int[] $changed_object_id__gte (optional)
     * @param  int[] $changed_object_id__lt (optional)
     * @param  int[] $changed_object_id__lte (optional)
     * @param  int[] $changed_object_id__n (optional)
     * @param  string $changed_object_type (optional)
     * @param  string $changed_object_type__n (optional)
     * @param  int[] $changed_object_type_id (optional)
     * @param  int[] $changed_object_type_id__n (optional)
     * @param  int[] $id (optional)
     * @param  bool $id__empty (optional)
     * @param  int[] $id__gt (optional)
     * @param  int[] $id__gte (optional)
     * @param  int[] $id__lt (optional)
     * @param  int[] $id__lte (optional)
     * @param  int[] $id__n (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string[] $object_repr (optional)
     * @param  bool $object_repr__empty (optional)
     * @param  string[] $object_repr__ic (optional)
     * @param  string[] $object_repr__ie (optional)
     * @param  string[] $object_repr__iew (optional)
     * @param  string[] $object_repr__isw (optional)
     * @param  string[] $object_repr__n (optional)
     * @param  string[] $object_repr__nic (optional)
     * @param  string[] $object_repr__nie (optional)
     * @param  string[] $object_repr__niew (optional)
     * @param  string[] $object_repr__nisw (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string $q Search (optional)
     * @param  int[] $related_object_id (optional)
     * @param  bool $related_object_id__empty (optional)
     * @param  int[] $related_object_id__gt (optional)
     * @param  int[] $related_object_id__gte (optional)
     * @param  int[] $related_object_id__lt (optional)
     * @param  int[] $related_object_id__lte (optional)
     * @param  int[] $related_object_id__n (optional)
     * @param  int $related_object_type (optional)
     * @param  int $related_object_type__n (optional)
     * @param  string $request_id (optional)
     * @param  \DateTime $time_after (optional)
     * @param  \DateTime $time_before (optional)
     * @param  string[] $user User name (optional)
     * @param  string[] $user__n User name (optional)
     * @param  int[] $user_id User (ID) (optional)
     * @param  int[] $user_id__n User (ID) (optional)
     * @param  string[] $user_name (optional)
     * @param  bool $user_name__empty (optional)
     * @param  string[] $user_name__ic (optional)
     * @param  string[] $user_name__ie (optional)
     * @param  string[] $user_name__iew (optional)
     * @param  string[] $user_name__isw (optional)
     * @param  string[] $user_name__n (optional)
     * @param  string[] $user_name__nic (optional)
     * @param  string[] $user_name__nie (optional)
     * @param  string[] $user_name__niew (optional)
     * @param  string[] $user_name__nisw (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreObjectChangesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreObjectChangesListAsyncWithHttpInfo($action = null, $action__n = null, $changed_object_id = null, $changed_object_id__empty = null, $changed_object_id__gt = null, $changed_object_id__gte = null, $changed_object_id__lt = null, $changed_object_id__lte = null, $changed_object_id__n = null, $changed_object_type = null, $changed_object_type__n = null, $changed_object_type_id = null, $changed_object_type_id__n = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $limit = null, $object_repr = null, $object_repr__empty = null, $object_repr__ic = null, $object_repr__ie = null, $object_repr__iew = null, $object_repr__isw = null, $object_repr__n = null, $object_repr__nic = null, $object_repr__nie = null, $object_repr__niew = null, $object_repr__nisw = null, $offset = null, $ordering = null, $q = null, $related_object_id = null, $related_object_id__empty = null, $related_object_id__gt = null, $related_object_id__gte = null, $related_object_id__lt = null, $related_object_id__lte = null, $related_object_id__n = null, $related_object_type = null, $related_object_type__n = null, $request_id = null, $time_after = null, $time_before = null, $user = null, $user__n = null, $user_id = null, $user_id__n = null, $user_name = null, $user_name__empty = null, $user_name__ic = null, $user_name__ie = null, $user_name__iew = null, $user_name__isw = null, $user_name__n = null, $user_name__nic = null, $user_name__nie = null, $user_name__niew = null, $user_name__nisw = null, string $contentType = self::contentTypes['coreObjectChangesList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PaginatedObjectChangeList';
        $request = $this->coreObjectChangesListRequest($action, $action__n, $changed_object_id, $changed_object_id__empty, $changed_object_id__gt, $changed_object_id__gte, $changed_object_id__lt, $changed_object_id__lte, $changed_object_id__n, $changed_object_type, $changed_object_type__n, $changed_object_type_id, $changed_object_type_id__n, $id, $id__empty, $id__gt, $id__gte, $id__lt, $id__lte, $id__n, $limit, $object_repr, $object_repr__empty, $object_repr__ic, $object_repr__ie, $object_repr__iew, $object_repr__isw, $object_repr__n, $object_repr__nic, $object_repr__nie, $object_repr__niew, $object_repr__nisw, $offset, $ordering, $q, $related_object_id, $related_object_id__empty, $related_object_id__gt, $related_object_id__gte, $related_object_id__lt, $related_object_id__lte, $related_object_id__n, $related_object_type, $related_object_type__n, $request_id, $time_after, $time_before, $user, $user__n, $user_id, $user_id__n, $user_name, $user_name__empty, $user_name__ic, $user_name__ie, $user_name__iew, $user_name__isw, $user_name__n, $user_name__nic, $user_name__nie, $user_name__niew, $user_name__nisw, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'coreObjectChangesList'
     *
     * @param  string $action * &#x60;create&#x60; - Created * &#x60;update&#x60; - Updated * &#x60;delete&#x60; - Deleted (optional)
     * @param  string $action__n * &#x60;create&#x60; - Created * &#x60;update&#x60; - Updated * &#x60;delete&#x60; - Deleted (optional)
     * @param  int[] $changed_object_id (optional)
     * @param  bool $changed_object_id__empty (optional)
     * @param  int[] $changed_object_id__gt (optional)
     * @param  int[] $changed_object_id__gte (optional)
     * @param  int[] $changed_object_id__lt (optional)
     * @param  int[] $changed_object_id__lte (optional)
     * @param  int[] $changed_object_id__n (optional)
     * @param  string $changed_object_type (optional)
     * @param  string $changed_object_type__n (optional)
     * @param  int[] $changed_object_type_id (optional)
     * @param  int[] $changed_object_type_id__n (optional)
     * @param  int[] $id (optional)
     * @param  bool $id__empty (optional)
     * @param  int[] $id__gt (optional)
     * @param  int[] $id__gte (optional)
     * @param  int[] $id__lt (optional)
     * @param  int[] $id__lte (optional)
     * @param  int[] $id__n (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  string[] $object_repr (optional)
     * @param  bool $object_repr__empty (optional)
     * @param  string[] $object_repr__ic (optional)
     * @param  string[] $object_repr__ie (optional)
     * @param  string[] $object_repr__iew (optional)
     * @param  string[] $object_repr__isw (optional)
     * @param  string[] $object_repr__n (optional)
     * @param  string[] $object_repr__nic (optional)
     * @param  string[] $object_repr__nie (optional)
     * @param  string[] $object_repr__niew (optional)
     * @param  string[] $object_repr__nisw (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  string $q Search (optional)
     * @param  int[] $related_object_id (optional)
     * @param  bool $related_object_id__empty (optional)
     * @param  int[] $related_object_id__gt (optional)
     * @param  int[] $related_object_id__gte (optional)
     * @param  int[] $related_object_id__lt (optional)
     * @param  int[] $related_object_id__lte (optional)
     * @param  int[] $related_object_id__n (optional)
     * @param  int $related_object_type (optional)
     * @param  int $related_object_type__n (optional)
     * @param  string $request_id (optional)
     * @param  \DateTime $time_after (optional)
     * @param  \DateTime $time_before (optional)
     * @param  string[] $user User name (optional)
     * @param  string[] $user__n User name (optional)
     * @param  int[] $user_id User (ID) (optional)
     * @param  int[] $user_id__n User (ID) (optional)
     * @param  string[] $user_name (optional)
     * @param  bool $user_name__empty (optional)
     * @param  string[] $user_name__ic (optional)
     * @param  string[] $user_name__ie (optional)
     * @param  string[] $user_name__iew (optional)
     * @param  string[] $user_name__isw (optional)
     * @param  string[] $user_name__n (optional)
     * @param  string[] $user_name__nic (optional)
     * @param  string[] $user_name__nie (optional)
     * @param  string[] $user_name__niew (optional)
     * @param  string[] $user_name__nisw (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreObjectChangesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function coreObjectChangesListRequest($action = null, $action__n = null, $changed_object_id = null, $changed_object_id__empty = null, $changed_object_id__gt = null, $changed_object_id__gte = null, $changed_object_id__lt = null, $changed_object_id__lte = null, $changed_object_id__n = null, $changed_object_type = null, $changed_object_type__n = null, $changed_object_type_id = null, $changed_object_type_id__n = null, $id = null, $id__empty = null, $id__gt = null, $id__gte = null, $id__lt = null, $id__lte = null, $id__n = null, $limit = null, $object_repr = null, $object_repr__empty = null, $object_repr__ic = null, $object_repr__ie = null, $object_repr__iew = null, $object_repr__isw = null, $object_repr__n = null, $object_repr__nic = null, $object_repr__nie = null, $object_repr__niew = null, $object_repr__nisw = null, $offset = null, $ordering = null, $q = null, $related_object_id = null, $related_object_id__empty = null, $related_object_id__gt = null, $related_object_id__gte = null, $related_object_id__lt = null, $related_object_id__lte = null, $related_object_id__n = null, $related_object_type = null, $related_object_type__n = null, $request_id = null, $time_after = null, $time_before = null, $user = null, $user__n = null, $user_id = null, $user_id__n = null, $user_name = null, $user_name__empty = null, $user_name__ic = null, $user_name__ie = null, $user_name__iew = null, $user_name__isw = null, $user_name__n = null, $user_name__nic = null, $user_name__nie = null, $user_name__niew = null, $user_name__nisw = null, string $contentType = self::contentTypes['coreObjectChangesList'][0])
    {
































































        $resourcePath = '/api/core/object-changes/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $action,
            'action', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $action__n,
            'action__n', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $changed_object_id,
            'changed_object_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $changed_object_id__empty,
            'changed_object_id__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $changed_object_id__gt,
            'changed_object_id__gt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $changed_object_id__gte,
            'changed_object_id__gte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $changed_object_id__lt,
            'changed_object_id__lt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $changed_object_id__lte,
            'changed_object_id__lte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $changed_object_id__n,
            'changed_object_id__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $changed_object_type,
            'changed_object_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $changed_object_type__n,
            'changed_object_type__n', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $changed_object_type_id,
            'changed_object_type_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $changed_object_type_id__n,
            'changed_object_type_id__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__empty,
            'id__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__gt,
            'id__gt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__gte,
            'id__gte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__lt,
            'id__lt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__lte,
            'id__lte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id__n,
            'id__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_repr,
            'object_repr', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_repr__empty,
            'object_repr__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_repr__ic,
            'object_repr__ic', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_repr__ie,
            'object_repr__ie', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_repr__iew,
            'object_repr__iew', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_repr__isw,
            'object_repr__isw', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_repr__n,
            'object_repr__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_repr__nic,
            'object_repr__nic', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_repr__nie,
            'object_repr__nie', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_repr__niew,
            'object_repr__niew', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $object_repr__nisw,
            'object_repr__nisw', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordering,
            'ordering', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $related_object_id,
            'related_object_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $related_object_id__empty,
            'related_object_id__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $related_object_id__gt,
            'related_object_id__gt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $related_object_id__gte,
            'related_object_id__gte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $related_object_id__lt,
            'related_object_id__lt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $related_object_id__lte,
            'related_object_id__lte', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $related_object_id__n,
            'related_object_id__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $related_object_type,
            'related_object_type', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $related_object_type__n,
            'related_object_type__n', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_id,
            'request_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $time_after,
            'time_after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $time_before,
            'time_before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user,
            'user', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user__n,
            'user__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'user_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id__n,
            'user_id__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_name,
            'user_name', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_name__empty,
            'user_name__empty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_name__ic,
            'user_name__ic', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_name__ie,
            'user_name__ie', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_name__iew,
            'user_name__iew', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_name__isw,
            'user_name__isw', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_name__n,
            'user_name__n', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_name__nic,
            'user_name__nic', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_name__nie,
            'user_name__nie', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_name__niew,
            'user_name__niew', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_name__nisw,
            'user_name__nisw', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation coreObjectChangesRetrieve
     *
     * @param  int $id A unique integer value identifying this object change. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreObjectChangesRetrieve'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ObjectChange
     */
    public function coreObjectChangesRetrieve($id, string $contentType = self::contentTypes['coreObjectChangesRetrieve'][0])
    {
        list($response) = $this->coreObjectChangesRetrieveWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation coreObjectChangesRetrieveWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this object change. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreObjectChangesRetrieve'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ObjectChange, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreObjectChangesRetrieveWithHttpInfo($id, string $contentType = self::contentTypes['coreObjectChangesRetrieve'][0])
    {
        $request = $this->coreObjectChangesRetrieveRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ObjectChange' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ObjectChange' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ObjectChange', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ObjectChange';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ObjectChange',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation coreObjectChangesRetrieveAsync
     *
     * @param  int $id A unique integer value identifying this object change. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreObjectChangesRetrieve'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreObjectChangesRetrieveAsync($id, string $contentType = self::contentTypes['coreObjectChangesRetrieve'][0])
    {
        return $this->coreObjectChangesRetrieveAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation coreObjectChangesRetrieveAsyncWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this object change. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreObjectChangesRetrieve'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function coreObjectChangesRetrieveAsyncWithHttpInfo($id, string $contentType = self::contentTypes['coreObjectChangesRetrieve'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ObjectChange';
        $request = $this->coreObjectChangesRetrieveRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'coreObjectChangesRetrieve'
     *
     * @param  int $id A unique integer value identifying this object change. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['coreObjectChangesRetrieve'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function coreObjectChangesRetrieveRequest($id, string $contentType = self::contentTypes['coreObjectChangesRetrieve'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling coreObjectChangesRetrieve'
            );
        }


        $resourcePath = '/api/core/object-changes/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
